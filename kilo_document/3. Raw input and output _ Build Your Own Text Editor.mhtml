From: <Saved by Blink>
Snapshot-Content-Location: https://viewsourcecode.org/snaptoken/kilo/03.rawInputAndOutput.html
Subject: 3. Raw input and output | Build Your Own Text Editor
Date: Tue, 23 Sep 2025 12:36:28 +0100
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--lVblIC6eJFfMBMRBEYeOrYaBwpwG3IrvOjGBnKMKJD----"


------MultipartBoundary--lVblIC6eJFfMBMRBEYeOrYaBwpwG3IrvOjGBnKMKJD----
Content-Type: text/html
Content-ID: <frame-52DD9075882A8A50928F6BAC7A5437A4@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://viewsourcecode.org/snaptoken/kilo/03.rawInputAndOutput.html

<!DOCTYPE html><html><head><meta http-equiv=3D"Content-Type" content=3D"tex=
t/html; charset=3DUTF-8">
   =20
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1.0, maximum-scale=3D1.0">
    <title>3. Raw input and output | Build Your Own Text Editor</title>
    <link href=3D"https://viewsourcecode.org/snaptoken/kilo/style.css" rel=
=3D"stylesheet">
  </head>
  <body data-new-gr-c-s-check-loaded=3D"14.1254.0" data-gr-ext-installed=3D=
"">
    <header class=3D"bar">
      <nav>
        <a href=3D"https://viewsourcecode.org/snaptoken/kilo/02.enteringRaw=
Mode.html">=E2=86=90 prev</a>
        <a href=3D"https://viewsourcecode.org/snaptoken/kilo/index.html">co=
ntents</a>
        <a href=3D"https://viewsourcecode.org/snaptoken/kilo/04.aTextViewer=
.html">next =E2=86=92</a>
      </nav>
    </header>
    <div id=3D"container">
      <h1 id=3D"raw-input-and-output">Raw input and output</h1>
<h2 id=3D"press-ctrl-q-to-quit"><a href=3D"https://viewsourcecode.org/snapt=
oken/kilo/03.rawInputAndOutput.html#press-ctrl-q-to-quit">Press <kbd>Ctrl-Q=
</kbd> to quit</a></h2>

<p>Last chapter we saw that the <kbd>Ctrl</kbd> key combined with the alpha=
betic
keys seemed to map to bytes 1=E2=80=9326. We can use this to detect
<kbd>Ctrl</kbd> key combinations and map them to different operations in ou=
r
editor. We=E2=80=99ll start by mapping <kbd>Ctrl-Q</kbd> to the quit operat=
ion.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/ctrl-q/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 20</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/ctrl-q">ctrl-q</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line"><span class=3D"cm"=
>/*** includes ***/</span></div><div class=3D"line"></div><div class=3D"lin=
e"><span class=3D"cp">#include &lt;ctype.h&gt;</span></div><div class=3D"li=
ne"><span class=3D"cp">#include &lt;errno.h&gt;</span></div><div class=3D"l=
ine"><span class=3D"cp">#include &lt;stdio.h&gt;</span></div><div class=3D"=
line"><span class=3D"cp">#include &lt;stdlib.h&gt;</span></div><div class=
=3D"line"><span class=3D"cp">#include &lt;termios.h&gt;</span></div><div cl=
ass=3D"line"><span class=3D"cp">#include &lt;unistd.h&gt;</span></div><div =
class=3D"line"></div><ins class=3D"line"><span class=3D"cm">/*** defines **=
*/</span></ins><ins class=3D"line"></ins><ins class=3D"line"><span class=3D=
"cp">#define CTRL_KEY(k) ((k) &amp; 0x1f)</span></ins><div class=3D"line"><=
/div><div class=3D"line folded"><span class=3D"cm">/*** data ***/</span></d=
iv><div class=3D"line folded"><span class=3D"cm">/*** terminal ***/</span><=
/div><div class=3D"line"><span class=3D"cm">/*** init ***/</span></div><div=
 class=3D"line"></div><div class=3D"line"><span class=3D"kt">int</span> <sp=
an class=3D"nf">main</span><span class=3D"p">()</span> <span class=3D"p">{<=
/span></div><div class=3D"line">  <span class=3D"n">enableRawMode</span><sp=
an class=3D"p">();</span></div><div class=3D"line"></div><div class=3D"line=
">  <span class=3D"k">while</span> <span class=3D"p">(</span><span class=3D=
"mi">1</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><di=
v class=3D"line">    <span class=3D"kt">char</span> <span class=3D"n">c</sp=
an> <span class=3D"o">=3D</span> <span class=3D"sc">'\0'</span><span class=
=3D"p">;</span></div><div class=3D"line">    <span class=3D"k">if</span> <s=
pan class=3D"p">(</span><span class=3D"n">read</span><span class=3D"p">(</s=
pan><span class=3D"n">STDIN_FILENO</span><span class=3D"p">,</span> <span c=
lass=3D"o">&amp;</span><span class=3D"n">c</span><span class=3D"p">,</span>=
 <span class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"o">=
=3D=3D</span> <span class=3D"o">-</span><span class=3D"mi">1</span> <span c=
lass=3D"o">&amp;&amp;</span> <span class=3D"n">errno</span> <span class=3D"=
o">!=3D</span> <span class=3D"n">EAGAIN</span><span class=3D"p">)</span> <s=
pan class=3D"n">die</span><span class=3D"p">(</span><span class=3D"s">"read=
"</span><span class=3D"p">);</span></div><div class=3D"line">    <span clas=
s=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">iscntrl</span=
><span class=3D"p">(</span><span class=3D"n">c</span><span class=3D"p">))</=
span> <span class=3D"p">{</span></div><div class=3D"line">      <span class=
=3D"n">printf</span><span class=3D"p">(</span><span class=3D"s">"%d</span><=
span class=3D"se">\r\n</span><span class=3D"s">"</span><span class=3D"p">,<=
/span> <span class=3D"n">c</span><span class=3D"p">);</span></div><div clas=
s=3D"line">    <span class=3D"p">}</span> <span class=3D"k">else</span> <sp=
an class=3D"p">{</span></div><div class=3D"line">      <span class=3D"n">pr=
intf</span><span class=3D"p">(</span><span class=3D"s">"%d ('%c')</span><sp=
an class=3D"se">\r\n</span><span class=3D"s">"</span><span class=3D"p">,</s=
pan> <span class=3D"n">c</span><span class=3D"p">,</span> <span class=3D"n"=
>c</span><span class=3D"p">);</span></div><div class=3D"line">    <span cla=
ss=3D"p">}</span></div><ins class=3D"line">    <span class=3D"k">if</span> =
<span class=3D"p">(</span><span class=3D"n">c</span> <span class=3D"o">=3D=
=3D</span> <span class=3D"n">CTRL_KEY</span><span class=3D"p">(</span><span=
 class=3D"sc">'q'</span><span class=3D"p">))</span> <span class=3D"k">break=
</span><span class=3D"p">;</span></ins><div class=3D"line">  <span class=3D=
"p">}</span></div><div class=3D"line"></div><div class=3D"line">  <span cla=
ss=3D"k">return</span> <span class=3D"mi">0</span><span class=3D"p">;</span=
></div><div class=3D"line"><span class=3D"p">}</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>The <code>CTRL_KEY</code> macro bitwise-ANDs a character with the value =
<code>00011111</code>, in
binary. (In C, you generally specify bitmasks using hexadecimal, since C
doesn=E2=80=99t have binary literals, and hexadecimal is more concise and r=
eadable once
you get used to it.) In other words, it sets the upper 3 bits of the charac=
ter
to <code>0</code>. This mirrors what the <kbd>Ctrl</kbd> key does in the te=
rminal:=20
it strips bits 5 and 6 from whatever key you press in combination with
<kbd>Ctrl</kbd>, and sends that. (By convention, bit numbering starts from =
0.)=20
The ASCII character set seems to be designed this way on purpose.=20
(It is also similarly designed so that you can set and clear bit 5 to switc=
h=20
between lowercase and uppercase.)</p>
<h2 id=3D"refactor-keyboard-input"><a href=3D"https://viewsourcecode.org/sn=
aptoken/kilo/03.rawInputAndOutput.html#refactor-keyboard-input">Refactor ke=
yboard input</a></h2>

<p>Let=E2=80=99s make a function for low-level keypress reading, and anothe=
r function for
mapping keypresses to editor operations. We=E2=80=99ll also stop printing o=
ut
keypresses at this point.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/refactor-input/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 21</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/refactor-input">refactor-input</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line"><span class=3D"cm=
">/*** terminal ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne folded"><span class=3D"kt">void</span> <span class=3D"nf">die</span><spa=
n class=3D"p">(</span><span class=3D"k">const</span> <span class=3D"kt">cha=
r</span> <span class=3D"o">*</span><span class=3D"n">s</span><span class=3D=
"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span=
></div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"=
kt">void</span> <span class=3D"nf">disableRawMode</span><span class=3D"p">(=
)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></d=
iv><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">=
void</span> <span class=3D"nf">enableRawMode</span><span class=3D"p">()</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><d=
iv class=3D"line"></div><ins class=3D"line"><span class=3D"kt">char</span> =
<span class=3D"nf">editorReadKey</span><span class=3D"p">()</span> <span cl=
ass=3D"p">{</span></ins><ins class=3D"line">  <span class=3D"kt">int</span>=
 <span class=3D"n">nread</span><span class=3D"p">;</span></ins><ins class=
=3D"line">  <span class=3D"kt">char</span> <span class=3D"n">c</span><span =
class=3D"p">;</span></ins><ins class=3D"line">  <span class=3D"k">while</sp=
an> <span class=3D"p">((</span><span class=3D"n">nread</span> <span class=
=3D"o">=3D</span> <span class=3D"n">read</span><span class=3D"p">(</span><s=
pan class=3D"n">STDIN_FILENO</span><span class=3D"p">,</span> <span class=
=3D"o">&amp;</span><span class=3D"n">c</span><span class=3D"p">,</span> <sp=
an class=3D"mi">1</span><span class=3D"p">))</span> <span class=3D"o">!=3D<=
/span> <span class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D=
"p">{</span></ins><ins class=3D"line">    <span class=3D"k">if</span> <span=
 class=3D"p">(</span><span class=3D"n">nread</span> <span class=3D"o">=3D=
=3D</span> <span class=3D"o">-</span><span class=3D"mi">1</span> <span clas=
s=3D"o">&amp;&amp;</span> <span class=3D"n">errno</span> <span class=3D"o">=
!=3D</span> <span class=3D"n">EAGAIN</span><span class=3D"p">)</span> <span=
 class=3D"n">die</span><span class=3D"p">(</span><span class=3D"s">"read"</=
span><span class=3D"p">);</span></ins><ins class=3D"line">  <span class=3D"=
p">}</span></ins><ins class=3D"line">  <span class=3D"k">return</span> <spa=
n class=3D"n">c</span><span class=3D"p">;</span></ins><ins class=3D"line"><=
span class=3D"p">}</span></ins><ins class=3D"line"></ins><ins class=3D"line=
"><span class=3D"cm">/*** input ***/</span></ins><ins class=3D"line"></ins>=
<ins class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">edito=
rProcessKeypress</span><span class=3D"p">()</span> <span class=3D"p">{</spa=
n></ins><ins class=3D"line">  <span class=3D"kt">char</span> <span class=3D=
"n">c</span> <span class=3D"o">=3D</span> <span class=3D"n">editorReadKey</=
span><span class=3D"p">();</span></ins><ins class=3D"line"></ins><ins class=
=3D"line">  <span class=3D"k">switch</span> <span class=3D"p">(</span><span=
 class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p">{</span><=
/ins><ins class=3D"line">    <span class=3D"k">case</span> <span class=3D"n=
">CTRL_KEY</span><span class=3D"p">(</span><span class=3D"sc">'q'</span><sp=
an class=3D"p">):</span></ins><ins class=3D"line">      <span class=3D"n">e=
xit</span><span class=3D"p">(</span><span class=3D"mi">0</span><span class=
=3D"p">);</span></ins><ins class=3D"line">      <span class=3D"k">break</sp=
an><span class=3D"p">;</span></ins><ins class=3D"line">  <span class=3D"p">=
}</span></ins><ins class=3D"line"><span class=3D"p">}</span></ins><div clas=
s=3D"line"></div><div class=3D"line"><span class=3D"cm">/*** init ***/</spa=
n></div><div class=3D"line"></div><div class=3D"line"><span class=3D"kt">in=
t</span> <span class=3D"nf">main</span><span class=3D"p">()</span> <span cl=
ass=3D"p">{</span></div><div class=3D"line">  <span class=3D"n">enableRawMo=
de</span><span class=3D"p">();</span></div><div class=3D"line"></div><div c=
lass=3D"line">  <span class=3D"k">while</span> <span class=3D"p">(</span><s=
pan class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"p">{</sp=
an></div><ins class=3D"line">    <span class=3D"n">editorProcessKeypress</s=
pan><span class=3D"p">();</span></ins><div class=3D"line">  <span class=3D"=
p">}</span></div><div class=3D"line"></div><div class=3D"line">  <span clas=
s=3D"k">return</span> <span class=3D"mi">0</span><span class=3D"p">;</span>=
</div><div class=3D"line"><span class=3D"p">}</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p><code>editorReadKey()</code>=E2=80=99s job is to wait for one keypress, =
and return it. Later,
we=E2=80=99ll expand this function to handle escape sequences, which involv=
es reading
multiple bytes that represent a single keypress, as is the case with the ar=
row
keys.</p>

<p><code>editorProcessKeypress()</code> waits for a keypress, and then hand=
les it. Later, it
will map various <kbd>Ctrl</kbd> key combinations and other special keys to
different editor functions, and insert any alphanumeric and other printable
keys=E2=80=99 characters into the text that is being edited.</p>

<p>Note that <code>editorReadKey()</code> belongs in the <code>/*** termina=
l ***/</code> section because
it deals with low-level terminal input, whereas <code>editorProcessKeypress=
()</code>
belongs in the new <code>/*** input ***/</code> section because it deals wi=
th mapping keys
to editor functions at a much higher level.</p>

<p>Now we have vastly simplified <code>main()</code>, and we will try to ke=
ep it that way.</p>
<h2 id=3D"clear-the-screen"><a href=3D"https://viewsourcecode.org/snaptoken=
/kilo/03.rawInputAndOutput.html#clear-the-screen">Clear the screen</a></h2>

<p>We=E2=80=99re going to render the editor=E2=80=99s user interface to the=
 screen after each
keypress. Let=E2=80=99s start by just clearing the screen.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/clear-screen/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 22</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/clear-screen">clear-screen</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line"><span class=3D"cm=
">/*** terminal ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne folded"><span class=3D"kt">void</span> <span class=3D"nf">die</span><spa=
n class=3D"p">(</span><span class=3D"k">const</span> <span class=3D"kt">cha=
r</span> <span class=3D"o">*</span><span class=3D"n">s</span><span class=3D=
"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span=
></div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"=
kt">void</span> <span class=3D"nf">disableRawMode</span><span class=3D"p">(=
)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></d=
iv><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">=
void</span> <span class=3D"nf">enableRawMode</span><span class=3D"p">()</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><d=
iv class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">char<=
/span> <span class=3D"nf">editorReadKey</span><span class=3D"p">()</span> <=
span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div cl=
ass=3D"line"></div><ins class=3D"line"><span class=3D"cm">/*** output ***/<=
/span></ins><ins class=3D"line"></ins><ins class=3D"line"><span class=3D"kt=
">void</span> <span class=3D"nf">editorRefreshScreen</span><span class=3D"p=
">()</span> <span class=3D"p">{</span></ins><ins class=3D"line">  <span cla=
ss=3D"n">write</span><span class=3D"p">(</span><span class=3D"n">STDOUT_FIL=
ENO</span><span class=3D"p">,</span> <span class=3D"s">"</span><span class=
=3D"se">\x1b</span><span class=3D"s">[2J"</span><span class=3D"p">,</span> =
<span class=3D"mi">4</span><span class=3D"p">);</span></ins><ins class=3D"l=
ine"><span class=3D"p">}</span></ins><div class=3D"line"></div><div class=
=3D"line folded"><span class=3D"cm">/*** input ***/</span></div><div class=
=3D"line"><span class=3D"cm">/*** init ***/</span></div><div class=3D"line"=
></div><div class=3D"line"><span class=3D"kt">int</span> <span class=3D"nf"=
>main</span><span class=3D"p">()</span> <span class=3D"p">{</span></div><di=
v class=3D"line">  <span class=3D"n">enableRawMode</span><span class=3D"p">=
();</span></div><div class=3D"line"></div><div class=3D"line">  <span class=
=3D"k">while</span> <span class=3D"p">(</span><span class=3D"mi">1</span><s=
pan class=3D"p">)</span> <span class=3D"p">{</span></div><ins class=3D"line=
">    <span class=3D"n">editorRefreshScreen</span><span class=3D"p">();</sp=
an></ins><div class=3D"line">    <span class=3D"n">editorProcessKeypress</s=
pan><span class=3D"p">();</span></div><div class=3D"line">  <span class=3D"=
p">}</span></div><div class=3D"line"></div><div class=3D"line">  <span clas=
s=3D"k">return</span> <span class=3D"mi">0</span><span class=3D"p">;</span>=
</div><div class=3D"line"><span class=3D"p">}</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p><code>write()</code> and <code>STDOUT_FILENO</code> come from <code>&lt;=
unistd.h&gt;</code>.</p>

<p>The <code>4</code> in our <code>write()</code> call means we are writing=
 <code>4</code> bytes out to the
terminal. The first byte is <code>\x1b</code>, which is the escape characte=
r, or <code>27</code> in
decimal. (Try and remember <code>\x1b</code>, we will be using it a lot.) T=
he other three
bytes are <code>[2J</code>.</p>

<p>We are writing an <em>escape sequence</em> to the terminal. Escape seque=
nces always
start with an escape character (<code>27</code>) followed by a <code>[</cod=
e> character. Escape
sequences instruct the terminal to do various text formatting tasks, such a=
s
coloring text, moving the cursor around, and clearing parts of the screen.<=
/p>

<p>We are using the <code>J</code> command
(<a href=3D"http://vt100.net/docs/vt100-ug/chapter3.html#ED">Erase In Displ=
ay</a>) to clear
the screen. Escape sequence commands take arguments, which come before the
command. In this case the argument is <code>2</code>, which says to clear t=
he entire
screen. <code>&lt;esc&gt;[1J</code> would clear the screen up to where the =
cursor is, and
<code>&lt;esc&gt;[0J</code> would clear the screen from the cursor up to th=
e end of the screen.
Also, <code>0</code> is the default argument for <code>J</code>, so just <c=
ode>&lt;esc&gt;[J</code> by itself would
also clear the screen from the cursor to the end.</p>

<p>For our text editor, we will be mostly using
<a href=3D"https://en.wikipedia.org/wiki/VT100">VT100</a> escape sequences,=
 which
are supported very widely by modern terminal emulators. See the
<a href=3D"http://vt100.net/docs/vt100-ug/chapter3.html">VT100 User Guide</=
a> for complete
documentation of each escape sequence.</p>

<p>If we wanted to support the maximum number of terminals out there, we co=
uld use
the <a href=3D"https://en.wikipedia.org/wiki/Ncurses">ncurses</a> library, =
which uses the
<a href=3D"https://en.wikipedia.org/wiki/Terminfo">terminfo</a> database to=
 figure out the
capabilities of a terminal and what escape sequences to use for that partic=
ular
terminal.</p>
<h2 id=3D"reposition-the-cursor"><a href=3D"https://viewsourcecode.org/snap=
token/kilo/03.rawInputAndOutput.html#reposition-the-cursor">Reposition the =
cursor</a></h2>

<p>You may notice that the <code>&lt;esc&gt;[2J</code> command left the cur=
sor at the bottom of the
screen. Let=E2=80=99s reposition it at the top-left corner so that we=E2=80=
=99re ready to draw
the editor interface from top to bottom.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/cursor-home/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 23</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/cursor-home">cursor-home</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span class=3D"=
cm">/*** output ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne"><span class=3D"kt">void</span> <span class=3D"nf">editorRefreshScreen</=
span><span class=3D"p">()</span> <span class=3D"p">{</span></div><div class=
=3D"line">  <span class=3D"n">write</span><span class=3D"p">(</span><span c=
lass=3D"n">STDOUT_FILENO</span><span class=3D"p">,</span> <span class=3D"s"=
>"</span><span class=3D"se">\x1b</span><span class=3D"s">[2J"</span><span c=
lass=3D"p">,</span> <span class=3D"mi">4</span><span class=3D"p">);</span><=
/div><ins class=3D"line">  <span class=3D"n">write</span><span class=3D"p">=
(</span><span class=3D"n">STDOUT_FILENO</span><span class=3D"p">,</span> <s=
pan class=3D"s">"</span><span class=3D"se">\x1b</span><span class=3D"s">[H"=
</span><span class=3D"p">,</span> <span class=3D"mi">3</span><span class=3D=
"p">);</span></ins><div class=3D"line"><span class=3D"p">}</span></div><div=
 class=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/*** in=
put ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** ini=
t ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>This escape sequence is only <code>3</code> bytes long, and uses the <co=
de>H</code> command
(<a href=3D"http://vt100.net/docs/vt100-ug/chapter3.html#CUP">Cursor Positi=
on</a>) to
position the cursor. The <code>H</code> command actually takes two argument=
s: the row
number and the column number at which to position the cursor. So if you hav=
e an
80=C3=9724 size terminal and you want the cursor in the center of the scree=
n, you could
use the command <code>&lt;esc&gt;[12;40H</code>. (Multiple arguments are se=
parated by a <code>;</code>
character.) The default arguments for <code>H</code> both happen to be <cod=
e>1</code>, so we can
leave both arguments out and it will position the cursor at the first row a=
nd
first column, as if we had sent the <code>&lt;esc&gt;[1;1H</code> command. =
(Rows and columns are
numbered starting at <code>1</code>, not <code>0</code>.)</p>
<h2 id=3D"clear-the-screen-on-exit"><a href=3D"https://viewsourcecode.org/s=
naptoken/kilo/03.rawInputAndOutput.html#clear-the-screen-on-exit">Clear the=
 screen on exit</a></h2>

<p>Let=E2=80=99s clear the screen and reposition the cursor when our progra=
m exits. If an
error occurs in the middle of rendering the screen, we don=E2=80=99t want a=
 bunch of
garbage left over on the screen, and we don=E2=80=99t want the error to be =
printed
wherever the cursor happens to be at that point.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/clean-exit/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 24</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/clean-exit">clean-exit</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line"><span class=3D"cm=
">/*** terminal ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne"><span class=3D"kt">void</span> <span class=3D"nf">die</span><span class=
=3D"p">(</span><span class=3D"k">const</span> <span class=3D"kt">char</span=
> <span class=3D"o">*</span><span class=3D"n">s</span><span class=3D"p">)</=
span> <span class=3D"p">{</span></div><ins class=3D"line">  <span class=3D"=
n">write</span><span class=3D"p">(</span><span class=3D"n">STDOUT_FILENO</s=
pan><span class=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se"=
>\x1b</span><span class=3D"s">[2J"</span><span class=3D"p">,</span> <span c=
lass=3D"mi">4</span><span class=3D"p">);</span></ins><ins class=3D"line">  =
<span class=3D"n">write</span><span class=3D"p">(</span><span class=3D"n">S=
TDOUT_FILENO</span><span class=3D"p">,</span> <span class=3D"s">"</span><sp=
an class=3D"se">\x1b</span><span class=3D"s">[H"</span><span class=3D"p">,<=
/span> <span class=3D"mi">3</span><span class=3D"p">);</span></ins><div cla=
ss=3D"line"></div><div class=3D"line">  <span class=3D"n">perror</span><spa=
n class=3D"p">(</span><span class=3D"n">s</span><span class=3D"p">);</span>=
</div><div class=3D"line">  <span class=3D"n">exit</span><span class=3D"p">=
(</span><span class=3D"mi">1</span><span class=3D"p">);</span></div><div cl=
ass=3D"line"><span class=3D"p">}</span></div><div class=3D"line"></div><div=
 class=3D"line folded"><span class=3D"kt">void</span> <span class=3D"nf">di=
sableRawMode</span><span class=3D"p">()</span> <span class=3D"p">{</span> =
=E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div cl=
ass=3D"line folded"><span class=3D"kt">void</span> <span class=3D"nf">enabl=
eRawMode</span><span class=3D"p">()</span> <span class=3D"p">{</span> =E2=
=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div class=
=3D"line folded"><span class=3D"kt">char</span> <span class=3D"nf">editorRe=
adKey</span><span class=3D"p">()</span> <span class=3D"p">{</span> =E2=80=
=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D=
"line folded"><span class=3D"cm">/*** output ***/</span></div><div class=3D=
"line"><span class=3D"cm">/*** input ***/</span></div><div class=3D"line"><=
/div><div class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">=
editorProcessKeypress</span><span class=3D"p">()</span> <span class=3D"p">{=
</span></div><div class=3D"line">  <span class=3D"kt">char</span> <span cla=
ss=3D"n">c</span> <span class=3D"o">=3D</span> <span class=3D"n">editorRead=
Key</span><span class=3D"p">();</span></div><div class=3D"line"></div><div =
class=3D"line">  <span class=3D"k">switch</span> <span class=3D"p">(</span>=
<span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p">{</s=
pan></div><div class=3D"line">    <span class=3D"k">case</span> <span class=
=3D"n">CTRL_KEY</span><span class=3D"p">(</span><span class=3D"sc">'q'</spa=
n><span class=3D"p">):</span></div><ins class=3D"line">      <span class=3D=
"n">write</span><span class=3D"p">(</span><span class=3D"n">STDOUT_FILENO</=
span><span class=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se=
">\x1b</span><span class=3D"s">[2J"</span><span class=3D"p">,</span> <span =
class=3D"mi">4</span><span class=3D"p">);</span></ins><ins class=3D"line"> =
     <span class=3D"n">write</span><span class=3D"p">(</span><span class=3D=
"n">STDOUT_FILENO</span><span class=3D"p">,</span> <span class=3D"s">"</spa=
n><span class=3D"se">\x1b</span><span class=3D"s">[H"</span><span class=3D"=
p">,</span> <span class=3D"mi">3</span><span class=3D"p">);</span></ins><di=
v class=3D"line">      <span class=3D"n">exit</span><span class=3D"p">(</sp=
an><span class=3D"mi">0</span><span class=3D"p">);</span></div><div class=
=3D"line">      <span class=3D"k">break</span><span class=3D"p">;</span></d=
iv><div class=3D"line">  <span class=3D"p">}</span></div><div class=3D"line=
"><span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"l=
ine folded"><span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>We have two exit points we want to clear the screen at: <code>die()</cod=
e>, and when the
user presses <kbd>Ctrl-Q</kbd> to quit.</p>

<p>We could use <code>atexit()</code> to clear the screen when our program =
exits, but then
the error message printed by <code>die()</code> would get erased right afte=
r printing it.</p>
<h2 id=3D"tildes"><a href=3D"https://viewsourcecode.org/snaptoken/kilo/03.r=
awInputAndOutput.html#tildes">Tildes</a></h2>

<p>It=E2=80=99s time to start drawing. Let=E2=80=99s draw a column of tilde=
s (<code>~</code>) on the left
hand side of the screen, like <a href=3D"http://www.vim.org/">vim</a> does.=
 In our text
editor, we=E2=80=99ll draw a tilde at the beginning of any lines that come =
after the
end of the file being edited.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/tildes/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 25</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/tildes">tildes</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span class=3D"=
cm">/*** output ***/</span></div><div class=3D"line"></div><ins class=3D"li=
ne"><span class=3D"kt">void</span> <span class=3D"nf">editorDrawRows</span>=
<span class=3D"p">()</span> <span class=3D"p">{</span></ins><ins class=3D"l=
ine">  <span class=3D"kt">int</span> <span class=3D"n">y</span><span class=
=3D"p">;</span></ins><ins class=3D"line">  <span class=3D"k">for</span> <sp=
an class=3D"p">(</span><span class=3D"n">y</span> <span class=3D"o">=3D</sp=
an> <span class=3D"mi">0</span><span class=3D"p">;</span> <span class=3D"n"=
>y</span> <span class=3D"o">&lt;</span> <span class=3D"mi">24</span><span c=
lass=3D"p">;</span> <span class=3D"n">y</span><span class=3D"o">++</span><s=
pan class=3D"p">)</span> <span class=3D"p">{</span></ins><ins class=3D"line=
">    <span class=3D"n">write</span><span class=3D"p">(</span><span class=
=3D"n">STDOUT_FILENO</span><span class=3D"p">,</span> <span class=3D"s">"~<=
/span><span class=3D"se">\r\n</span><span class=3D"s">"</span><span class=
=3D"p">,</span> <span class=3D"mi">3</span><span class=3D"p">);</span></ins=
><ins class=3D"line">  <span class=3D"p">}</span></ins><ins class=3D"line">=
<span class=3D"p">}</span></ins><div class=3D"line"></div><div class=3D"lin=
e"><span class=3D"kt">void</span> <span class=3D"nf">editorRefreshScreen</s=
pan><span class=3D"p">()</span> <span class=3D"p">{</span></div><div class=
=3D"line">  <span class=3D"n">write</span><span class=3D"p">(</span><span c=
lass=3D"n">STDOUT_FILENO</span><span class=3D"p">,</span> <span class=3D"s"=
>"</span><span class=3D"se">\x1b</span><span class=3D"s">[2J"</span><span c=
lass=3D"p">,</span> <span class=3D"mi">4</span><span class=3D"p">);</span><=
/div><div class=3D"line">  <span class=3D"n">write</span><span class=3D"p">=
(</span><span class=3D"n">STDOUT_FILENO</span><span class=3D"p">,</span> <s=
pan class=3D"s">"</span><span class=3D"se">\x1b</span><span class=3D"s">[H"=
</span><span class=3D"p">,</span> <span class=3D"mi">3</span><span class=3D=
"p">);</span></div><div class=3D"line"></div><ins class=3D"line">  <span cl=
ass=3D"n">editorDrawRows</span><span class=3D"p">();</span></ins><ins class=
=3D"line"></ins><ins class=3D"line">  <span class=3D"n">write</span><span c=
lass=3D"p">(</span><span class=3D"n">STDOUT_FILENO</span><span class=3D"p">=
,</span> <span class=3D"s">"</span><span class=3D"se">\x1b</span><span clas=
s=3D"s">[H"</span><span class=3D"p">,</span> <span class=3D"mi">3</span><sp=
an class=3D"p">);</span></ins><div class=3D"line"><span class=3D"p">}</span=
></div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"=
cm">/*** input ***/</span></div><div class=3D"line folded"><span class=3D"c=
m">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p><code>editorDrawRows()</code> will handle drawing each row of the buffer=
 of text being
edited. For now it draws a tilde in each row, which means that row is not p=
art
of the file and can=E2=80=99t contain any text.</p>

<p>We don=E2=80=99t know the size of the terminal yet, so we don=E2=80=99t =
know how many rows to
draw. For now we just draw <code>24</code> rows.</p>

<p>After we=E2=80=99re done drawing, we do another <code>&lt;esc&gt;[H</cod=
e> escape sequence to reposition
the cursor back up at the top-left corner.</p>
<h2 id=3D"global-state"><a href=3D"https://viewsourcecode.org/snaptoken/kil=
o/03.rawInputAndOutput.html#global-state">Global state</a></h2>

<p>Our next goal is to get the size of the terminal, so we know how many ro=
ws to
draw in <code>editorDrawRows()</code>. But first, let=E2=80=99s set up a gl=
obal struct that will
contain our editor state, which we=E2=80=99ll use to store the width and he=
ight of the
terminal. For now, let=E2=80=99s just put our <code>orig_termios</code> glo=
bal into the struct.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/global-state/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 26</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/global-state">global-state</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line"><span class=3D"=
cm">/*** data ***/</span></div><div class=3D"line"></div><ins class=3D"line=
"><span class=3D"k">struct</span> <span class=3D"n">editorConfig</span> <sp=
an class=3D"p">{</span></ins><ins class=3D"line">  <span class=3D"k">struct=
</span> <span class=3D"n">termios</span> <span class=3D"n">orig_termios</sp=
an><span class=3D"p">;</span></ins><ins class=3D"line"><span class=3D"p">};=
</span></ins><ins class=3D"line"></ins><ins class=3D"line"><span class=3D"k=
">struct</span> <span class=3D"n">editorConfig</span> <span class=3D"n">E</=
span><span class=3D"p">;</span></ins><div class=3D"line"></div><div class=
=3D"line"><span class=3D"cm">/*** terminal ***/</span></div><div class=3D"l=
ine"></div><div class=3D"line folded"><span class=3D"kt">void</span> <span =
class=3D"nf">die</span><span class=3D"p">(</span><span class=3D"k">const</s=
pan> <span class=3D"kt">char</span> <span class=3D"o">*</span><span class=
=3D"n">s</span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=
=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D=
"line"><span class=3D"kt">void</span> <span class=3D"nf">disableRawMode</sp=
an><span class=3D"p">()</span> <span class=3D"p">{</span></div><ins class=
=3D"line">  <span class=3D"k">if</span> <span class=3D"p">(</span><span cla=
ss=3D"n">tcsetattr</span><span class=3D"p">(</span><span class=3D"n">STDIN_=
FILENO</span><span class=3D"p">,</span> <span class=3D"n">TCSAFLUSH</span><=
span class=3D"p">,</span> <span class=3D"o">&amp;</span><span class=3D"n">E=
</span><span class=3D"p">.</span><span class=3D"n">orig_termios</span><span=
 class=3D"p">)</span> <span class=3D"o">=3D=3D</span> <span class=3D"o">-</=
span><span class=3D"mi">1</span><span class=3D"p">)</span></ins><div class=
=3D"line">    <span class=3D"n">die</span><span class=3D"p">(</span><span c=
lass=3D"s">"tcsetattr"</span><span class=3D"p">);</span></div><div class=3D=
"line"><span class=3D"p">}</span></div><div class=3D"line"></div><div class=
=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">enableRawMode</=
span><span class=3D"p">()</span> <span class=3D"p">{</span></div><ins class=
=3D"line">  <span class=3D"k">if</span> <span class=3D"p">(</span><span cla=
ss=3D"n">tcgetattr</span><span class=3D"p">(</span><span class=3D"n">STDIN_=
FILENO</span><span class=3D"p">,</span> <span class=3D"o">&amp;</span><span=
 class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">orig_termi=
os</span><span class=3D"p">)</span> <span class=3D"o">=3D=3D</span> <span c=
lass=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">)</span> <s=
pan class=3D"n">die</span><span class=3D"p">(</span><span class=3D"s">"tcge=
tattr"</span><span class=3D"p">);</span></ins><div class=3D"line">  <span c=
lass=3D"n">atexit</span><span class=3D"p">(</span><span class=3D"n">disable=
RawMode</span><span class=3D"p">);</span></div><div class=3D"line"></div><i=
ns class=3D"line">  <span class=3D"k">struct</span> <span class=3D"n">termi=
os</span> <span class=3D"n">raw</span> <span class=3D"o">=3D</span> <span c=
lass=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">orig_termios=
</span><span class=3D"p">;</span></ins><div class=3D"line">  <span class=3D=
"n">raw</span><span class=3D"p">.</span><span class=3D"n">c_iflag</span> <s=
pan class=3D"o">&amp;=3D</span> <span class=3D"o">~</span><span class=3D"p"=
>(</span><span class=3D"n">BRKINT</span> <span class=3D"o">|</span> <span c=
lass=3D"n">ICRNL</span> <span class=3D"o">|</span> <span class=3D"n">INPCK<=
/span> <span class=3D"o">|</span> <span class=3D"n">ISTRIP</span> <span cla=
ss=3D"o">|</span> <span class=3D"n">IXON</span><span class=3D"p">);</span><=
/div><div class=3D"line">  <span class=3D"n">raw</span><span class=3D"p">.<=
/span><span class=3D"n">c_oflag</span> <span class=3D"o">&amp;=3D</span> <s=
pan class=3D"o">~</span><span class=3D"p">(</span><span class=3D"n">OPOST</=
span><span class=3D"p">);</span></div><div class=3D"line">  <span class=3D"=
n">raw</span><span class=3D"p">.</span><span class=3D"n">c_cflag</span> <sp=
an class=3D"o">|=3D</span> <span class=3D"p">(</span><span class=3D"n">CS8<=
/span><span class=3D"p">);</span></div><div class=3D"line">  <span class=3D=
"n">raw</span><span class=3D"p">.</span><span class=3D"n">c_lflag</span> <s=
pan class=3D"o">&amp;=3D</span> <span class=3D"o">~</span><span class=3D"p"=
>(</span><span class=3D"n">ECHO</span> <span class=3D"o">|</span> <span cla=
ss=3D"n">ICANON</span> <span class=3D"o">|</span> <span class=3D"n">IEXTEN<=
/span> <span class=3D"o">|</span> <span class=3D"n">ISIG</span><span class=
=3D"p">);</span></div><div class=3D"line">  <span class=3D"n">raw</span><sp=
an class=3D"p">.</span><span class=3D"n">c_cc</span><span class=3D"p">[</sp=
an><span class=3D"n">VMIN</span><span class=3D"p">]</span> <span class=3D"o=
">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span></div><di=
v class=3D"line">  <span class=3D"n">raw</span><span class=3D"p">.</span><s=
pan class=3D"n">c_cc</span><span class=3D"p">[</span><span class=3D"n">VTIM=
E</span><span class=3D"p">]</span> <span class=3D"o">=3D</span> <span class=
=3D"mi">1</span><span class=3D"p">;</span></div><div class=3D"line"></div><=
div class=3D"line">  <span class=3D"k">if</span> <span class=3D"p">(</span>=
<span class=3D"n">tcsetattr</span><span class=3D"p">(</span><span class=3D"=
n">STDIN_FILENO</span><span class=3D"p">,</span> <span class=3D"n">TCSAFLUS=
H</span><span class=3D"p">,</span> <span class=3D"o">&amp;</span><span clas=
s=3D"n">raw</span><span class=3D"p">)</span> <span class=3D"o">=3D=3D</span=
> <span class=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">)<=
/span> <span class=3D"n">die</span><span class=3D"p">(</span><span class=3D=
"s">"tcsetattr"</span><span class=3D"p">);</span></div><div class=3D"line">=
<span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"lin=
e folded"><span class=3D"kt">char</span> <span class=3D"nf">editorReadKey</=
span><span class=3D"p">()</span> <span class=3D"p">{</span> =E2=80=A6 <span=
 class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line fol=
ded"><span class=3D"cm">/*** output ***/</span></div><div class=3D"line fol=
ded"><span class=3D"cm">/*** input ***/</span></div><div class=3D"line fold=
ed"><span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>Our global variable containing our editor state is named <code>E</code>.=
 We must replace
all occurrences of <code>orig_termios</code> with <code>E.orig_termios</cod=
e>.</p>
<h2 id=3D"window-size-the-easy-way"><a href=3D"https://viewsourcecode.org/s=
naptoken/kilo/03.rawInputAndOutput.html#window-size-the-easy-way">Window si=
ze, the easy way</a></h2>

<p>On most systems, you should be able to get the size of the terminal by s=
imply
calling <code>ioctl()</code> with the <code>TIOCGWINSZ</code> request. (As =
far as I can tell, it
stands for <strong>T</strong>erminal <strong>IOC</strong>tl (which itself s=
tands for <strong>I</strong>nput/<strong>O</strong>utput
<strong>C</strong>on<strong>t</strong>ro<strong>l</strong>) <strong>G</stro=
ng>et <strong>WIN</strong>dow <strong>S</strong>i<strong>Z</strong>e.)</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/ioctl/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 27</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/ioctl">ioctl</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line"><span class=3D"cm"=
>/*** includes ***/</span></div><div class=3D"line"></div><div class=3D"lin=
e"><span class=3D"cp">#include &lt;ctype.h&gt;</span></div><div class=3D"li=
ne"><span class=3D"cp">#include &lt;errno.h&gt;</span></div><div class=3D"l=
ine"><span class=3D"cp">#include &lt;stdio.h&gt;</span></div><div class=3D"=
line"><span class=3D"cp">#include &lt;stdlib.h&gt;</span></div><ins class=
=3D"line"><span class=3D"cp">#include &lt;sys/ioctl.h&gt;</span></ins><div =
class=3D"line"><span class=3D"cp">#include &lt;termios.h&gt;</span></div><d=
iv class=3D"line"><span class=3D"cp">#include &lt;unistd.h&gt;</span></div>=
<div class=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/**=
* defines ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*=
** data ***/</span></div><div class=3D"line"><span class=3D"cm">/*** termin=
al ***/</span></div><div class=3D"line"></div><div class=3D"line folded"><s=
pan class=3D"kt">void</span> <span class=3D"nf">die</span><span class=3D"p"=
>(</span><span class=3D"k">const</span> <span class=3D"kt">char</span> <spa=
n class=3D"o">*</span><span class=3D"n">s</span><span class=3D"p">)</span> =
<span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div c=
lass=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void</spa=
n> <span class=3D"nf">disableRawMode</span><span class=3D"p">()</span> <spa=
n class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=
=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void</span> <=
span class=3D"nf">enableRawMode</span><span class=3D"p">()</span> <span cla=
ss=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"l=
ine"></div><div class=3D"line folded"><span class=3D"kt">char</span> <span =
class=3D"nf">editorReadKey</span><span class=3D"p">()</span> <span class=3D=
"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line">=
</div><ins class=3D"line"><span class=3D"kt">int</span> <span class=3D"nf">=
getWindowSize</span><span class=3D"p">(</span><span class=3D"kt">int</span>=
 <span class=3D"o">*</span><span class=3D"n">rows</span><span class=3D"p">,=
</span> <span class=3D"kt">int</span> <span class=3D"o">*</span><span class=
=3D"n">cols</span><span class=3D"p">)</span> <span class=3D"p">{</span></in=
s><ins class=3D"line">  <span class=3D"k">struct</span> <span class=3D"n">w=
insize</span> <span class=3D"n">ws</span><span class=3D"p">;</span></ins><i=
ns class=3D"line"></ins><ins class=3D"line">  <span class=3D"k">if</span> <=
span class=3D"p">(</span><span class=3D"n">ioctl</span><span class=3D"p">(<=
/span><span class=3D"n">STDOUT_FILENO</span><span class=3D"p">,</span> <spa=
n class=3D"n">TIOCGWINSZ</span><span class=3D"p">,</span> <span class=3D"o"=
>&amp;</span><span class=3D"n">ws</span><span class=3D"p">)</span> <span cl=
ass=3D"o">=3D=3D</span> <span class=3D"o">-</span><span class=3D"mi">1</spa=
n> <span class=3D"o">||</span> <span class=3D"n">ws</span><span class=3D"p"=
>.</span><span class=3D"n">ws_col</span> <span class=3D"o">=3D=3D</span> <s=
pan class=3D"mi">0</span><span class=3D"p">)</span> <span class=3D"p">{</sp=
an></ins><ins class=3D"line">    <span class=3D"k">return</span> <span clas=
s=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">;</span></ins>=
<ins class=3D"line">  <span class=3D"p">}</span> <span class=3D"k">else</sp=
an> <span class=3D"p">{</span></ins><ins class=3D"line">    <span class=3D"=
o">*</span><span class=3D"n">cols</span> <span class=3D"o">=3D</span> <span=
 class=3D"n">ws</span><span class=3D"p">.</span><span class=3D"n">ws_col</s=
pan><span class=3D"p">;</span></ins><ins class=3D"line">    <span class=3D"=
o">*</span><span class=3D"n">rows</span> <span class=3D"o">=3D</span> <span=
 class=3D"n">ws</span><span class=3D"p">.</span><span class=3D"n">ws_row</s=
pan><span class=3D"p">;</span></ins><ins class=3D"line">    <span class=3D"=
k">return</span> <span class=3D"mi">0</span><span class=3D"p">;</span></ins=
><ins class=3D"line">  <span class=3D"p">}</span></ins><ins class=3D"line">=
<span class=3D"p">}</span></ins><div class=3D"line"></div><div class=3D"lin=
e folded"><span class=3D"cm">/*** output ***/</span></div><div class=3D"lin=
e folded"><span class=3D"cm">/*** input ***/</span></div><div class=3D"line=
 folded"><span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p><code>ioctl()</code>, <code>TIOCGWINSZ</code>, and <code>struct winsize<=
/code> come from <code>&lt;sys/ioctl.h&gt;</code>.</p>

<p>On success, <code>ioctl()</code> will place the number of columns wide a=
nd the number of
rows high the terminal is into the given <code>winsize</code> struct. On fa=
ilure,
<code>ioctl()</code> returns <code>-1</code>. We also check to make sure th=
e values it gave back
weren=E2=80=99t <code>0</code>, because apparently that=E2=80=99s a possibl=
e erroneous outcome. If
<code>ioctl()</code> failed in either way, we have <code>getWindowSize()</c=
ode> report failure by
returning <code>-1</code>. If it succeeded, we pass the values back by sett=
ing the <code>int</code>
references that were passed to the function. (This is a common approach to
having functions return multiple values in C. It also allows you to use the
return value to indicate success or failure.)</p>

<p>Now let=E2=80=99s add <code>screenrows</code> and <code>screencols</code=
> to our global editor state, and
call <code>getWindowSize()</code> to fill in those values.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/init-editor/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 28</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/init-editor">init-editor</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line"><span class=3D"=
cm">/*** data ***/</span></div><div class=3D"line"></div><div class=3D"line=
"><span class=3D"k">struct</span> <span class=3D"n">editorConfig</span> <sp=
an class=3D"p">{</span></div><ins class=3D"line">  <span class=3D"kt">int</=
span> <span class=3D"n">screenrows</span><span class=3D"p">;</span></ins><i=
ns class=3D"line">  <span class=3D"kt">int</span> <span class=3D"n">screenc=
ols</span><span class=3D"p">;</span></ins><div class=3D"line">  <span class=
=3D"k">struct</span> <span class=3D"n">termios</span> <span class=3D"n">ori=
g_termios</span><span class=3D"p">;</span></div><div class=3D"line"><span c=
lass=3D"p">};</span></div><div class=3D"line"></div><div class=3D"line"><sp=
an class=3D"k">struct</span> <span class=3D"n">editorConfig</span> <span cl=
ass=3D"n">E</span><span class=3D"p">;</span></div><div class=3D"line"></div=
><div class=3D"line folded"><span class=3D"cm">/*** terminal ***/</span></d=
iv><div class=3D"line folded"><span class=3D"cm">/*** output ***/</span></d=
iv><div class=3D"line folded"><span class=3D"cm">/*** input ***/</span></di=
v><div class=3D"line"><span class=3D"cm">/*** init ***/</span></div><div cl=
ass=3D"line"></div><ins class=3D"line"><span class=3D"kt">void</span> <span=
 class=3D"nf">initEditor</span><span class=3D"p">()</span> <span class=3D"p=
">{</span></ins><ins class=3D"line">  <span class=3D"k">if</span> <span cla=
ss=3D"p">(</span><span class=3D"n">getWindowSize</span><span class=3D"p">(<=
/span><span class=3D"o">&amp;</span><span class=3D"n">E</span><span class=
=3D"p">.</span><span class=3D"n">screenrows</span><span class=3D"p">,</span=
> <span class=3D"o">&amp;</span><span class=3D"n">E</span><span class=3D"p"=
>.</span><span class=3D"n">screencols</span><span class=3D"p">)</span> <spa=
n class=3D"o">=3D=3D</span> <span class=3D"o">-</span><span class=3D"mi">1<=
/span><span class=3D"p">)</span> <span class=3D"n">die</span><span class=3D=
"p">(</span><span class=3D"s">"getWindowSize"</span><span class=3D"p">);</s=
pan></ins><ins class=3D"line"><span class=3D"p">}</span></ins><div class=3D=
"line"></div><div class=3D"line"><span class=3D"kt">int</span> <span class=
=3D"nf">main</span><span class=3D"p">()</span> <span class=3D"p">{</span></=
div><div class=3D"line">  <span class=3D"n">enableRawMode</span><span class=
=3D"p">();</span></div><ins class=3D"line">  <span class=3D"n">initEditor</=
span><span class=3D"p">();</span></ins><div class=3D"line"></div><div class=
=3D"line">  <span class=3D"k">while</span> <span class=3D"p">(</span><span =
class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"p">{</span><=
/div><div class=3D"line">    <span class=3D"n">editorRefreshScreen</span><s=
pan class=3D"p">();</span></div><div class=3D"line">    <span class=3D"n">e=
ditorProcessKeypress</span><span class=3D"p">();</span></div><div class=3D"=
line">  <span class=3D"p">}</span></div><div class=3D"line"></div><div clas=
s=3D"line">  <span class=3D"k">return</span> <span class=3D"mi">0</span><sp=
an class=3D"p">;</span></div><div class=3D"line"><span class=3D"p">}</span>=
</div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p><code>initEditor()</code>=E2=80=99s job will be to initialize all the fi=
elds in the <code>E</code> struct.</p>

<p>Now we=E2=80=99re ready to display the proper number of tildes on the sc=
reen:</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/screenrows/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 29</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/screenrows">screenrows</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span class=3D"=
cm">/*** output ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne"><span class=3D"kt">void</span> <span class=3D"nf">editorDrawRows</span>=
<span class=3D"p">()</span> <span class=3D"p">{</span></div><div class=3D"l=
ine">  <span class=3D"kt">int</span> <span class=3D"n">y</span><span class=
=3D"p">;</span></div><ins class=3D"line">  <span class=3D"k">for</span> <sp=
an class=3D"p">(</span><span class=3D"n">y</span> <span class=3D"o">=3D</sp=
an> <span class=3D"mi">0</span><span class=3D"p">;</span> <span class=3D"n"=
>y</span> <span class=3D"o">&lt;</span> <span class=3D"n">E</span><span cla=
ss=3D"p">.</span><span class=3D"n">screenrows</span><span class=3D"p">;</sp=
an> <span class=3D"n">y</span><span class=3D"o">++</span><span class=3D"p">=
)</span> <span class=3D"p">{</span></ins><div class=3D"line">    <span clas=
s=3D"n">write</span><span class=3D"p">(</span><span class=3D"n">STDOUT_FILE=
NO</span><span class=3D"p">,</span> <span class=3D"s">"~</span><span class=
=3D"se">\r\n</span><span class=3D"s">"</span><span class=3D"p">,</span> <sp=
an class=3D"mi">3</span><span class=3D"p">);</span></div><div class=3D"line=
">  <span class=3D"p">}</span></div><div class=3D"line"><span class=3D"p">}=
</span></div><div class=3D"line"></div><div class=3D"line folded"><span cla=
ss=3D"kt">void</span> <span class=3D"n">editorRefreshScreen</span><span cla=
ss=3D"p">()</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}=
</span></div><div class=3D"line"></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** input ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>

<h2 id=3D"window-size-the-hard-way"><a href=3D"https://viewsourcecode.org/s=
naptoken/kilo/03.rawInputAndOutput.html#window-size-the-hard-way">Window si=
ze, the hard way</a></h2>

<p><code>ioctl()</code> isn=E2=80=99t guaranteed to be able to request the =
window size on all
systems, so we are going to provide a fallback method of getting the window
size.</p>

<p>The strategy is to position the cursor at the bottom-right of the screen=
, then
use escape sequences that let us query the position of the cursor. That tel=
ls
us how many rows and columns there must be on the screen.</p>

<p>Let=E2=80=99s start by moving the cursor to the bottom-right.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/bottom-right/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 30</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/bottom-right">bottom-right</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line"><span class=3D"cm=
">/*** terminal ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne folded"><span class=3D"kt">void</span> <span class=3D"nf">die</span><spa=
n class=3D"p">(</span><span class=3D"k">const</span> <span class=3D"kt">cha=
r</span> <span class=3D"o">*</span><span class=3D"n">s</span><span class=3D=
"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span=
></div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"=
kt">void</span> <span class=3D"nf">disableRawMode</span><span class=3D"p">(=
)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></d=
iv><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">=
void</span> <span class=3D"nf">enableRawMode</span><span class=3D"p">()</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><d=
iv class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">char<=
/span> <span class=3D"nf">editorReadKey</span><span class=3D"p">()</span> <=
span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div cl=
ass=3D"line"></div><div class=3D"line"><span class=3D"kt">int</span> <span =
class=3D"nf">getWindowSize</span><span class=3D"p">(</span><span class=3D"k=
t">int</span> <span class=3D"o">*</span><span class=3D"n">rows</span><span =
class=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D"o">*</spa=
n><span class=3D"n">cols</span><span class=3D"p">)</span> <span class=3D"p"=
>{</span></div><div class=3D"line">  <span class=3D"k">struct</span> <span =
class=3D"n">winsize</span> <span class=3D"n">ws</span><span class=3D"p">;</=
span></div><div class=3D"line"></div><ins class=3D"line">  <span class=3D"k=
">if</span> <span class=3D"p">(</span><span class=3D"mi">1</span> <span cla=
ss=3D"o">||</span> <span class=3D"n">ioctl</span><span class=3D"p">(</span>=
<span class=3D"n">STDOUT_FILENO</span><span class=3D"p">,</span> <span clas=
s=3D"n">TIOCGWINSZ</span><span class=3D"p">,</span> <span class=3D"o">&amp;=
</span><span class=3D"n">ws</span><span class=3D"p">)</span> <span class=3D=
"o">=3D=3D</span> <span class=3D"o">-</span><span class=3D"mi">1</span> <sp=
an class=3D"o">||</span> <span class=3D"n">ws</span><span class=3D"p">.</sp=
an><span class=3D"n">ws_col</span> <span class=3D"o">=3D=3D</span> <span cl=
ass=3D"mi">0</span><span class=3D"p">)</span> <span class=3D"p">{</span></i=
ns><ins class=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(<=
/span><span class=3D"n">write</span><span class=3D"p">(</span><span class=
=3D"n">STDOUT_FILENO</span><span class=3D"p">,</span> <span class=3D"s">"</=
span><span class=3D"se">\x1b</span><span class=3D"s">[999C</span><span clas=
s=3D"se">\x1b</span><span class=3D"s">[999B"</span><span class=3D"p">,</spa=
n> <span class=3D"mi">12</span><span class=3D"p">)</span> <span class=3D"o"=
>!=3D</span> <span class=3D"mi">12</span><span class=3D"p">)</span> <span c=
lass=3D"k">return</span> <span class=3D"o">-</span><span class=3D"mi">1</sp=
an><span class=3D"p">;</span></ins><ins class=3D"line">    <span class=3D"n=
">editorReadKey</span><span class=3D"p">();</span></ins><div class=3D"line"=
>    <span class=3D"k">return</span> <span class=3D"o">-</span><span class=
=3D"mi">1</span><span class=3D"p">;</span></div><div class=3D"line">  <span=
 class=3D"p">}</span> <span class=3D"k">else</span> <span class=3D"p">{</sp=
an></div><div class=3D"line">    <span class=3D"o">*</span><span class=3D"n=
">cols</span> <span class=3D"o">=3D</span> <span class=3D"n">ws</span><span=
 class=3D"p">.</span><span class=3D"n">ws_col</span><span class=3D"p">;</sp=
an></div><div class=3D"line">    <span class=3D"o">*</span><span class=3D"n=
">rows</span> <span class=3D"o">=3D</span> <span class=3D"n">ws</span><span=
 class=3D"p">.</span><span class=3D"n">ws_row</span><span class=3D"p">;</sp=
an></div><div class=3D"line">    <span class=3D"k">return</span> <span clas=
s=3D"mi">0</span><span class=3D"p">;</span></div><div class=3D"line">  <spa=
n class=3D"p">}</span></div><div class=3D"line"><span class=3D"p">}</span><=
/div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"cm=
">/*** output ***/</span></div><div class=3D"line folded"><span class=3D"cm=
">/*** input ***/</span></div><div class=3D"line folded"><span class=3D"cm"=
>/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>As you might have gathered from the code, there is no simple =E2=80=9Cmo=
ve the cursor
to the bottom-right corner=E2=80=9D command.</p>

<p>We are sending two escape sequences one after the other. The <code>C</co=
de> command
(<a href=3D"http://vt100.net/docs/vt100-ug/chapter3.html#CUF">Cursor Forwar=
d</a>) moves the
cursor to the right, and the <code>B</code> command
(<a href=3D"http://vt100.net/docs/vt100-ug/chapter3.html#CUD">Cursor Down</=
a>) moves the
cursor down. The argument says how much to move it right or down by. We use=
 a
very large value, <code>999</code>, which should ensure that the cursor rea=
ches the right
and bottom edges of the screen.</p>

<p>The <code>C</code> and <code>B</code> commands are specifically
<a href=3D"http://vt100.net/docs/vt100-ug/chapter3.html#CUD">documented</a>=
 to stop the
cursor from going past the edge of the screen. The reason we don=E2=80=99t =
use the
<code>&lt;esc&gt;[999;999H</code> command is that the
<a href=3D"http://vt100.net/docs/vt100-ug/chapter3.html#CUP">documentation<=
/a> doesn=E2=80=99t
specify what happens when you try to move the cursor off-screen.</p>

<p>Note that we are sticking a <code>1 ||</code> at the front of our <code>=
if</code> condition
temporarily, so that we can test this fallback branch we are developing.</p=
>

<p>Because we=E2=80=99re always returning <code>-1</code> (meaning an error=
 occurred) from
<code>getWindowSize()</code> at this point, we make a call to <code>editorR=
eadKey()</code> so we can
observe the results of our escape sequences before the program calls <code>=
die()</code>
and clears the screen. When you run the program, you should see the cursor =
is
positioned at the bottom-right corner of the screen, and then when you pres=
s a
key you=E2=80=99ll see the error message printed by <code>die()</code> afte=
r it clears the screen.</p>

<p>Next we need to get the cursor position. The <code>n</code> command
(<a href=3D"http://vt100.net/docs/vt100-ug/chapter3.html#DSR">Device Status=
 Report</a>) can
be used to query the terminal for status information. We want to give it an
argument of <code>6</code> to ask for the cursor position. Then we can read=
 the reply from
the standard input. Let=E2=80=99s print out each character from the standar=
d input to
see what the reply looks like.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/cursor-query/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 31</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/cursor-query">cursor-query</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line"><span class=3D"cm=
">/*** terminal ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne folded"><span class=3D"kt">void</span> <span class=3D"nf">die</span><spa=
n class=3D"p">(</span><span class=3D"k">const</span> <span class=3D"kt">cha=
r</span> <span class=3D"o">*</span><span class=3D"n">s</span><span class=3D=
"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span=
></div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"=
kt">void</span> <span class=3D"nf">disableRawMode</span><span class=3D"p">(=
)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></d=
iv><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">=
void</span> <span class=3D"nf">enableRawMode</span><span class=3D"p">()</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><d=
iv class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">char<=
/span> <span class=3D"nf">editorReadKey</span><span class=3D"p">()</span> <=
span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div cl=
ass=3D"line"></div><ins class=3D"line"><span class=3D"kt">int</span> <span =
class=3D"nf">getCursorPosition</span><span class=3D"p">(</span><span class=
=3D"kt">int</span> <span class=3D"o">*</span><span class=3D"n">rows</span><=
span class=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D"o">*=
</span><span class=3D"n">cols</span><span class=3D"p">)</span> <span class=
=3D"p">{</span></ins><ins class=3D"line">  <span class=3D"k">if</span> <spa=
n class=3D"p">(</span><span class=3D"n">write</span><span class=3D"p">(</sp=
an><span class=3D"n">STDOUT_FILENO</span><span class=3D"p">,</span> <span c=
lass=3D"s">"</span><span class=3D"se">\x1b</span><span class=3D"s">[6n"</sp=
an><span class=3D"p">,</span> <span class=3D"mi">4</span><span class=3D"p">=
)</span> <span class=3D"o">!=3D</span> <span class=3D"mi">4</span><span cla=
ss=3D"p">)</span> <span class=3D"k">return</span> <span class=3D"o">-</span=
><span class=3D"mi">1</span><span class=3D"p">;</span></ins><ins class=3D"l=
ine"></ins><ins class=3D"line">  <span class=3D"n">printf</span><span class=
=3D"p">(</span><span class=3D"s">"</span><span class=3D"se">\r\n</span><spa=
n class=3D"s">"</span><span class=3D"p">);</span></ins><ins class=3D"line">=
  <span class=3D"kt">char</span> <span class=3D"n">c</span><span class=3D"p=
">;</span></ins><ins class=3D"line">  <span class=3D"k">while</span> <span =
class=3D"p">(</span><span class=3D"n">read</span><span class=3D"p">(</span>=
<span class=3D"n">STDIN_FILENO</span><span class=3D"p">,</span> <span class=
=3D"o">&amp;</span><span class=3D"n">c</span><span class=3D"p">,</span> <sp=
an class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"o">=3D=3D=
</span> <span class=3D"mi">1</span><span class=3D"p">)</span> <span class=
=3D"p">{</span></ins><ins class=3D"line">    <span class=3D"k">if</span> <s=
pan class=3D"p">(</span><span class=3D"n">iscntrl</span><span class=3D"p">(=
</span><span class=3D"n">c</span><span class=3D"p">))</span> <span class=3D=
"p">{</span></ins><ins class=3D"line">      <span class=3D"n">printf</span>=
<span class=3D"p">(</span><span class=3D"s">"%d</span><span class=3D"se">\r=
\n</span><span class=3D"s">"</span><span class=3D"p">,</span> <span class=
=3D"n">c</span><span class=3D"p">);</span></ins><ins class=3D"line">    <sp=
an class=3D"p">}</span> <span class=3D"k">else</span> <span class=3D"p">{</=
span></ins><ins class=3D"line">      <span class=3D"n">printf</span><span c=
lass=3D"p">(</span><span class=3D"s">"%d ('%c')</span><span class=3D"se">\r=
\n</span><span class=3D"s">"</span><span class=3D"p">,</span> <span class=
=3D"n">c</span><span class=3D"p">,</span> <span class=3D"n">c</span><span c=
lass=3D"p">);</span></ins><ins class=3D"line">    <span class=3D"p">}</span=
></ins><ins class=3D"line">  <span class=3D"p">}</span></ins><ins class=3D"=
line"></ins><ins class=3D"line">  <span class=3D"n">editorReadKey</span><sp=
an class=3D"p">();</span></ins><ins class=3D"line"></ins><ins class=3D"line=
">  <span class=3D"k">return</span> <span class=3D"o">-</span><span class=
=3D"mi">1</span><span class=3D"p">;</span></ins><ins class=3D"line"><span c=
lass=3D"p">}</span></ins><div class=3D"line"></div><div class=3D"line"><spa=
n class=3D"kt">int</span> <span class=3D"nf">getWindowSize</span><span clas=
s=3D"p">(</span><span class=3D"kt">int</span> <span class=3D"o">*</span><sp=
an class=3D"n">rows</span><span class=3D"p">,</span> <span class=3D"kt">int=
</span> <span class=3D"o">*</span><span class=3D"n">cols</span><span class=
=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line">  <span=
 class=3D"k">struct</span> <span class=3D"n">winsize</span> <span class=3D"=
n">ws</span><span class=3D"p">;</span></div><div class=3D"line"></div><div =
class=3D"line">  <span class=3D"k">if</span> <span class=3D"p">(</span><spa=
n class=3D"mi">1</span> <span class=3D"o">||</span> <span class=3D"n">ioctl=
</span><span class=3D"p">(</span><span class=3D"n">STDOUT_FILENO</span><spa=
n class=3D"p">,</span> <span class=3D"n">TIOCGWINSZ</span><span class=3D"p"=
>,</span> <span class=3D"o">&amp;</span><span class=3D"n">ws</span><span cl=
ass=3D"p">)</span> <span class=3D"o">=3D=3D</span> <span class=3D"o">-</spa=
n><span class=3D"mi">1</span> <span class=3D"o">||</span> <span class=3D"n"=
>ws</span><span class=3D"p">.</span><span class=3D"n">ws_col</span> <span c=
lass=3D"o">=3D=3D</span> <span class=3D"mi">0</span><span class=3D"p">)</sp=
an> <span class=3D"p">{</span></div><div class=3D"line">    <span class=3D"=
k">if</span> <span class=3D"p">(</span><span class=3D"n">write</span><span =
class=3D"p">(</span><span class=3D"n">STDOUT_FILENO</span><span class=3D"p"=
>,</span> <span class=3D"s">"</span><span class=3D"se">\x1b</span><span cla=
ss=3D"s">[999C</span><span class=3D"se">\x1b</span><span class=3D"s">[999B"=
</span><span class=3D"p">,</span> <span class=3D"mi">12</span><span class=
=3D"p">)</span> <span class=3D"o">!=3D</span> <span class=3D"mi">12</span><=
span class=3D"p">)</span> <span class=3D"k">return</span> <span class=3D"o"=
>-</span><span class=3D"mi">1</span><span class=3D"p">;</span></div><ins cl=
ass=3D"line">    <span class=3D"k">return</span> <span class=3D"n">getCurso=
rPosition</span><span class=3D"p">(</span><span class=3D"n">rows</span><spa=
n class=3D"p">,</span> <span class=3D"n">cols</span><span class=3D"p">);</s=
pan></ins><div class=3D"line">  <span class=3D"p">}</span> <span class=3D"k=
">else</span> <span class=3D"p">{</span></div><div class=3D"line">    <span=
 class=3D"o">*</span><span class=3D"n">cols</span> <span class=3D"o">=3D</s=
pan> <span class=3D"n">ws</span><span class=3D"p">.</span><span class=3D"n"=
>ws_col</span><span class=3D"p">;</span></div><div class=3D"line">    <span=
 class=3D"o">*</span><span class=3D"n">rows</span> <span class=3D"o">=3D</s=
pan> <span class=3D"n">ws</span><span class=3D"p">.</span><span class=3D"n"=
>ws_row</span><span class=3D"p">;</span></div><div class=3D"line">    <span=
 class=3D"k">return</span> <span class=3D"mi">0</span><span class=3D"p">;</=
span></div><div class=3D"line">  <span class=3D"p">}</span></div><div class=
=3D"line"><span class=3D"p">}</span></div><div class=3D"line"></div><div cl=
ass=3D"line folded"><span class=3D"cm">/*** output ***/</span></div><div cl=
ass=3D"line folded"><span class=3D"cm">/*** input ***/</span></div><div cla=
ss=3D"line folded"><span class=3D"cm">/*** init ***/</span></div></code></p=
re>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>The reply is an escape sequence! It=E2=80=99s an escape character (<code=
>27</code>), followed by a
<code>[</code> character, and then the actual response: <code>24;80R</code>=
, or similar. (This
escape sequence is documented as
<a href=3D"http://vt100.net/docs/vt100-ug/chapter3.html#CPR">Cursor Positio=
n Report</a>.)</p>

<p>As before, we=E2=80=99ve inserted a temporary call to <code>editorReadKe=
y()</code> to let us
observe our debug output before the screen gets cleared on exit.</p>

<p>(Note: If you=E2=80=99re using <strong>Bash on Windows</strong>, <code>r=
ead()</code> doesn=E2=80=99t time out so you=E2=80=99ll
be stuck in an infinite loop. You=E2=80=99ll have to kill the process exter=
nally, or
exit and reopen the command prompt window.)</p>

<p>We=E2=80=99re going to have to parse this response. But first, let=E2=80=
=99s read it into a
buffer. We=E2=80=99ll keep reading characters until we get to the <code>R</=
code> character.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/response-buffer/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 32</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/response-buffer">response-buffer</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line"><span class=3D"cm=
">/*** terminal ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne folded"><span class=3D"kt">void</span> <span class=3D"nf">die</span><spa=
n class=3D"p">(</span><span class=3D"k">const</span> <span class=3D"kt">cha=
r</span> <span class=3D"o">*</span><span class=3D"n">s</span><span class=3D=
"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span=
></div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"=
kt">void</span> <span class=3D"nf">disableRawMode</span><span class=3D"p">(=
)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></d=
iv><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">=
void</span> <span class=3D"nf">enableRawMode</span><span class=3D"p">()</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><d=
iv class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">char<=
/span> <span class=3D"nf">editorReadKey</span><span class=3D"p">()</span> <=
span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div cl=
ass=3D"line"></div><div class=3D"line"><span class=3D"kt">int</span> <span =
class=3D"nf">getCursorPosition</span><span class=3D"p">(</span><span class=
=3D"kt">int</span> <span class=3D"o">*</span><span class=3D"n">rows</span><=
span class=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D"o">*=
</span><span class=3D"n">cols</span><span class=3D"p">)</span> <span class=
=3D"p">{</span></div><ins class=3D"line">  <span class=3D"kt">char</span> <=
span class=3D"n">buf</span><span class=3D"p">[</span><span class=3D"mi">32<=
/span><span class=3D"p">];</span></ins><ins class=3D"line">  <span class=3D=
"kt">unsigned</span> <span class=3D"kt">int</span> <span class=3D"n">i</spa=
n> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p=
">;</span></ins><div class=3D"line"></div><div class=3D"line">  <span class=
=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">write</span><s=
pan class=3D"p">(</span><span class=3D"n">STDOUT_FILENO</span><span class=
=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\x1b</span><sp=
an class=3D"s">[6n"</span><span class=3D"p">,</span> <span class=3D"mi">4</=
span><span class=3D"p">)</span> <span class=3D"o">!=3D</span> <span class=
=3D"mi">4</span><span class=3D"p">)</span> <span class=3D"k">return</span> =
<span class=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">;</s=
pan></div><div class=3D"line"></div><ins class=3D"line">  <span class=3D"k"=
>while</span> <span class=3D"p">(</span><span class=3D"n">i</span> <span cl=
ass=3D"o">&lt;</span> <span class=3D"k">sizeof</span><span class=3D"p">(</s=
pan><span class=3D"n">buf</span><span class=3D"p">)</span> <span class=3D"o=
">-</span> <span class=3D"mi">1</span><span class=3D"p">)</span> <span clas=
s=3D"p">{</span></ins><ins class=3D"line">    <span class=3D"k">if</span> <=
span class=3D"p">(</span><span class=3D"n">read</span><span class=3D"p">(</=
span><span class=3D"n">STDIN_FILENO</span><span class=3D"p">,</span> <span =
class=3D"o">&amp;</span><span class=3D"n">buf</span><span class=3D"p">[</sp=
an><span class=3D"n">i</span><span class=3D"p">],</span> <span class=3D"mi"=
>1</span><span class=3D"p">)</span> <span class=3D"o">!=3D</span> <span cla=
ss=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"k">break</span>=
<span class=3D"p">;</span></ins><ins class=3D"line">    <span class=3D"k">i=
f</span> <span class=3D"p">(</span><span class=3D"n">buf</span><span class=
=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</span> <span c=
lass=3D"o">=3D=3D</span> <span class=3D"sc">'R'</span><span class=3D"p">)</=
span> <span class=3D"k">break</span><span class=3D"p">;</span></ins><ins cl=
ass=3D"line">    <span class=3D"n">i</span><span class=3D"o">++</span><span=
 class=3D"p">;</span></ins><div class=3D"line">  <span class=3D"p">}</span>=
</div><ins class=3D"line">  <span class=3D"n">buf</span><span class=3D"p">[=
</span><span class=3D"n">i</span><span class=3D"p">]</span> <span class=3D"=
o">=3D</span> <span class=3D"sc">'\0'</span><span class=3D"p">;</span></ins=
><ins class=3D"line"></ins><ins class=3D"line">  <span class=3D"n">printf</=
span><span class=3D"p">(</span><span class=3D"s">"</span><span class=3D"se"=
>\r\n</span><span class=3D"s">&amp;buf[1]: '%s'</span><span class=3D"se">\r=
\n</span><span class=3D"s">"</span><span class=3D"p">,</span> <span class=
=3D"o">&amp;</span><span class=3D"n">buf</span><span class=3D"p">[</span><s=
pan class=3D"mi">1</span><span class=3D"p">]);</span></ins><div class=3D"li=
ne"></div><div class=3D"line">  <span class=3D"n">editorReadKey</span><span=
 class=3D"p">();</span></div><div class=3D"line"></div><div class=3D"line">=
  <span class=3D"k">return</span> <span class=3D"o">-</span><span class=3D"=
mi">1</span><span class=3D"p">;</span></div><div class=3D"line"><span class=
=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line folded"><=
span class=3D"kt">int</span> <span class=3D"n">getWindowSize</span><span cl=
ass=3D"p">(</span><span class=3D"kt">int</span> <span class=3D"o">*</span><=
span class=3D"n">rows</span><span class=3D"p">,</span> <span class=3D"kt">i=
nt</span> <span class=3D"o">*</span><span class=3D"n">cols</span><span clas=
s=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</=
span></div><div class=3D"line"></div><div class=3D"line folded"><span class=
=3D"cm">/*** output ***/</span></div><div class=3D"line folded"><span class=
=3D"cm">/*** input ***/</span></div><div class=3D"line folded"><span class=
=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>When we print out the buffer, we don=E2=80=99t want to print the <code>'=
\x1b'</code> character,
because the terminal would interpret it as an escape sequence and wouldn=E2=
=80=99t
display it. So we skip the first character in <code>buf</code> by passing <=
code>&amp;buf[1]</code> to
<code>printf()</code>. <code>printf()</code> expects strings to end with a =
<code>0</code> byte, so we make sure
to assign <code>'\0'</code> to the final byte of <code>buf</code>.</p>

<p>If you run the program, you=E2=80=99ll see we have the response in <code=
>buf</code> in the form of
<code>&lt;esc&gt;[24;80</code>. Let=E2=80=99s parse the two numbers out of =
there using <code>sscanf()</code>:</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/parse-response/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 33</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/parse-response">parse-response</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line"><span class=3D"cm=
">/*** terminal ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne folded"><span class=3D"kt">void</span> <span class=3D"nf">die</span><spa=
n class=3D"p">(</span><span class=3D"k">const</span> <span class=3D"kt">cha=
r</span> <span class=3D"o">*</span><span class=3D"n">s</span><span class=3D=
"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span=
></div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"=
kt">void</span> <span class=3D"nf">disableRawMode</span><span class=3D"p">(=
)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></d=
iv><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">=
void</span> <span class=3D"nf">enableRawMode</span><span class=3D"p">()</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><d=
iv class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">char<=
/span> <span class=3D"nf">editorReadKey</span><span class=3D"p">()</span> <=
span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div cl=
ass=3D"line"></div><div class=3D"line"><span class=3D"kt">int</span> <span =
class=3D"nf">getCursorPosition</span><span class=3D"p">(</span><span class=
=3D"kt">int</span> <span class=3D"o">*</span><span class=3D"n">rows</span><=
span class=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D"o">*=
</span><span class=3D"n">cols</span><span class=3D"p">)</span> <span class=
=3D"p">{</span></div><div class=3D"line">  <span class=3D"kt">char</span> <=
span class=3D"n">buf</span><span class=3D"p">[</span><span class=3D"mi">32<=
/span><span class=3D"p">];</span></div><div class=3D"line">  <span class=3D=
"kt">unsigned</span> <span class=3D"kt">int</span> <span class=3D"n">i</spa=
n> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p=
">;</span></div><div class=3D"line"></div><div class=3D"line">  <span class=
=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">write</span><s=
pan class=3D"p">(</span><span class=3D"n">STDOUT_FILENO</span><span class=
=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\x1b</span><sp=
an class=3D"s">[6n"</span><span class=3D"p">,</span> <span class=3D"mi">4</=
span><span class=3D"p">)</span> <span class=3D"o">!=3D</span> <span class=
=3D"mi">4</span><span class=3D"p">)</span> <span class=3D"k">return</span> =
<span class=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">;</s=
pan></div><div class=3D"line"></div><div class=3D"line">  <span class=3D"k"=
>while</span> <span class=3D"p">(</span><span class=3D"n">i</span> <span cl=
ass=3D"o">&lt;</span> <span class=3D"k">sizeof</span><span class=3D"p">(</s=
pan><span class=3D"n">buf</span><span class=3D"p">)</span> <span class=3D"o=
">-</span> <span class=3D"mi">1</span><span class=3D"p">)</span> <span clas=
s=3D"p">{</span></div><div class=3D"line">    <span class=3D"k">if</span> <=
span class=3D"p">(</span><span class=3D"n">read</span><span class=3D"p">(</=
span><span class=3D"n">STDIN_FILENO</span><span class=3D"p">,</span> <span =
class=3D"o">&amp;</span><span class=3D"n">buf</span><span class=3D"p">[</sp=
an><span class=3D"n">i</span><span class=3D"p">],</span> <span class=3D"mi"=
>1</span><span class=3D"p">)</span> <span class=3D"o">!=3D</span> <span cla=
ss=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"k">break</span>=
<span class=3D"p">;</span></div><div class=3D"line">    <span class=3D"k">i=
f</span> <span class=3D"p">(</span><span class=3D"n">buf</span><span class=
=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</span> <span c=
lass=3D"o">=3D=3D</span> <span class=3D"sc">'R'</span><span class=3D"p">)</=
span> <span class=3D"k">break</span><span class=3D"p">;</span></div><div cl=
ass=3D"line">    <span class=3D"n">i</span><span class=3D"o">++</span><span=
 class=3D"p">;</span></div><div class=3D"line">  <span class=3D"p">}</span>=
</div><div class=3D"line">  <span class=3D"n">buf</span><span class=3D"p">[=
</span><span class=3D"n">i</span><span class=3D"p">]</span> <span class=3D"=
o">=3D</span> <span class=3D"sc">'\0'</span><span class=3D"p">;</span></div=
><div class=3D"line"></div><ins class=3D"line">  <span class=3D"k">if</span=
> <span class=3D"p">(</span><span class=3D"n">buf</span><span class=3D"p">[=
</span><span class=3D"mi">0</span><span class=3D"p">]</span> <span class=3D=
"o">!=3D</span> <span class=3D"sc">'\x1b'</span> <span class=3D"o">||</span=
> <span class=3D"n">buf</span><span class=3D"p">[</span><span class=3D"mi">=
1</span><span class=3D"p">]</span> <span class=3D"o">!=3D</span> <span clas=
s=3D"sc">'['</span><span class=3D"p">)</span> <span class=3D"k">return</spa=
n> <span class=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">;=
</span></ins><ins class=3D"line">  <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"n">sscanf</span><span class=3D"p">(</span><sp=
an class=3D"o">&amp;</span><span class=3D"n">buf</span><span class=3D"p">[<=
/span><span class=3D"mi">2</span><span class=3D"p">],</span> <span class=3D=
"s">"%d;%d"</span><span class=3D"p">,</span> <span class=3D"n">rows</span><=
span class=3D"p">,</span> <span class=3D"n">cols</span><span class=3D"p">)<=
/span> <span class=3D"o">!=3D</span> <span class=3D"mi">2</span><span class=
=3D"p">)</span> <span class=3D"k">return</span> <span class=3D"o">-</span><=
span class=3D"mi">1</span><span class=3D"p">;</span></ins><div class=3D"lin=
e"></div><ins class=3D"line">  <span class=3D"k">return</span> <span class=
=3D"mi">0</span><span class=3D"p">;</span></ins><div class=3D"line"><span c=
lass=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line folde=
d"><span class=3D"kt">int</span> <span class=3D"nf">getWindowSize</span><sp=
an class=3D"p">(</span><span class=3D"kt">int</span> <span class=3D"o">*</s=
pan><span class=3D"n">rows</span><span class=3D"p">,</span> <span class=3D"=
kt">int</span> <span class=3D"o">*</span><span class=3D"n">cols</span><span=
 class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p=
">}</span></div><div class=3D"line"></div><div class=3D"line folded"><span =
class=3D"cm">/*** output ***/</span></div><div class=3D"line folded"><span =
class=3D"cm">/*** input ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p><code>sscanf()</code> comes from <code>&lt;stdio.h&gt;</code>.</p>

<p>First we make sure it responded with an escape sequence. Then we pass a =
pointer
to the third character of <code>buf</code> to <code>sscanf()</code>, skippi=
ng the <code>'\x1b'</code> and <code>'['</code>
characters. So we are passing a string of the form <code>24;80</code> to <c=
ode>sscanf()</code>. We
are also passing it the string <code>%d;%d</code> which tells it to parse t=
wo integers
separated by a <code>;</code>, and put the values into the <code>rows</code=
> and <code>cols</code> variables.</p>

<p>Our fallback method for getting the window size is now complete. You sho=
uld see
that <code>editorDrawRows()</code> prints the correct number of tildes for =
the height of
your terminal.</p>

<p>Now that we know that works, let=E2=80=99s remove the <code>1 ||</code> =
we put in the <code>if</code>
condition temporarily.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/back-to-ioctl/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 34</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/back-to-ioctl">back-to-ioctl</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line"><span class=3D"cm=
">/*** terminal ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne folded"><span class=3D"kt">void</span> <span class=3D"nf">die</span><spa=
n class=3D"p">(</span><span class=3D"k">const</span> <span class=3D"kt">cha=
r</span> <span class=3D"o">*</span><span class=3D"n">s</span><span class=3D=
"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span=
></div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"=
kt">void</span> <span class=3D"nf">disableRawMode</span><span class=3D"p">(=
)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></d=
iv><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">=
void</span> <span class=3D"nf">enableRawMode</span><span class=3D"p">()</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><d=
iv class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">char<=
/span> <span class=3D"nf">editorReadKey</span><span class=3D"p">()</span> <=
span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div cl=
ass=3D"line"></div><div class=3D"line folded"><span class=3D"kt">int</span>=
 <span class=3D"nf">getCursorPosition</span><span class=3D"p">(</span><span=
 class=3D"kt">int</span> <span class=3D"o">*</span><span class=3D"n">rows</=
span><span class=3D"p">,</span> <span class=3D"kt">int</span> <span class=
=3D"o">*</span><span class=3D"n">cols</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=
=3D"line"></div><div class=3D"line"><span class=3D"kt">int</span> <span cla=
ss=3D"nf">getWindowSize</span><span class=3D"p">(</span><span class=3D"kt">=
int</span> <span class=3D"o">*</span><span class=3D"n">rows</span><span cla=
ss=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D"o">*</span><=
span class=3D"n">cols</span><span class=3D"p">)</span> <span class=3D"p">{<=
/span></div><div class=3D"line">  <span class=3D"k">struct</span> <span cla=
ss=3D"n">winsize</span> <span class=3D"n">ws</span><span class=3D"p">;</spa=
n></div><div class=3D"line"></div><ins class=3D"line">  <span class=3D"k">i=
f</span> <span class=3D"p">(</span><span class=3D"n">ioctl</span><span clas=
s=3D"p">(</span><span class=3D"n">STDOUT_FILENO</span><span class=3D"p">,</=
span> <span class=3D"n">TIOCGWINSZ</span><span class=3D"p">,</span> <span c=
lass=3D"o">&amp;</span><span class=3D"n">ws</span><span class=3D"p">)</span=
> <span class=3D"o">=3D=3D</span> <span class=3D"o">-</span><span class=3D"=
mi">1</span> <span class=3D"o">||</span> <span class=3D"n">ws</span><span c=
lass=3D"p">.</span><span class=3D"n">ws_col</span> <span class=3D"o">=3D=3D=
</span> <span class=3D"mi">0</span><span class=3D"p">)</span> <span class=
=3D"p">{</span></ins><div class=3D"line">    <span class=3D"k">if</span> <s=
pan class=3D"p">(</span><span class=3D"n">write</span><span class=3D"p">(</=
span><span class=3D"n">STDOUT_FILENO</span><span class=3D"p">,</span> <span=
 class=3D"s">"</span><span class=3D"se">\x1b</span><span class=3D"s">[999C<=
/span><span class=3D"se">\x1b</span><span class=3D"s">[999B"</span><span cl=
ass=3D"p">,</span> <span class=3D"mi">12</span><span class=3D"p">)</span> <=
span class=3D"o">!=3D</span> <span class=3D"mi">12</span><span class=3D"p">=
)</span> <span class=3D"k">return</span> <span class=3D"o">-</span><span cl=
ass=3D"mi">1</span><span class=3D"p">;</span></div><div class=3D"line">    =
<span class=3D"k">return</span> <span class=3D"n">getCursorPosition</span><=
span class=3D"p">(</span><span class=3D"n">rows</span><span class=3D"p">,</=
span> <span class=3D"n">cols</span><span class=3D"p">);</span></div><div cl=
ass=3D"line">  <span class=3D"p">}</span> <span class=3D"k">else</span> <sp=
an class=3D"p">{</span></div><div class=3D"line">    <span class=3D"o">*</s=
pan><span class=3D"n">cols</span> <span class=3D"o">=3D</span> <span class=
=3D"n">ws</span><span class=3D"p">.</span><span class=3D"n">ws_col</span><s=
pan class=3D"p">;</span></div><div class=3D"line">    <span class=3D"o">*</=
span><span class=3D"n">rows</span> <span class=3D"o">=3D</span> <span class=
=3D"n">ws</span><span class=3D"p">.</span><span class=3D"n">ws_row</span><s=
pan class=3D"p">;</span></div><div class=3D"line">    <span class=3D"k">ret=
urn</span> <span class=3D"mi">0</span><span class=3D"p">;</span></div><div =
class=3D"line">  <span class=3D"p">}</span></div><div class=3D"line"><span =
class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line fold=
ed"><span class=3D"cm">/*** output ***/</span></div><div class=3D"line fold=
ed"><span class=3D"cm">/*** input ***/</span></div><div class=3D"line folde=
d"><span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>

<h2 id=3D"the-last-line"><a href=3D"https://viewsourcecode.org/snaptoken/ki=
lo/03.rawInputAndOutput.html#the-last-line">The last line</a></h2>

<p>Maybe you noticed the last line of the screen doesn=E2=80=99t seem to ha=
ve a tilde.
That=E2=80=99s because of a small bug in our code. When we print the final =
tilde, we
then print a <code>"\r\n"</code> like on any other line, but this causes th=
e terminal to
scroll in order to make room for a new, blank line. Let=E2=80=99s make the =
last line an
exception when we print our <code>"\r\n"</code>=E2=80=99s.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/last-line/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 35</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/last-line">last-line</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span class=3D"=
cm">/*** output ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne"><span class=3D"kt">void</span> <span class=3D"nf">editorDrawRows</span>=
<span class=3D"p">()</span> <span class=3D"p">{</span></div><div class=3D"l=
ine">  <span class=3D"kt">int</span> <span class=3D"n">y</span><span class=
=3D"p">;</span></div><div class=3D"line">  <span class=3D"k">for</span> <sp=
an class=3D"p">(</span><span class=3D"n">y</span> <span class=3D"o">=3D</sp=
an> <span class=3D"mi">0</span><span class=3D"p">;</span> <span class=3D"n"=
>y</span> <span class=3D"o">&lt;</span> <span class=3D"n">E</span><span cla=
ss=3D"p">.</span><span class=3D"n">screenrows</span><span class=3D"p">;</sp=
an> <span class=3D"n">y</span><span class=3D"o">++</span><span class=3D"p">=
)</span> <span class=3D"p">{</span></div><ins class=3D"line">    <span clas=
s=3D"n">write</span><span class=3D"p">(</span><span class=3D"n">STDOUT_FILE=
NO</span><span class=3D"p">,</span> <span class=3D"s">"~"</span><span class=
=3D"p">,</span> <span class=3D"mi">1</span><span class=3D"p">);</span></ins=
><ins class=3D"line"></ins><ins class=3D"line">    <span class=3D"k">if</sp=
an> <span class=3D"p">(</span><span class=3D"n">y</span> <span class=3D"o">=
&lt;</span> <span class=3D"n">E</span><span class=3D"p">.</span><span class=
=3D"n">screenrows</span> <span class=3D"o">-</span> <span class=3D"mi">1</s=
pan><span class=3D"p">)</span> <span class=3D"p">{</span></ins><ins class=
=3D"line">      <span class=3D"n">write</span><span class=3D"p">(</span><sp=
an class=3D"n">STDOUT_FILENO</span><span class=3D"p">,</span> <span class=
=3D"s">"</span><span class=3D"se">\r\n</span><span class=3D"s">"</span><spa=
n class=3D"p">,</span> <span class=3D"mi">2</span><span class=3D"p">);</spa=
n></ins><ins class=3D"line">    <span class=3D"p">}</span></ins><div class=
=3D"line">  <span class=3D"p">}</span></div><div class=3D"line"><span class=
=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line folded"><=
span class=3D"kt">void</span> <span class=3D"nf">editorRefreshScreen</span>=
<span class=3D"p">()</span> <span class=3D"p">{</span> =E2=80=A6 <span clas=
s=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line folded">=
<span class=3D"cm">/*** input ***/</span></div><div class=3D"line folded"><=
span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>

<h2 id=3D"append-buffer"><a href=3D"https://viewsourcecode.org/snaptoken/ki=
lo/03.rawInputAndOutput.html#append-buffer">Append buffer</a></h2>

<p>It=E2=80=99s not a good idea to make a whole bunch of small <code>write(=
)</code>=E2=80=99s every time we
refresh the screen. It would be better to do one big <code>write()</code>, =
to make sure
the whole screen updates at once. Otherwise there could be small
unpredictable pauses between <code>write()</code>=E2=80=99s, which would ca=
use an annoying flicker
effect.</p>

<p>We want to replace all our <code>write()</code> calls with code that app=
ends the string to
a buffer, and then <code>write()</code> this buffer out at the end. Unfortu=
nately, C
doesn=E2=80=99t have dynamic strings, so we=E2=80=99ll create our own dynam=
ic string type that
supports one operation: appending.</p>

<p>Let=E2=80=99s start by making a new <code>/*** append buffer ***/</code>=
 section, and defining the
<code>abuf</code> struct under it.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/abuf-struct/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 36</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/abuf-struct">abuf-struct</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line"><span class=3D"cm=
">/*** terminal ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne folded"><span class=3D"kt">void</span> <span class=3D"nf">die</span><spa=
n class=3D"p">(</span><span class=3D"k">const</span> <span class=3D"kt">cha=
r</span> <span class=3D"o">*</span><span class=3D"n">s</span><span class=3D=
"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span=
></div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"=
kt">void</span> <span class=3D"nf">disableRawMode</span><span class=3D"p">(=
)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></d=
iv><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">=
void</span> <span class=3D"nf">enableRawMode</span><span class=3D"p">()</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><d=
iv class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">char<=
/span> <span class=3D"nf">editorReadKey</span><span class=3D"p">()</span> <=
span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div cl=
ass=3D"line"></div><div class=3D"line folded"><span class=3D"kt">int</span>=
 <span class=3D"nf">getCursorPosition</span><span class=3D"p">(</span><span=
 class=3D"kt">int</span> <span class=3D"o">*</span><span class=3D"n">rows</=
span><span class=3D"p">,</span> <span class=3D"kt">int</span> <span class=
=3D"o">*</span><span class=3D"n">cols</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=
=3D"line"></div><div class=3D"line folded"><span class=3D"kt">int</span> <s=
pan class=3D"nf">getWindowSize</span><span class=3D"p">(</span><span class=
=3D"kt">int</span> <span class=3D"o">*</span><span class=3D"n">rows</span><=
span class=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D"o">*=
</span><span class=3D"n">cols</span><span class=3D"p">)</span> <span class=
=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"lin=
e"></div><ins class=3D"line"><span class=3D"cm">/*** append buffer ***/</sp=
an></ins><ins class=3D"line"></ins><ins class=3D"line"><span class=3D"k">st=
ruct</span> <span class=3D"n">abuf</span> <span class=3D"p">{</span></ins><=
ins class=3D"line">  <span class=3D"kt">char</span> <span class=3D"o">*</sp=
an><span class=3D"n">b</span><span class=3D"p">;</span></ins><ins class=3D"=
line">  <span class=3D"kt">int</span> <span class=3D"n">len</span><span cla=
ss=3D"p">;</span></ins><ins class=3D"line"><span class=3D"p">};</span></ins=
><ins class=3D"line"></ins><ins class=3D"line"><span class=3D"cp">#define A=
BUF_INIT {NULL, 0}</span></ins><div class=3D"line"></div><div class=3D"line=
 folded"><span class=3D"cm">/*** output ***/</span></div><div class=3D"line=
 folded"><span class=3D"cm">/*** input ***/</span></div><div class=3D"line =
folded"><span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>An append buffer consists of a pointer to our buffer in memory, and a le=
ngth.
We define an <code>ABUF_INIT</code> constant which represents an empty buff=
er. This acts
as a constructor for our <code>abuf</code> type.</p>

<p>Next, let=E2=80=99s define the <code>abAppend()</code> operation, as wel=
l as the <code>abFree()</code>
destructor.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/abuf-append/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 37</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/abuf-append">abuf-append</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line"><span class=3D"cm"=
>/*** includes ***/</span></div><div class=3D"line"></div><div class=3D"lin=
e"><span class=3D"cp">#include &lt;ctype.h&gt;</span></div><div class=3D"li=
ne"><span class=3D"cp">#include &lt;errno.h&gt;</span></div><div class=3D"l=
ine"><span class=3D"cp">#include &lt;stdio.h&gt;</span></div><div class=3D"=
line"><span class=3D"cp">#include &lt;stdlib.h&gt;</span></div><ins class=
=3D"line"><span class=3D"cp">#include &lt;string.h&gt;</span></ins><div cla=
ss=3D"line"><span class=3D"cp">#include &lt;sys/ioctl.h&gt;</span></div><di=
v class=3D"line"><span class=3D"cp">#include &lt;termios.h&gt;</span></div>=
<div class=3D"line"><span class=3D"cp">#include &lt;unistd.h&gt;</span></di=
v><div class=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/=
*** defines ***/</span></div><div class=3D"line folded"><span class=3D"cm">=
/*** data ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*=
** terminal ***/</span></div><div class=3D"line"><span class=3D"cm">/*** ap=
pend buffer ***/</span></div><div class=3D"line"></div><div class=3D"line f=
olded"><span class=3D"k">struct</span> <span class=3D"n">abuf</span> <span =
class=3D"p">{</span> =E2=80=A6 <span class=3D"p">};</span></div><div class=
=3D"line"></div><div class=3D"line"><span class=3D"cp">#define ABUF_INIT {N=
ULL, 0}</span></div><div class=3D"line"></div><ins class=3D"line"><span cla=
ss=3D"kt">void</span> <span class=3D"nf">abAppend</span><span class=3D"p">(=
</span><span class=3D"k">struct</span> <span class=3D"n">abuf</span> <span =
class=3D"o">*</span><span class=3D"n">ab</span><span class=3D"p">,</span> <=
span class=3D"k">const</span> <span class=3D"kt">char</span> <span class=3D=
"o">*</span><span class=3D"n">s</span><span class=3D"p">,</span> <span clas=
s=3D"kt">int</span> <span class=3D"n">len</span><span class=3D"p">)</span> =
<span class=3D"p">{</span></ins><ins class=3D"line">  <span class=3D"kt">ch=
ar</span> <span class=3D"o">*</span><span class=3D"n">new</span> <span clas=
s=3D"o">=3D</span> <span class=3D"n">realloc</span><span class=3D"p">(</spa=
n><span class=3D"n">ab</span><span class=3D"o">-&gt;</span><span class=3D"n=
">b</span><span class=3D"p">,</span> <span class=3D"n">ab</span><span class=
=3D"o">-&gt;</span><span class=3D"n">len</span> <span class=3D"o">+</span> =
<span class=3D"n">len</span><span class=3D"p">);</span></ins><ins class=3D"=
line"></ins><ins class=3D"line">  <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"n">new</span> <span class=3D"o">=3D=3D</span>=
 <span class=3D"nb">NULL</span><span class=3D"p">)</span> <span class=3D"k"=
>return</span><span class=3D"p">;</span></ins><ins class=3D"line">  <span c=
lass=3D"n">memcpy</span><span class=3D"p">(</span><span class=3D"o">&amp;</=
span><span class=3D"n">new</span><span class=3D"p">[</span><span class=3D"n=
">ab</span><span class=3D"o">-&gt;</span><span class=3D"n">len</span><span =
class=3D"p">],</span> <span class=3D"n">s</span><span class=3D"p">,</span> =
<span class=3D"n">len</span><span class=3D"p">);</span></ins><ins class=3D"=
line">  <span class=3D"n">ab</span><span class=3D"o">-&gt;</span><span clas=
s=3D"n">b</span> <span class=3D"o">=3D</span> <span class=3D"n">new</span><=
span class=3D"p">;</span></ins><ins class=3D"line">  <span class=3D"n">ab</=
span><span class=3D"o">-&gt;</span><span class=3D"n">len</span> <span class=
=3D"o">+=3D</span> <span class=3D"n">len</span><span class=3D"p">;</span></=
ins><ins class=3D"line"><span class=3D"p">}</span></ins><ins class=3D"line"=
></ins><ins class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf=
">abFree</span><span class=3D"p">(</span><span class=3D"k">struct</span> <s=
pan class=3D"n">abuf</span> <span class=3D"o">*</span><span class=3D"n">ab<=
/span><span class=3D"p">)</span> <span class=3D"p">{</span></ins><ins class=
=3D"line">  <span class=3D"n">free</span><span class=3D"p">(</span><span cl=
ass=3D"n">ab</span><span class=3D"o">-&gt;</span><span class=3D"n">b</span>=
<span class=3D"p">);</span></ins><ins class=3D"line"><span class=3D"p">}</s=
pan></ins><div class=3D"line"></div><div class=3D"line folded"><span class=
=3D"cm">/*** output ***/</span></div><div class=3D"line folded"><span class=
=3D"cm">/*** input ***/</span></div><div class=3D"line folded"><span class=
=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p><code>realloc()</code> and <code>free()</code> come from <code>&lt;stdli=
b.h&gt;</code>. <code>memcpy()</code> comes from
<code>&lt;string.h&gt;</code>.</p>

<p>To append a string <code>s</code> to an <code>abuf</code>, the first thi=
ng we do is make sure we
allocate enough memory to hold the new string. We ask <code>realloc()</code=
> to give us a
block of memory that is the size of the current string plus the size of the
string we are appending. <code>realloc()</code> will either extend the size=
 of the block
of memory we already have allocated, or it will take care of <code>free()</=
code>ing the
current block of memory and allocating a new block of memory somewhere else
that is big enough for our new string.</p>

<p>Then we use <code>memcpy()</code> to copy the string <code>s</code> afte=
r the end of the current data
in the buffer, and we update the pointer and length of the <code>abuf</code=
> to the new
values.</p>

<p><code>abFree()</code> is a destructor that deallocates the dynamic memor=
y used by an
<code>abuf</code>.</p>

<p>Okay, our <code>abuf</code> type is ready to be put to use.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/use-abuf/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 38</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/use-abuf">use-abuf</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** append buffer ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** output ***/</span></div><div class=3D"line"></div><ins clas=
s=3D"line"><span class=3D"kt">void</span> <span class=3D"n">editorDrawRows<=
/span><span class=3D"p">(</span><span class=3D"k">struct</span> <span class=
=3D"n">abuf</span> <span class=3D"o">*</span><span class=3D"n">ab</span><sp=
an class=3D"p">)</span> <span class=3D"p">{</span></ins><div class=3D"line"=
>  <span class=3D"kt">int</span> <span class=3D"n">y</span><span class=3D"p=
">;</span></div><div class=3D"line">  <span class=3D"k">for</span> <span cl=
ass=3D"p">(</span><span class=3D"n">y</span> <span class=3D"o">=3D</span> <=
span class=3D"mi">0</span><span class=3D"p">;</span> <span class=3D"n">y</s=
pan> <span class=3D"o">&lt;</span> <span class=3D"n">E</span><span class=3D=
"p">.</span><span class=3D"n">screenrows</span><span class=3D"p">;</span> <=
span class=3D"n">y</span><span class=3D"o">++</span><span class=3D"p">)</sp=
an> <span class=3D"p">{</span></div><ins class=3D"line">    <span class=3D"=
n">abAppend</span><span class=3D"p">(</span><span class=3D"n">ab</span><spa=
n class=3D"p">,</span> <span class=3D"s">"~"</span><span class=3D"p">,</spa=
n> <span class=3D"mi">1</span><span class=3D"p">);</span></ins><div class=
=3D"line"></div><div class=3D"line">    <span class=3D"k">if</span> <span c=
lass=3D"p">(</span><span class=3D"n">y</span> <span class=3D"o">&lt;</span>=
 <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">scre=
enrows</span> <span class=3D"o">-</span> <span class=3D"mi">1</span><span c=
lass=3D"p">)</span> <span class=3D"p">{</span></div><ins class=3D"line">   =
   <span class=3D"n">abAppend</span><span class=3D"p">(</span><span class=
=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s">"</span><span =
class=3D"se">\r\n</span><span class=3D"s">"</span><span class=3D"p">,</span=
> <span class=3D"mi">2</span><span class=3D"p">);</span></ins><div class=3D=
"line">    <span class=3D"p">}</span></div><div class=3D"line">  <span clas=
s=3D"p">}</span></div><div class=3D"line"><span class=3D"p">}</span></div><=
div class=3D"line"></div><div class=3D"line"><span class=3D"kt">void</span>=
 <span class=3D"n">editorRefreshScreen</span><span class=3D"p">()</span> <s=
pan class=3D"p">{</span></div><ins class=3D"line">  <span class=3D"k">struc=
t</span> <span class=3D"n">abuf</span> <span class=3D"n">ab</span> <span cl=
ass=3D"o">=3D</span> <span class=3D"n">ABUF_INIT</span><span class=3D"p">;<=
/span></ins><div class=3D"line"></div><ins class=3D"line">  <span class=3D"=
n">abAppend</span><span class=3D"p">(</span><span class=3D"o">&amp;</span><=
span class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s">"</s=
pan><span class=3D"se">\x1b</span><span class=3D"s">[2J"</span><span class=
=3D"p">,</span> <span class=3D"mi">4</span><span class=3D"p">);</span></ins=
><ins class=3D"line">  <span class=3D"n">abAppend</span><span class=3D"p">(=
</span><span class=3D"o">&amp;</span><span class=3D"n">ab</span><span class=
=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\x1b</span><sp=
an class=3D"s">[H"</span><span class=3D"p">,</span> <span class=3D"mi">3</s=
pan><span class=3D"p">);</span></ins><div class=3D"line"></div><ins class=
=3D"line">  <span class=3D"n">editorDrawRows</span><span class=3D"p">(</spa=
n><span class=3D"o">&amp;</span><span class=3D"n">ab</span><span class=3D"p=
">);</span></ins><ins class=3D"line"></ins><ins class=3D"line">  <span clas=
s=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"o">&amp;</s=
pan><span class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s"=
>"</span><span class=3D"se">\x1b</span><span class=3D"s">[H"</span><span cl=
ass=3D"p">,</span> <span class=3D"mi">3</span><span class=3D"p">);</span></=
ins><ins class=3D"line"></ins><ins class=3D"line">  <span class=3D"n">write=
</span><span class=3D"p">(</span><span class=3D"n">STDOUT_FILENO</span><spa=
n class=3D"p">,</span> <span class=3D"n">ab</span><span class=3D"p">.</span=
><span class=3D"n">b</span><span class=3D"p">,</span> <span class=3D"n">ab<=
/span><span class=3D"p">.</span><span class=3D"n">len</span><span class=3D"=
p">);</span></ins><ins class=3D"line">  <span class=3D"n">abFree</span><spa=
n class=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D"n">ab</s=
pan><span class=3D"p">);</span></ins><div class=3D"line"><span class=3D"p">=
}</span></div><div class=3D"line"></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** input ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>In <code>editorRefreshScreen()</code>, we first initialize a new <code>a=
buf</code> called <code>ab</code>, by
assigning <code>ABUF_INIT</code> to it. We then replace each occurrence of
<code>write(STDOUT_FILENO, ...)</code> with <code>abAppend(&amp;ab, ...)</c=
ode>. We also pass <code>ab</code> into
<code>editorDrawRows()</code>, so it too can use <code>abAppend()</code>. L=
astly, we <code>write()</code> the
buffer=E2=80=99s contents out to standard output, and free the memory used =
by the
<code>abuf</code>.</p>
<h2 id=3D"hide-the-cursor-when-repainting"><a href=3D"https://viewsourcecod=
e.org/snaptoken/kilo/03.rawInputAndOutput.html#hide-the-cursor-when-repaint=
ing">Hide the cursor when repainting</a></h2>

<p>There is another possible source of the annoying flicker effect we will =
take
care of now. It=E2=80=99s possible that the cursor might be displayed in th=
e middle of
the screen somewhere for a split second while the terminal is drawing to th=
e
screen. To make sure that doesn=E2=80=99t happen, let=E2=80=99s hide the cu=
rsor before
refreshing the screen, and show it again immediately after the refresh
finishes.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/hide-cursor/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 39</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/hide-cursor">hide-cursor</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** append buffer ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** output ***/</span></div><div class=3D"line"></div><div clas=
s=3D"line folded"><span class=3D"kt">void</span> <span class=3D"nf">editorD=
rawRows</span><span class=3D"p">(</span><span class=3D"k">struct</span> <sp=
an class=3D"n">abuf</span> <span class=3D"o">*</span><span class=3D"n">ab</=
span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span =
class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line"><sp=
an class=3D"kt">void</span> <span class=3D"nf">editorRefreshScreen</span><s=
pan class=3D"p">()</span> <span class=3D"p">{</span></div><div class=3D"lin=
e">  <span class=3D"k">struct</span> <span class=3D"n">abuf</span> <span cl=
ass=3D"n">ab</span> <span class=3D"o">=3D</span> <span class=3D"n">ABUF_INI=
T</span><span class=3D"p">;</span></div><div class=3D"line"></div><ins clas=
s=3D"line">  <span class=3D"n">abAppend</span><span class=3D"p">(</span><sp=
an class=3D"o">&amp;</span><span class=3D"n">ab</span><span class=3D"p">,</=
span> <span class=3D"s">"</span><span class=3D"se">\x1b</span><span class=
=3D"s">[?25l"</span><span class=3D"p">,</span> <span class=3D"mi">6</span><=
span class=3D"p">);</span></ins><div class=3D"line">  <span class=3D"n">abA=
ppend</span><span class=3D"p">(</span><span class=3D"o">&amp;</span><span c=
lass=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s">"</span><s=
pan class=3D"se">\x1b</span><span class=3D"s">[2J"</span><span class=3D"p">=
,</span> <span class=3D"mi">4</span><span class=3D"p">);</span></div><div c=
lass=3D"line">  <span class=3D"n">abAppend</span><span class=3D"p">(</span>=
<span class=3D"o">&amp;</span><span class=3D"n">ab</span><span class=3D"p">=
,</span> <span class=3D"s">"</span><span class=3D"se">\x1b</span><span clas=
s=3D"s">[H"</span><span class=3D"p">,</span> <span class=3D"mi">3</span><sp=
an class=3D"p">);</span></div><div class=3D"line"></div><div class=3D"line"=
>  <span class=3D"n">editorDrawRows</span><span class=3D"p">(</span><span c=
lass=3D"o">&amp;</span><span class=3D"n">ab</span><span class=3D"p">);</spa=
n></div><div class=3D"line"></div><div class=3D"line">  <span class=3D"n">a=
bAppend</span><span class=3D"p">(</span><span class=3D"o">&amp;</span><span=
 class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s">"</span>=
<span class=3D"se">\x1b</span><span class=3D"s">[H"</span><span class=3D"p"=
>,</span> <span class=3D"mi">3</span><span class=3D"p">);</span></div><ins =
class=3D"line">  <span class=3D"n">abAppend</span><span class=3D"p">(</span=
><span class=3D"o">&amp;</span><span class=3D"n">ab</span><span class=3D"p"=
>,</span> <span class=3D"s">"</span><span class=3D"se">\x1b</span><span cla=
ss=3D"s">[?25h"</span><span class=3D"p">,</span> <span class=3D"mi">6</span=
><span class=3D"p">);</span></ins><div class=3D"line"></div><div class=3D"l=
ine">  <span class=3D"n">write</span><span class=3D"p">(</span><span class=
=3D"n">STDOUT_FILENO</span><span class=3D"p">,</span> <span class=3D"n">ab<=
/span><span class=3D"p">.</span><span class=3D"n">b</span><span class=3D"p"=
>,</span> <span class=3D"n">ab</span><span class=3D"p">.</span><span class=
=3D"n">len</span><span class=3D"p">);</span></div><div class=3D"line">  <sp=
an class=3D"n">abFree</span><span class=3D"p">(</span><span class=3D"o">&am=
p;</span><span class=3D"n">ab</span><span class=3D"p">);</span></div><div c=
lass=3D"line"><span class=3D"p">}</span></div><div class=3D"line"></div><di=
v class=3D"line folded"><span class=3D"cm">/*** input ***/</span></div><div=
 class=3D"line folded"><span class=3D"cm">/*** init ***/</span></div></code=
></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>We use escape sequences to tell the terminal to hide and show the cursor=
. The
<code>h</code> and <code>l</code> commands
(<a href=3D"http://vt100.net/docs/vt100-ug/chapter3.html#SM">Set Mode</a>,
<a href=3D"http://vt100.net/docs/vt100-ug/chapter3.html#RM">Reset Mode</a>)=
 are used to turn
on and turn off various terminal features or
<a href=3D"http://vt100.net/docs/vt100-ug/chapter3.html#S3.3.4">=E2=80=9Cmo=
des=E2=80=9D</a>. The VT100 User
Guide just linked to doesn=E2=80=99t document argument <code>?25</code> whi=
ch we use above. It
appears the cursor hiding/showing feature appeared in
<a href=3D"http://vt100.net/docs/vt510-rm/DECTCEM.html">later VT models</a>=
. So some
terminals might not support hiding/showing the cursor, but if they don=E2=
=80=99t, then
they will just ignore those escape sequences, which isn=E2=80=99t a big dea=
l in this
case.</p>
<h2 id=3D"clear-lines-one-at-a-time"><a href=3D"https://viewsourcecode.org/=
snaptoken/kilo/03.rawInputAndOutput.html#clear-lines-one-at-a-time">Clear l=
ines one at a time</a></h2>

<p>Instead of clearing the entire screen before each refresh, it seems more
optimal to clear each line as we redraw them. Let=E2=80=99s remove the <cod=
e>&lt;esc&gt;[2J</code>
(clear entire screen) escape sequence, and instead put a <code>&lt;esc&gt;[=
K</code> sequence at
the end of each line we draw.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/clear-line/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 40</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/clear-line">clear-line</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** append buffer ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** output ***/</span></div><div class=3D"line"></div><div clas=
s=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">editorDrawRows=
</span><span class=3D"p">(</span><span class=3D"k">struct</span> <span clas=
s=3D"n">abuf</span> <span class=3D"o">*</span><span class=3D"n">ab</span><s=
pan class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line=
">  <span class=3D"kt">int</span> <span class=3D"n">y</span><span class=3D"=
p">;</span></div><div class=3D"line">  <span class=3D"k">for</span> <span c=
lass=3D"p">(</span><span class=3D"n">y</span> <span class=3D"o">=3D</span> =
<span class=3D"mi">0</span><span class=3D"p">;</span> <span class=3D"n">y</=
span> <span class=3D"o">&lt;</span> <span class=3D"n">E</span><span class=
=3D"p">.</span><span class=3D"n">screenrows</span><span class=3D"p">;</span=
> <span class=3D"n">y</span><span class=3D"o">++</span><span class=3D"p">)<=
/span> <span class=3D"p">{</span></div><div class=3D"line">    <span class=
=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"n">ab</span>=
<span class=3D"p">,</span> <span class=3D"s">"~"</span><span class=3D"p">,<=
/span> <span class=3D"mi">1</span><span class=3D"p">);</span></div><div cla=
ss=3D"line"></div><ins class=3D"line">    <span class=3D"n">abAppend</span>=
<span class=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</s=
pan> <span class=3D"s">"</span><span class=3D"se">\x1b</span><span class=3D=
"s">[K"</span><span class=3D"p">,</span> <span class=3D"mi">3</span><span c=
lass=3D"p">);</span></ins><div class=3D"line">    <span class=3D"k">if</spa=
n> <span class=3D"p">(</span><span class=3D"n">y</span> <span class=3D"o">&=
lt;</span> <span class=3D"n">E</span><span class=3D"p">.</span><span class=
=3D"n">screenrows</span> <span class=3D"o">-</span> <span class=3D"mi">1</s=
pan><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=
=3D"line">      <span class=3D"n">abAppend</span><span class=3D"p">(</span>=
<span class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s">"</=
span><span class=3D"se">\r\n</span><span class=3D"s">"</span><span class=3D=
"p">,</span> <span class=3D"mi">2</span><span class=3D"p">);</span></div><d=
iv class=3D"line">    <span class=3D"p">}</span></div><div class=3D"line"> =
 <span class=3D"p">}</span></div><div class=3D"line"><span class=3D"p">}</s=
pan></div><div class=3D"line"></div><div class=3D"line"><span class=3D"kt">=
void</span> <span class=3D"nf">editorRefreshScreen</span><span class=3D"p">=
()</span> <span class=3D"p">{</span></div><div class=3D"line">  <span class=
=3D"k">struct</span> <span class=3D"n">abuf</span> <span class=3D"n">ab</sp=
an> <span class=3D"o">=3D</span> <span class=3D"n">ABUF_INIT</span><span cl=
ass=3D"p">;</span></div><div class=3D"line"></div><div class=3D"line">  <sp=
an class=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"o">&=
amp;</span><span class=3D"n">ab</span><span class=3D"p">,</span> <span clas=
s=3D"s">"</span><span class=3D"se">\x1b</span><span class=3D"s">[?25l"</spa=
n><span class=3D"p">,</span> <span class=3D"mi">6</span><span class=3D"p">)=
;</span></div><del class=3D"line">  <span class=3D"n">abAppend</span><span =
class=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D"n">ab</spa=
n><span class=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\=
x1b</span><span class=3D"s">[2J"</span><span class=3D"p">,</span> <span cla=
ss=3D"mi">4</span><span class=3D"p">);</span></del><div class=3D"line">  <s=
pan class=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"o">=
&amp;</span><span class=3D"n">ab</span><span class=3D"p">,</span> <span cla=
ss=3D"s">"</span><span class=3D"se">\x1b</span><span class=3D"s">[H"</span>=
<span class=3D"p">,</span> <span class=3D"mi">3</span><span class=3D"p">);<=
/span></div><div class=3D"line"></div><div class=3D"line">  <span class=3D"=
n">editorDrawRows</span><span class=3D"p">(</span><span class=3D"o">&amp;</=
span><span class=3D"n">ab</span><span class=3D"p">);</span></div><div class=
=3D"line"></div><div class=3D"line">  <span class=3D"n">abAppend</span><spa=
n class=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D"n">ab</s=
pan><span class=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se"=
>\x1b</span><span class=3D"s">[H"</span><span class=3D"p">,</span> <span cl=
ass=3D"mi">3</span><span class=3D"p">);</span></div><div class=3D"line">  <=
span class=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"o"=
>&amp;</span><span class=3D"n">ab</span><span class=3D"p">,</span> <span cl=
ass=3D"s">"</span><span class=3D"se">\x1b</span><span class=3D"s">[?25h"</s=
pan><span class=3D"p">,</span> <span class=3D"mi">6</span><span class=3D"p"=
>);</span></div><div class=3D"line"></div><div class=3D"line">  <span class=
=3D"n">write</span><span class=3D"p">(</span><span class=3D"n">STDOUT_FILEN=
O</span><span class=3D"p">,</span> <span class=3D"n">ab</span><span class=
=3D"p">.</span><span class=3D"n">b</span><span class=3D"p">,</span> <span c=
lass=3D"n">ab</span><span class=3D"p">.</span><span class=3D"n">len</span><=
span class=3D"p">);</span></div><div class=3D"line">  <span class=3D"n">abF=
ree</span><span class=3D"p">(</span><span class=3D"o">&amp;</span><span cla=
ss=3D"n">ab</span><span class=3D"p">);</span></div><div class=3D"line"><spa=
n class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line fo=
lded"><span class=3D"cm">/*** input ***/</span></div><div class=3D"line fol=
ded"><span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>The <code>K</code> command
(<a href=3D"http://vt100.net/docs/vt100-ug/chapter3.html#EL">Erase In Line<=
/a>) erases part
of the current line. Its argument is analogous to the <code>J</code> comman=
d=E2=80=99s argument:
<code>2</code> erases the whole line, <code>1</code> erases the part of the=
 line to the left of the
cursor, and <code>0</code> erases the part of the line to the right of the =
cursor. <code>0</code> is
the default argument, and that=E2=80=99s what we want, so we leave out the =
argument and
just use <code>&lt;esc&gt;[K</code>.</p>
<h2 id=3D"welcome-message"><a href=3D"https://viewsourcecode.org/snaptoken/=
kilo/03.rawInputAndOutput.html#welcome-message">Welcome message</a></h2>

<p>Perhaps it=E2=80=99s time to display a welcome message. Let=E2=80=99s di=
splay the name of our
editor and a version number a third of the way down the screen.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/welcome/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 41</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/welcome">welcome</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line"><span class=3D"c=
m">/*** defines ***/</span></div><div class=3D"line"></div><ins class=3D"li=
ne"><span class=3D"cp">#define KILO_VERSION "0.0.1"</span></ins><div class=
=3D"line"></div><div class=3D"line"><span class=3D"cp">#define CTRL_KEY(k) =
((k) &amp; 0x1f)</span></div><div class=3D"line"></div><div class=3D"line f=
olded"><span class=3D"cm">/*** data ***/</span></div><div class=3D"line fol=
ded"><span class=3D"cm">/*** terminal ***/</span></div><div class=3D"line f=
olded"><span class=3D"cm">/*** append buffer ***/</span></div><div class=3D=
"line"><span class=3D"cm">/*** output ***/</span></div><div class=3D"line">=
</div><div class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf"=
>editorDrawRows</span><span class=3D"p">(</span><span class=3D"k">struct</s=
pan> <span class=3D"n">abuf</span> <span class=3D"o">*</span><span class=3D=
"n">ab</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><di=
v class=3D"line">  <span class=3D"kt">int</span> <span class=3D"n">y</span>=
<span class=3D"p">;</span></div><div class=3D"line">  <span class=3D"k">for=
</span> <span class=3D"p">(</span><span class=3D"n">y</span> <span class=3D=
"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span> <span =
class=3D"n">y</span> <span class=3D"o">&lt;</span> <span class=3D"n">E</spa=
n><span class=3D"p">.</span><span class=3D"n">screenrows</span><span class=
=3D"p">;</span> <span class=3D"n">y</span><span class=3D"o">++</span><span =
class=3D"p">)</span> <span class=3D"p">{</span></div><ins class=3D"line">  =
  <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">y=
</span> <span class=3D"o">=3D=3D</span> <span class=3D"n">E</span><span cla=
ss=3D"p">.</span><span class=3D"n">screenrows</span> <span class=3D"o">/</s=
pan> <span class=3D"mi">3</span><span class=3D"p">)</span> <span class=3D"p=
">{</span></ins><ins class=3D"line">      <span class=3D"kt">char</span> <s=
pan class=3D"n">welcome</span><span class=3D"p">[</span><span class=3D"mi">=
80</span><span class=3D"p">];</span></ins><ins class=3D"line">      <span c=
lass=3D"kt">int</span> <span class=3D"n">welcomelen</span> <span class=3D"o=
">=3D</span> <span class=3D"n">snprintf</span><span class=3D"p">(</span><sp=
an class=3D"n">welcome</span><span class=3D"p">,</span> <span class=3D"k">s=
izeof</span><span class=3D"p">(</span><span class=3D"n">welcome</span><span=
 class=3D"p">),</span></ins><ins class=3D"line">        <span class=3D"s">"=
Kilo editor -- version %s"</span><span class=3D"p">,</span> <span class=3D"=
n">KILO_VERSION</span><span class=3D"p">);</span></ins><ins class=3D"line">=
      <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"=
n">welcomelen</span> <span class=3D"o">&gt;</span> <span class=3D"n">E</spa=
n><span class=3D"p">.</span><span class=3D"n">screencols</span><span class=
=3D"p">)</span> <span class=3D"n">welcomelen</span> <span class=3D"o">=3D</=
span> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n"=
>screencols</span><span class=3D"p">;</span></ins><ins class=3D"line">     =
 <span class=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"=
n">ab</span><span class=3D"p">,</span> <span class=3D"n">welcome</span><spa=
n class=3D"p">,</span> <span class=3D"n">welcomelen</span><span class=3D"p"=
>);</span></ins><ins class=3D"line">    <span class=3D"p">}</span> <span cl=
ass=3D"k">else</span> <span class=3D"p">{</span></ins><div class=3D"line"> =
     <span class=3D"n">abAppend</span><span class=3D"p">(</span><span class=
=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s">"~"</span><spa=
n class=3D"p">,</span> <span class=3D"mi">1</span><span class=3D"p">);</spa=
n></div><ins class=3D"line">    <span class=3D"p">}</span></ins><div class=
=3D"line"></div><div class=3D"line">    <span class=3D"n">abAppend</span><s=
pan class=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</spa=
n> <span class=3D"s">"</span><span class=3D"se">\x1b</span><span class=3D"s=
">[K"</span><span class=3D"p">,</span> <span class=3D"mi">3</span><span cla=
ss=3D"p">);</span></div><div class=3D"line">    <span class=3D"k">if</span>=
 <span class=3D"p">(</span><span class=3D"n">y</span> <span class=3D"o">&lt=
;</span> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D=
"n">screenrows</span> <span class=3D"o">-</span> <span class=3D"mi">1</span=
><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"l=
ine">      <span class=3D"n">abAppend</span><span class=3D"p">(</span><span=
 class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s">"</span>=
<span class=3D"se">\r\n</span><span class=3D"s">"</span><span class=3D"p">,=
</span> <span class=3D"mi">2</span><span class=3D"p">);</span></div><div cl=
ass=3D"line">    <span class=3D"p">}</span></div><div class=3D"line">  <spa=
n class=3D"p">}</span></div><div class=3D"line"><span class=3D"p">}</span><=
/div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt=
">void</span> <span class=3D"nf">editorRefreshScreen</span><span class=3D"p=
">()</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span>=
</div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"c=
m">/*** input ***/</span></div><div class=3D"line folded"><span class=3D"cm=
">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p><code>snprintf()</code> comes from <code>&lt;stdio.h&gt;</code>.</p>

<p>We use the <code>welcome</code> buffer and <code>snprintf()</code> to in=
terpolate our <code>KILO_VERSION</code>
string into the welcome message. We also truncate the length of the string =
in
case the terminal is too tiny to fit our welcome message.</p>

<p>Now let=E2=80=99s center it.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/center/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 42</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/center">center</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** append buffer ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** output ***/</span></div><div class=3D"line"></div><div clas=
s=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">editorDrawRows=
</span><span class=3D"p">(</span><span class=3D"k">struct</span> <span clas=
s=3D"n">abuf</span> <span class=3D"o">*</span><span class=3D"n">ab</span><s=
pan class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line=
">  <span class=3D"kt">int</span> <span class=3D"n">y</span><span class=3D"=
p">;</span></div><div class=3D"line">  <span class=3D"k">for</span> <span c=
lass=3D"p">(</span><span class=3D"n">y</span> <span class=3D"o">=3D</span> =
<span class=3D"mi">0</span><span class=3D"p">;</span> <span class=3D"n">y</=
span> <span class=3D"o">&lt;</span> <span class=3D"n">E</span><span class=
=3D"p">.</span><span class=3D"n">screenrows</span><span class=3D"p">;</span=
> <span class=3D"n">y</span><span class=3D"o">++</span><span class=3D"p">)<=
/span> <span class=3D"p">{</span></div><div class=3D"line">    <span class=
=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">y</span> <span=
 class=3D"o">=3D=3D</span> <span class=3D"n">E</span><span class=3D"p">.</s=
pan><span class=3D"n">screenrows</span> <span class=3D"o">/</span> <span cl=
ass=3D"mi">3</span><span class=3D"p">)</span> <span class=3D"p">{</span></d=
iv><div class=3D"line">      <span class=3D"kt">char</span> <span class=3D"=
n">welcome</span><span class=3D"p">[</span><span class=3D"mi">80</span><spa=
n class=3D"p">];</span></div><div class=3D"line">      <span class=3D"kt">i=
nt</span> <span class=3D"n">welcomelen</span> <span class=3D"o">=3D</span> =
<span class=3D"n">snprintf</span><span class=3D"p">(</span><span class=3D"n=
">welcome</span><span class=3D"p">,</span> <span class=3D"k">sizeof</span><=
span class=3D"p">(</span><span class=3D"n">welcome</span><span class=3D"p">=
),</span></div><div class=3D"line">        <span class=3D"s">"Kilo editor -=
- version %s"</span><span class=3D"p">,</span> <span class=3D"n">KILO_VERSI=
ON</span><span class=3D"p">);</span></div><div class=3D"line">      <span c=
lass=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">welcomelen=
</span> <span class=3D"o">&gt;</span> <span class=3D"n">E</span><span class=
=3D"p">.</span><span class=3D"n">screencols</span><span class=3D"p">)</span=
> <span class=3D"n">welcomelen</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screencols</s=
pan><span class=3D"p">;</span></div><ins class=3D"line">      <span class=
=3D"kt">int</span> <span class=3D"n">padding</span> <span class=3D"o">=3D</=
span> <span class=3D"p">(</span><span class=3D"n">E</span><span class=3D"p"=
>.</span><span class=3D"n">screencols</span> <span class=3D"o">-</span> <sp=
an class=3D"n">welcomelen</span><span class=3D"p">)</span> <span class=3D"o=
">/</span> <span class=3D"mi">2</span><span class=3D"p">;</span></ins><ins =
class=3D"line">      <span class=3D"k">if</span> <span class=3D"p">(</span>=
<span class=3D"n">padding</span><span class=3D"p">)</span> <span class=3D"p=
">{</span></ins><ins class=3D"line">        <span class=3D"n">abAppend</spa=
n><span class=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,<=
/span> <span class=3D"s">"~"</span><span class=3D"p">,</span> <span class=
=3D"mi">1</span><span class=3D"p">);</span></ins><ins class=3D"line">      =
  <span class=3D"n">padding</span><span class=3D"o">--</span><span class=3D=
"p">;</span></ins><ins class=3D"line">      <span class=3D"p">}</span></ins=
><ins class=3D"line">      <span class=3D"k">while</span> <span class=3D"p"=
>(</span><span class=3D"n">padding</span><span class=3D"o">--</span><span c=
lass=3D"p">)</span> <span class=3D"n">abAppend</span><span class=3D"p">(</s=
pan><span class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s"=
>" "</span><span class=3D"p">,</span> <span class=3D"mi">1</span><span clas=
s=3D"p">);</span></ins><div class=3D"line">      <span class=3D"n">abAppend=
</span><span class=3D"p">(</span><span class=3D"n">ab</span><span class=3D"=
p">,</span> <span class=3D"n">welcome</span><span class=3D"p">,</span> <spa=
n class=3D"n">welcomelen</span><span class=3D"p">);</span></div><div class=
=3D"line">    <span class=3D"p">}</span> <span class=3D"k">else</span> <spa=
n class=3D"p">{</span></div><div class=3D"line">      <span class=3D"n">abA=
ppend</span><span class=3D"p">(</span><span class=3D"n">ab</span><span clas=
s=3D"p">,</span> <span class=3D"s">"~"</span><span class=3D"p">,</span> <sp=
an class=3D"mi">1</span><span class=3D"p">);</span></div><div class=3D"line=
">    <span class=3D"p">}</span></div><div class=3D"line"></div><div class=
=3D"line">    <span class=3D"n">abAppend</span><span class=3D"p">(</span><s=
pan class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s">"</sp=
an><span class=3D"se">\x1b</span><span class=3D"s">[K"</span><span class=3D=
"p">,</span> <span class=3D"mi">3</span><span class=3D"p">);</span></div><d=
iv class=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(</span=
><span class=3D"n">y</span> <span class=3D"o">&lt;</span> <span class=3D"n"=
>E</span><span class=3D"p">.</span><span class=3D"n">screenrows</span> <spa=
n class=3D"o">-</span> <span class=3D"mi">1</span><span class=3D"p">)</span=
> <span class=3D"p">{</span></div><div class=3D"line">      <span class=3D"=
n">abAppend</span><span class=3D"p">(</span><span class=3D"n">ab</span><spa=
n class=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\r\n</s=
pan><span class=3D"s">"</span><span class=3D"p">,</span> <span class=3D"mi"=
>2</span><span class=3D"p">);</span></div><div class=3D"line">    <span cla=
ss=3D"p">}</span></div><div class=3D"line">  <span class=3D"p">}</span></di=
v><div class=3D"line"><span class=3D"p">}</span></div><div class=3D"line"><=
/div><div class=3D"line folded"><span class=3D"kt">void</span> <span class=
=3D"nf">editorRefreshScreen</span><span class=3D"p">()</span> <span class=
=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"lin=
e"></div><div class=3D"line folded"><span class=3D"cm">/*** input ***/</spa=
n></div><div class=3D"line folded"><span class=3D"cm">/*** init ***/</span>=
</div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>To center a string, you divide the screen width by <code>2</code>, and t=
hen subtract half
of the string=E2=80=99s length from that. In other words:
<code>E.screencols/2 - welcomelen/2</code>, which simplifies to
<code>(E.screencols - welcomelen) / 2</code>. That tells you how far from t=
he left edge of
the screen you should start printing the string. So we fill that space with
space characters, except for the first character, which should be a tilde.<=
/p>
<h2 id=3D"move-the-cursor"><a href=3D"https://viewsourcecode.org/snaptoken/=
kilo/03.rawInputAndOutput.html#move-the-cursor">Move the cursor</a></h2>

<p>Let=E2=80=99s focus on input now. We want the user to be able to move th=
e cursor
around. The first step is to keep track of the cursor=E2=80=99s <code>x</co=
de> and <code>y</code> position in
the global editor state.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/cx-cy/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 43</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/cx-cy">cx-cy</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line"><span class=3D"=
cm">/*** data ***/</span></div><div class=3D"line"></div><div class=3D"line=
"><span class=3D"k">struct</span> <span class=3D"n">editorConfig</span> <sp=
an class=3D"p">{</span></div><ins class=3D"line">  <span class=3D"kt">int</=
span> <span class=3D"n">cx</span><span class=3D"p">,</span> <span class=3D"=
n">cy</span><span class=3D"p">;</span></ins><div class=3D"line">  <span cla=
ss=3D"kt">int</span> <span class=3D"n">screenrows</span><span class=3D"p">;=
</span></div><div class=3D"line">  <span class=3D"kt">int</span> <span clas=
s=3D"n">screencols</span><span class=3D"p">;</span></div><div class=3D"line=
">  <span class=3D"k">struct</span> <span class=3D"n">termios</span> <span =
class=3D"n">orig_termios</span><span class=3D"p">;</span></div><div class=
=3D"line"><span class=3D"p">};</span></div><div class=3D"line"></div><div c=
lass=3D"line"><span class=3D"k">struct</span> <span class=3D"n">editorConfi=
g</span> <span class=3D"n">E</span><span class=3D"p">;</span></div><div cla=
ss=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/*** termin=
al ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** appe=
nd buffer ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*=
** output ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*=
** input ***/</span></div><div class=3D"line"><span class=3D"cm">/*** init =
***/</span></div><div class=3D"line"></div><div class=3D"line"><span class=
=3D"kt">void</span> <span class=3D"nf">initEditor</span><span class=3D"p">(=
)</span> <span class=3D"p">{</span></div><ins class=3D"line">  <span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">cx</span> <span =
class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span=
></ins><ins class=3D"line">  <span class=3D"n">E</span><span class=3D"p">.<=
/span><span class=3D"n">cy</span> <span class=3D"o">=3D</span> <span class=
=3D"mi">0</span><span class=3D"p">;</span></ins><div class=3D"line"></div><=
div class=3D"line">  <span class=3D"k">if</span> <span class=3D"p">(</span>=
<span class=3D"n">getWindowSize</span><span class=3D"p">(</span><span class=
=3D"o">&amp;</span><span class=3D"n">E</span><span class=3D"p">.</span><spa=
n class=3D"n">screenrows</span><span class=3D"p">,</span> <span class=3D"o"=
>&amp;</span><span class=3D"n">E</span><span class=3D"p">.</span><span clas=
s=3D"n">screencols</span><span class=3D"p">)</span> <span class=3D"o">=3D=
=3D</span> <span class=3D"o">-</span><span class=3D"mi">1</span><span class=
=3D"p">)</span> <span class=3D"n">die</span><span class=3D"p">(</span><span=
 class=3D"s">"getWindowSize"</span><span class=3D"p">);</span></div><div cl=
ass=3D"line"><span class=3D"p">}</span></div><div class=3D"line"></div><div=
 class=3D"line folded"><span class=3D"kt">int</span> <span class=3D"nf">mai=
n</span><span class=3D"p">()</span> <span class=3D"p">{</span> =E2=80=A6 <s=
pan class=3D"p">}</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p><code>E.cx</code> is the horizontal coordinate of the cursor (the column=
) and <code>E.cy</code> is
the vertical coordinate (the row). We initialize both of them to <code>0</c=
ode>, as we
want the cursor to start at the top-left of the screen. (Since the C langua=
ge
uses indexes that start from <code>0</code>, we will use 0-indexed values w=
herever
possible.)</p>

<p>Now let=E2=80=99s add code to <code>editorRefreshScreen()</code> to move=
 the cursor to the
position stored in <code>E.cx</code> and <code>E.cy</code>.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/set-cursor-position/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 44</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/set-cursor-position">set-cursor-position</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** append buffer ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** output ***/</span></div><div class=3D"line"></div><div clas=
s=3D"line folded"><span class=3D"kt">void</span> <span class=3D"nf">editorD=
rawRows</span><span class=3D"p">(</span><span class=3D"k">struct</span> <sp=
an class=3D"n">abuf</span> <span class=3D"o">*</span><span class=3D"n">ab</=
span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span =
class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line"><sp=
an class=3D"kt">void</span> <span class=3D"nf">editorRefreshScreen</span><s=
pan class=3D"p">()</span> <span class=3D"p">{</span></div><div class=3D"lin=
e">  <span class=3D"k">struct</span> <span class=3D"n">abuf</span> <span cl=
ass=3D"n">ab</span> <span class=3D"o">=3D</span> <span class=3D"n">ABUF_INI=
T</span><span class=3D"p">;</span></div><div class=3D"line"></div><div clas=
s=3D"line">  <span class=3D"n">abAppend</span><span class=3D"p">(</span><sp=
an class=3D"o">&amp;</span><span class=3D"n">ab</span><span class=3D"p">,</=
span> <span class=3D"s">"</span><span class=3D"se">\x1b</span><span class=
=3D"s">[?25l"</span><span class=3D"p">,</span> <span class=3D"mi">6</span><=
span class=3D"p">);</span></div><div class=3D"line">  <span class=3D"n">abA=
ppend</span><span class=3D"p">(</span><span class=3D"o">&amp;</span><span c=
lass=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s">"</span><s=
pan class=3D"se">\x1b</span><span class=3D"s">[H"</span><span class=3D"p">,=
</span> <span class=3D"mi">3</span><span class=3D"p">);</span></div><div cl=
ass=3D"line"></div><div class=3D"line">  <span class=3D"n">editorDrawRows</=
span><span class=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D=
"n">ab</span><span class=3D"p">);</span></div><div class=3D"line"></div><in=
s class=3D"line">  <span class=3D"kt">char</span> <span class=3D"n">buf</sp=
an><span class=3D"p">[</span><span class=3D"mi">32</span><span class=3D"p">=
];</span></ins><ins class=3D"line">  <span class=3D"n">snprintf</span><span=
 class=3D"p">(</span><span class=3D"n">buf</span><span class=3D"p">,</span>=
 <span class=3D"k">sizeof</span><span class=3D"p">(</span><span class=3D"n"=
>buf</span><span class=3D"p">),</span> <span class=3D"s">"</span><span clas=
s=3D"se">\x1b</span><span class=3D"s">[%d;%dH"</span><span class=3D"p">,</s=
pan> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">=
cy</span> <span class=3D"o">+</span> <span class=3D"mi">1</span><span class=
=3D"p">,</span> <span class=3D"n">E</span><span class=3D"p">.</span><span c=
lass=3D"n">cx</span> <span class=3D"o">+</span> <span class=3D"mi">1</span>=
<span class=3D"p">);</span></ins><ins class=3D"line">  <span class=3D"n">ab=
Append</span><span class=3D"p">(</span><span class=3D"o">&amp;</span><span =
class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"n">buf</span=
><span class=3D"p">,</span> <span class=3D"n">strlen</span><span class=3D"p=
">(</span><span class=3D"n">buf</span><span class=3D"p">));</span></ins><di=
v class=3D"line"></div><div class=3D"line">  <span class=3D"n">abAppend</sp=
an><span class=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D"n=
">ab</span><span class=3D"p">,</span> <span class=3D"s">"</span><span class=
=3D"se">\x1b</span><span class=3D"s">[?25h"</span><span class=3D"p">,</span=
> <span class=3D"mi">6</span><span class=3D"p">);</span></div><div class=3D=
"line"></div><div class=3D"line">  <span class=3D"n">write</span><span clas=
s=3D"p">(</span><span class=3D"n">STDOUT_FILENO</span><span class=3D"p">,</=
span> <span class=3D"n">ab</span><span class=3D"p">.</span><span class=3D"n=
">b</span><span class=3D"p">,</span> <span class=3D"n">ab</span><span class=
=3D"p">.</span><span class=3D"n">len</span><span class=3D"p">);</span></div=
><div class=3D"line">  <span class=3D"n">abFree</span><span class=3D"p">(</=
span><span class=3D"o">&amp;</span><span class=3D"n">ab</span><span class=
=3D"p">);</span></div><div class=3D"line"><span class=3D"p">}</span></div><=
div class=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/***=
 input ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** =
init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p><code>strlen()</code> comes from <code>&lt;string.h&gt;</code>.</p>

<p>We changed the old <code>H</code> command into an <code>H</code> command=
 with arguments, specifying
the exact position we want the cursor to move to. (Make sure you deleted th=
e
old <code>H</code> command, as the above diff makes that easy to miss.)</p>

<p>We add <code>1</code> to <code>E.cy</code> and <code>E.cx</code> to conv=
ert from 0-indexed values to the
1-indexed values that the terminal uses.</p>

<p>At this point, you could try initializing <code>E.cx</code> to <code>10<=
/code> or something, or
insert <code>E.cx++</code> into the main loop, to confirm that the code wor=
ks as intended
so far.</p>

<p>Next, we=E2=80=99ll allow the user to move the cursor using the
<kbd>w</kbd><kbd>a</kbd><kbd>s</kbd><kbd>d</kbd> keys. (If you=E2=80=99re u=
nfamiliar
with using these keys as arrow keys: <kbd>w</kbd> is your up arrow,
<kbd>s</kbd> is your down arrow, <kbd>a</kbd> is left, <kbd>d</kbd> is righ=
t.)</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/move-cursor/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 45</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/move-cursor">move-cursor</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** append buffer ***/</span></div><div class=3D"line folded"><=
span class=3D"cm">/*** output ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** input ***/</span></div><div class=3D"line"></div><ins class=
=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">editorMoveCurso=
r</span><span class=3D"p">(</span><span class=3D"kt">char</span> <span clas=
s=3D"n">key</span><span class=3D"p">)</span> <span class=3D"p">{</span></in=
s><ins class=3D"line">  <span class=3D"k">switch</span> <span class=3D"p">(=
</span><span class=3D"n">key</span><span class=3D"p">)</span> <span class=
=3D"p">{</span></ins><ins class=3D"line">    <span class=3D"k">case</span> =
<span class=3D"sc">'a'</span><span class=3D"p">:</span></ins><ins class=3D"=
line">      <span class=3D"n">E</span><span class=3D"p">.</span><span class=
=3D"n">cx</span><span class=3D"o">--</span><span class=3D"p">;</span></ins>=
<ins class=3D"line">      <span class=3D"k">break</span><span class=3D"p">;=
</span></ins><ins class=3D"line">    <span class=3D"k">case</span> <span cl=
ass=3D"sc">'d'</span><span class=3D"p">:</span></ins><ins class=3D"line">  =
    <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">c=
x</span><span class=3D"o">++</span><span class=3D"p">;</span></ins><ins cla=
ss=3D"line">      <span class=3D"k">break</span><span class=3D"p">;</span><=
/ins><ins class=3D"line">    <span class=3D"k">case</span> <span class=3D"s=
c">'w'</span><span class=3D"p">:</span></ins><ins class=3D"line">      <spa=
n class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">cy</span>=
<span class=3D"o">--</span><span class=3D"p">;</span></ins><ins class=3D"li=
ne">      <span class=3D"k">break</span><span class=3D"p">;</span></ins><in=
s class=3D"line">    <span class=3D"k">case</span> <span class=3D"sc">'s'</=
span><span class=3D"p">:</span></ins><ins class=3D"line">      <span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">cy</span><span c=
lass=3D"o">++</span><span class=3D"p">;</span></ins><ins class=3D"line">   =
   <span class=3D"k">break</span><span class=3D"p">;</span></ins><ins class=
=3D"line">  <span class=3D"p">}</span></ins><ins class=3D"line"><span class=
=3D"p">}</span></ins><div class=3D"line"></div><div class=3D"line"><span cl=
ass=3D"kt">void</span> <span class=3D"nf">editorProcessKeypress</span><span=
 class=3D"p">()</span> <span class=3D"p">{</span></div><div class=3D"line">=
  <span class=3D"kt">char</span> <span class=3D"n">c</span> <span class=3D"=
o">=3D</span> <span class=3D"n">editorReadKey</span><span class=3D"p">();</=
span></div><div class=3D"line"></div><div class=3D"line">  <span class=3D"k=
">switch</span> <span class=3D"p">(</span><span class=3D"n">c</span><span c=
lass=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line">   =
 <span class=3D"k">case</span> <span class=3D"n">CTRL_KEY</span><span class=
=3D"p">(</span><span class=3D"sc">'q'</span><span class=3D"p">):</span></di=
v><div class=3D"line">      <span class=3D"n">write</span><span class=3D"p"=
>(</span><span class=3D"n">STDOUT_FILENO</span><span class=3D"p">,</span> <=
span class=3D"s">"</span><span class=3D"se">\x1b</span><span class=3D"s">[2=
J"</span><span class=3D"p">,</span> <span class=3D"mi">4</span><span class=
=3D"p">);</span></div><div class=3D"line">      <span class=3D"n">write</sp=
an><span class=3D"p">(</span><span class=3D"n">STDOUT_FILENO</span><span cl=
ass=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\x1b</span>=
<span class=3D"s">[H"</span><span class=3D"p">,</span> <span class=3D"mi">3=
</span><span class=3D"p">);</span></div><div class=3D"line">      <span cla=
ss=3D"n">exit</span><span class=3D"p">(</span><span class=3D"mi">0</span><s=
pan class=3D"p">);</span></div><div class=3D"line">      <span class=3D"k">=
break</span><span class=3D"p">;</span></div><div class=3D"line"></div><ins =
class=3D"line">    <span class=3D"k">case</span> <span class=3D"sc">'w'</sp=
an><span class=3D"p">:</span></ins><ins class=3D"line">    <span class=3D"k=
">case</span> <span class=3D"sc">'s'</span><span class=3D"p">:</span></ins>=
<ins class=3D"line">    <span class=3D"k">case</span> <span class=3D"sc">'a=
'</span><span class=3D"p">:</span></ins><ins class=3D"line">    <span class=
=3D"k">case</span> <span class=3D"sc">'d'</span><span class=3D"p">:</span><=
/ins><ins class=3D"line">      <span class=3D"n">editorMoveCursor</span><sp=
an class=3D"p">(</span><span class=3D"n">c</span><span class=3D"p">);</span=
></ins><ins class=3D"line">      <span class=3D"k">break</span><span class=
=3D"p">;</span></ins><div class=3D"line">  <span class=3D"p">}</span></div>=
<div class=3D"line"><span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line folded"><span class=3D"cm">/*** init ***/</span></div=
></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>Now you should be able to move the cursor around with those keys.</p>
<h2 id=3D"arrow-keys"><a href=3D"https://viewsourcecode.org/snaptoken/kilo/=
03.rawInputAndOutput.html#arrow-keys">Arrow keys</a></h2>

<p>Now that we have a way of mapping keypresses to move the cursor, let=E2=
=80=99s replace
the <kbd>w</kbd><kbd>a</kbd><kbd>s</kbd><kbd>d</kbd> keys with the arrow ke=
ys.
Last chapter we <a href=3D"https://viewsourcecode.org/snaptoken/kilo/02.ent=
eringRawMode.html#display-keypresses">saw</a> that pressing
an arrow key sends multiple bytes as input to our program. These bytes are =
in
the form of an escape sequence that starts with <code>'\x1b'</code>, <code>=
'['</code>, followed by an
<code>'A'</code>, <code>'B'</code>, <code>'C'</code>, or <code>'D'</code> d=
epending on which of the four arrow keys was
pressed. Let=E2=80=99s modify <code>editorReadKey()</code> to read escape s=
equences of this form
as a single keypress.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/detect-arrow-keys/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 46</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/detect-arrow-keys">detect-arrow-keys</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line"><span class=3D"cm=
">/*** terminal ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne folded"><span class=3D"kt">void</span> <span class=3D"nf">die</span><spa=
n class=3D"p">(</span><span class=3D"k">const</span> <span class=3D"kt">cha=
r</span> <span class=3D"o">*</span><span class=3D"n">s</span><span class=3D=
"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span=
></div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"=
kt">void</span> <span class=3D"nf">disableRawMode</span><span class=3D"p">(=
)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></d=
iv><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">=
void</span> <span class=3D"nf">enableRawMode</span><span class=3D"p">()</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><d=
iv class=3D"line"></div><div class=3D"line"><span class=3D"kt">char</span> =
<span class=3D"nf">editorReadKey</span><span class=3D"p">()</span> <span cl=
ass=3D"p">{</span></div><div class=3D"line">  <span class=3D"kt">int</span>=
 <span class=3D"n">nread</span><span class=3D"p">;</span></div><div class=
=3D"line">  <span class=3D"kt">char</span> <span class=3D"n">c</span><span =
class=3D"p">;</span></div><div class=3D"line">  <span class=3D"k">while</sp=
an> <span class=3D"p">((</span><span class=3D"n">nread</span> <span class=
=3D"o">=3D</span> <span class=3D"n">read</span><span class=3D"p">(</span><s=
pan class=3D"n">STDIN_FILENO</span><span class=3D"p">,</span> <span class=
=3D"o">&amp;</span><span class=3D"n">c</span><span class=3D"p">,</span> <sp=
an class=3D"mi">1</span><span class=3D"p">))</span> <span class=3D"o">!=3D<=
/span> <span class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D=
"p">{</span></div><div class=3D"line">    <span class=3D"k">if</span> <span=
 class=3D"p">(</span><span class=3D"n">nread</span> <span class=3D"o">=3D=
=3D</span> <span class=3D"o">-</span><span class=3D"mi">1</span> <span clas=
s=3D"o">&amp;&amp;</span> <span class=3D"n">errno</span> <span class=3D"o">=
!=3D</span> <span class=3D"n">EAGAIN</span><span class=3D"p">)</span> <span=
 class=3D"n">die</span><span class=3D"p">(</span><span class=3D"s">"read"</=
span><span class=3D"p">);</span></div><div class=3D"line">  <span class=3D"=
p">}</span></div><div class=3D"line"></div><ins class=3D"line">  <span clas=
s=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">c</span> <spa=
n class=3D"o">=3D=3D</span> <span class=3D"sc">'\x1b'</span><span class=3D"=
p">)</span> <span class=3D"p">{</span></ins><ins class=3D"line">    <span c=
lass=3D"kt">char</span> <span class=3D"n">seq</span><span class=3D"p">[</sp=
an><span class=3D"mi">3</span><span class=3D"p">];</span></ins><ins class=
=3D"line"></ins><ins class=3D"line">    <span class=3D"k">if</span> <span c=
lass=3D"p">(</span><span class=3D"n">read</span><span class=3D"p">(</span><=
span class=3D"n">STDIN_FILENO</span><span class=3D"p">,</span> <span class=
=3D"o">&amp;</span><span class=3D"n">seq</span><span class=3D"p">[</span><s=
pan class=3D"mi">0</span><span class=3D"p">],</span> <span class=3D"mi">1</=
span><span class=3D"p">)</span> <span class=3D"o">!=3D</span> <span class=
=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"k">return</span> =
<span class=3D"sc">'\x1b'</span><span class=3D"p">;</span></ins><ins class=
=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(</span><span c=
lass=3D"n">read</span><span class=3D"p">(</span><span class=3D"n">STDIN_FIL=
ENO</span><span class=3D"p">,</span> <span class=3D"o">&amp;</span><span cl=
ass=3D"n">seq</span><span class=3D"p">[</span><span class=3D"mi">1</span><s=
pan class=3D"p">],</span> <span class=3D"mi">1</span><span class=3D"p">)</s=
pan> <span class=3D"o">!=3D</span> <span class=3D"mi">1</span><span class=
=3D"p">)</span> <span class=3D"k">return</span> <span class=3D"sc">'\x1b'</=
span><span class=3D"p">;</span></ins><ins class=3D"line"></ins><ins class=
=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(</span><span c=
lass=3D"n">seq</span><span class=3D"p">[</span><span class=3D"mi">0</span><=
span class=3D"p">]</span> <span class=3D"o">=3D=3D</span> <span class=3D"sc=
">'['</span><span class=3D"p">)</span> <span class=3D"p">{</span></ins><ins=
 class=3D"line">      <span class=3D"k">switch</span> <span class=3D"p">(</=
span><span class=3D"n">seq</span><span class=3D"p">[</span><span class=3D"m=
i">1</span><span class=3D"p">])</span> <span class=3D"p">{</span></ins><ins=
 class=3D"line">        <span class=3D"k">case</span> <span class=3D"sc">'A=
'</span><span class=3D"p">:</span> <span class=3D"k">return</span> <span cl=
ass=3D"sc">'w'</span><span class=3D"p">;</span></ins><ins class=3D"line">  =
      <span class=3D"k">case</span> <span class=3D"sc">'B'</span><span clas=
s=3D"p">:</span> <span class=3D"k">return</span> <span class=3D"sc">'s'</sp=
an><span class=3D"p">;</span></ins><ins class=3D"line">        <span class=
=3D"k">case</span> <span class=3D"sc">'C'</span><span class=3D"p">:</span> =
<span class=3D"k">return</span> <span class=3D"sc">'d'</span><span class=3D=
"p">;</span></ins><ins class=3D"line">        <span class=3D"k">case</span>=
 <span class=3D"sc">'D'</span><span class=3D"p">:</span> <span class=3D"k">=
return</span> <span class=3D"sc">'a'</span><span class=3D"p">;</span></ins>=
<ins class=3D"line">      <span class=3D"p">}</span></ins><ins class=3D"lin=
e">    <span class=3D"p">}</span></ins><ins class=3D"line"></ins><ins class=
=3D"line">    <span class=3D"k">return</span> <span class=3D"sc">'\x1b'</sp=
an><span class=3D"p">;</span></ins><ins class=3D"line">  <span class=3D"p">=
}</span> <span class=3D"k">else</span> <span class=3D"p">{</span></ins><div=
 class=3D"line">    <span class=3D"k">return</span> <span class=3D"n">c</sp=
an><span class=3D"p">;</span></div><ins class=3D"line">  <span class=3D"p">=
}</span></ins><div class=3D"line"><span class=3D"p">}</span></div><div clas=
s=3D"line"></div><div class=3D"line folded"><span class=3D"kt">int</span> <=
span class=3D"nf">getCursorPosition</span><span class=3D"p">(</span><span c=
lass=3D"kt">int</span> <span class=3D"o">*</span><span class=3D"n">rows</sp=
an><span class=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D"=
o">*</span><span class=3D"n">cols</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"=
line"></div><div class=3D"line folded"><span class=3D"kt">int</span> <span =
class=3D"nf">getWindowSize</span><span class=3D"p">(</span><span class=3D"k=
t">int</span> <span class=3D"o">*</span><span class=3D"n">rows</span><span =
class=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D"o">*</spa=
n><span class=3D"n">cols</span><span class=3D"p">)</span> <span class=3D"p"=
>{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line folded"><span class=3D"cm">/*** append buffer ***/</s=
pan></div><div class=3D"line folded"><span class=3D"cm">/*** output ***/</s=
pan></div><div class=3D"line folded"><span class=3D"cm">/*** input ***/</sp=
an></div><div class=3D"line folded"><span class=3D"cm">/*** init ***/</span=
></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>If we read an escape character, we immediately read two more bytes into =
the
<code>seq</code> buffer. If either of these reads time out (after 0.1 secon=
ds), then we
assume the user just pressed the <kbd>Escape</kbd> key and return that.
Otherwise we look to see if the escape sequence is an arrow key escape
sequence. If it is, we just return the corresponding
<kbd>w</kbd><kbd>a</kbd><kbd>s</kbd><kbd>d</kbd> character, for now. If it=
=E2=80=99s
not an escape sequence we recognize, we just return the escape character.</=
p>

<p>We make the <code>seq</code> buffer 3 bytes long because we will be hand=
ling longer escape
sequences in the future.</p>

<p>We have basically aliased the arrow keys to the
<kbd>w</kbd><kbd>a</kbd><kbd>s</kbd><kbd>d</kbd> keys. This gets the arrow =
keys
working immediately, but leaves the
<kbd>w</kbd><kbd>a</kbd><kbd>s</kbd><kbd>d</kbd> keys still mapped to the
<code>editorMoveCursor()</code> function. What we want is for <code>editorR=
eadKey()</code> to return
special values for each arrow key that let us identify that a particular ar=
row
key was pressed.</p>

<p>Let=E2=80=99s start by replacing each instance of the
<kbd>w</kbd><kbd>a</kbd><kbd>s</kbd><kbd>d</kbd> characters with the consta=
nts
<code>ARROW_UP</code>, <code>ARROW_LEFT</code>, <code>ARROW_DOWN</code>, an=
d <code>ARROW_RIGHT</code>.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/arrow-keys-enum/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 47</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/arrow-keys-enum">arrow-keys-enum</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line"><span class=3D"c=
m">/*** defines ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne"><span class=3D"cp">#define KILO_VERSION "0.0.1"</span></div><div class=
=3D"line"></div><div class=3D"line"><span class=3D"cp">#define CTRL_KEY(k) =
((k) &amp; 0x1f)</span></div><div class=3D"line"></div><ins class=3D"line">=
<span class=3D"k">enum</span> <span class=3D"n">editorKey</span> <span clas=
s=3D"p">{</span></ins><ins class=3D"line">  <span class=3D"n">ARROW_LEFT</s=
pan> <span class=3D"o">=3D</span> <span class=3D"sc">'a'</span><span class=
=3D"p">,</span></ins><ins class=3D"line">  <span class=3D"n">ARROW_RIGHT</s=
pan> <span class=3D"o">=3D</span> <span class=3D"sc">'d'</span><span class=
=3D"p">,</span></ins><ins class=3D"line">  <span class=3D"n">ARROW_UP</span=
> <span class=3D"o">=3D</span> <span class=3D"sc">'w'</span><span class=3D"=
p">,</span></ins><ins class=3D"line">  <span class=3D"n">ARROW_DOWN</span> =
<span class=3D"o">=3D</span> <span class=3D"sc">'s'</span></ins><ins class=
=3D"line"><span class=3D"p">};</span></ins><div class=3D"line"></div><div c=
lass=3D"line folded"><span class=3D"cm">/*** data ***/</span></div><div cla=
ss=3D"line"><span class=3D"cm">/*** terminal ***/</span></div><div class=3D=
"line"></div><div class=3D"line folded"><span class=3D"kt">void</span> <spa=
n class=3D"nf">die</span><span class=3D"p">(</span><span class=3D"k">const<=
/span> <span class=3D"kt">char</span> <span class=3D"o">*</span><span class=
=3D"n">s</span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=
=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D=
"line folded"><span class=3D"kt">void</span> <span class=3D"nf">disableRawM=
ode</span><span class=3D"p">()</span> <span class=3D"p">{</span> =E2=80=A6 =
<span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"lin=
e folded"><span class=3D"kt">void</span> <span class=3D"nf">enableRawMode</=
span><span class=3D"p">()</span> <span class=3D"p">{</span> =E2=80=A6 <span=
 class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line"><s=
pan class=3D"kt">char</span> <span class=3D"nf">editorReadKey</span><span c=
lass=3D"p">()</span> <span class=3D"p">{</span></div><div class=3D"line">  =
<span class=3D"kt">int</span> <span class=3D"n">nread</span><span class=3D"=
p">;</span></div><div class=3D"line">  <span class=3D"kt">char</span> <span=
 class=3D"n">c</span><span class=3D"p">;</span></div><div class=3D"line">  =
<span class=3D"k">while</span> <span class=3D"p">((</span><span class=3D"n"=
>nread</span> <span class=3D"o">=3D</span> <span class=3D"n">read</span><sp=
an class=3D"p">(</span><span class=3D"n">STDIN_FILENO</span><span class=3D"=
p">,</span> <span class=3D"o">&amp;</span><span class=3D"n">c</span><span c=
lass=3D"p">,</span> <span class=3D"mi">1</span><span class=3D"p">))</span> =
<span class=3D"o">!=3D</span> <span class=3D"mi">1</span><span class=3D"p">=
)</span> <span class=3D"p">{</span></div><div class=3D"line">    <span clas=
s=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">nread</span> =
<span class=3D"o">=3D=3D</span> <span class=3D"o">-</span><span class=3D"mi=
">1</span> <span class=3D"o">&amp;&amp;</span> <span class=3D"n">errno</spa=
n> <span class=3D"o">!=3D</span> <span class=3D"n">EAGAIN</span><span class=
=3D"p">)</span> <span class=3D"n">die</span><span class=3D"p">(</span><span=
 class=3D"s">"read"</span><span class=3D"p">);</span></div><div class=3D"li=
ne">  <span class=3D"p">}</span></div><div class=3D"line"></div><div class=
=3D"line">  <span class=3D"k">if</span> <span class=3D"p">(</span><span cla=
ss=3D"n">c</span> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'\x1b'=
</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div clas=
s=3D"line">    <span class=3D"kt">char</span> <span class=3D"n">seq</span><=
span class=3D"p">[</span><span class=3D"mi">3</span><span class=3D"p">];</s=
pan></div><div class=3D"line"></div><div class=3D"line">    <span class=3D"=
k">if</span> <span class=3D"p">(</span><span class=3D"n">read</span><span c=
lass=3D"p">(</span><span class=3D"n">STDIN_FILENO</span><span class=3D"p">,=
</span> <span class=3D"o">&amp;</span><span class=3D"n">seq</span><span cla=
ss=3D"p">[</span><span class=3D"mi">0</span><span class=3D"p">],</span> <sp=
an class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"o">!=3D</=
span> <span class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"=
k">return</span> <span class=3D"sc">'\x1b'</span><span class=3D"p">;</span>=
</div><div class=3D"line">    <span class=3D"k">if</span> <span class=3D"p"=
>(</span><span class=3D"n">read</span><span class=3D"p">(</span><span class=
=3D"n">STDIN_FILENO</span><span class=3D"p">,</span> <span class=3D"o">&amp=
;</span><span class=3D"n">seq</span><span class=3D"p">[</span><span class=
=3D"mi">1</span><span class=3D"p">],</span> <span class=3D"mi">1</span><spa=
n class=3D"p">)</span> <span class=3D"o">!=3D</span> <span class=3D"mi">1</=
span><span class=3D"p">)</span> <span class=3D"k">return</span> <span class=
=3D"sc">'\x1b'</span><span class=3D"p">;</span></div><div class=3D"line"></=
div><div class=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(=
</span><span class=3D"n">seq</span><span class=3D"p">[</span><span class=3D=
"mi">0</span><span class=3D"p">]</span> <span class=3D"o">=3D=3D</span> <sp=
an class=3D"sc">'['</span><span class=3D"p">)</span> <span class=3D"p">{</s=
pan></div><div class=3D"line">      <span class=3D"k">switch</span> <span c=
lass=3D"p">(</span><span class=3D"n">seq</span><span class=3D"p">[</span><s=
pan class=3D"mi">1</span><span class=3D"p">])</span> <span class=3D"p">{</s=
pan></div><ins class=3D"line">        <span class=3D"k">case</span> <span c=
lass=3D"sc">'A'</span><span class=3D"p">:</span> <span class=3D"k">return</=
span> <span class=3D"n">ARROW_UP</span><span class=3D"p">;</span></ins><ins=
 class=3D"line">        <span class=3D"k">case</span> <span class=3D"sc">'B=
'</span><span class=3D"p">:</span> <span class=3D"k">return</span> <span cl=
ass=3D"n">ARROW_DOWN</span><span class=3D"p">;</span></ins><ins class=3D"li=
ne">        <span class=3D"k">case</span> <span class=3D"sc">'C'</span><spa=
n class=3D"p">:</span> <span class=3D"k">return</span> <span class=3D"n">AR=
ROW_RIGHT</span><span class=3D"p">;</span></ins><ins class=3D"line">       =
 <span class=3D"k">case</span> <span class=3D"sc">'D'</span><span class=3D"=
p">:</span> <span class=3D"k">return</span> <span class=3D"n">ARROW_LEFT</s=
pan><span class=3D"p">;</span></ins><div class=3D"line">      <span class=
=3D"p">}</span></div><div class=3D"line">    <span class=3D"p">}</span></di=
v><div class=3D"line"></div><div class=3D"line">    <span class=3D"k">retur=
n</span> <span class=3D"sc">'\x1b'</span><span class=3D"p">;</span></div><d=
iv class=3D"line">  <span class=3D"p">}</span> <span class=3D"k">else</span=
> <span class=3D"p">{</span></div><div class=3D"line">    <span class=3D"k"=
>return</span> <span class=3D"n">c</span><span class=3D"p">;</span></div><d=
iv class=3D"line">  <span class=3D"p">}</span></div><div class=3D"line"><sp=
an class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line f=
olded"><span class=3D"kt">int</span> <span class=3D"nf">getCursorPosition</=
span><span class=3D"p">(</span><span class=3D"kt">int</span> <span class=3D=
"o">*</span><span class=3D"n">rows</span><span class=3D"p">,</span> <span c=
lass=3D"kt">int</span> <span class=3D"o">*</span><span class=3D"n">cols</sp=
an><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span cl=
ass=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line folded=
"><span class=3D"kt">int</span> <span class=3D"nf">getWindowSize</span><spa=
n class=3D"p">(</span><span class=3D"kt">int</span> <span class=3D"o">*</sp=
an><span class=3D"n">rows</span><span class=3D"p">,</span> <span class=3D"k=
t">int</span> <span class=3D"o">*</span><span class=3D"n">cols</span><span =
class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p"=
>}</span></div><div class=3D"line"></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** append buffer ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** output ***/</span></div><div class=3D"line"><span c=
lass=3D"cm">/*** input ***/</span></div><div class=3D"line"></div><div clas=
s=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">editorMoveCurs=
or</span><span class=3D"p">(</span><span class=3D"kt">char</span> <span cla=
ss=3D"n">key</span><span class=3D"p">)</span> <span class=3D"p">{</span></d=
iv><div class=3D"line">  <span class=3D"k">switch</span> <span class=3D"p">=
(</span><span class=3D"n">key</span><span class=3D"p">)</span> <span class=
=3D"p">{</span></div><ins class=3D"line">    <span class=3D"k">case</span> =
<span class=3D"n">ARROW_LEFT</span><span class=3D"p">:</span></ins><div cla=
ss=3D"line">      <span class=3D"n">E</span><span class=3D"p">.</span><span=
 class=3D"n">cx</span><span class=3D"o">--</span><span class=3D"p">;</span>=
</div><div class=3D"line">      <span class=3D"k">break</span><span class=
=3D"p">;</span></div><ins class=3D"line">    <span class=3D"k">case</span> =
<span class=3D"n">ARROW_RIGHT</span><span class=3D"p">:</span></ins><div cl=
ass=3D"line">      <span class=3D"n">E</span><span class=3D"p">.</span><spa=
n class=3D"n">cx</span><span class=3D"o">++</span><span class=3D"p">;</span=
></div><div class=3D"line">      <span class=3D"k">break</span><span class=
=3D"p">;</span></div><ins class=3D"line">    <span class=3D"k">case</span> =
<span class=3D"n">ARROW_UP</span><span class=3D"p">:</span></ins><div class=
=3D"line">      <span class=3D"n">E</span><span class=3D"p">.</span><span c=
lass=3D"n">cy</span><span class=3D"o">--</span><span class=3D"p">;</span></=
div><div class=3D"line">      <span class=3D"k">break</span><span class=3D"=
p">;</span></div><ins class=3D"line">    <span class=3D"k">case</span> <spa=
n class=3D"n">ARROW_DOWN</span><span class=3D"p">:</span></ins><div class=
=3D"line">      <span class=3D"n">E</span><span class=3D"p">.</span><span c=
lass=3D"n">cy</span><span class=3D"o">++</span><span class=3D"p">;</span></=
div><div class=3D"line">      <span class=3D"k">break</span><span class=3D"=
p">;</span></div><div class=3D"line">  <span class=3D"p">}</span></div><div=
 class=3D"line"><span class=3D"p">}</span></div><div class=3D"line"></div><=
div class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">editor=
ProcessKeypress</span><span class=3D"p">()</span> <span class=3D"p">{</span=
></div><div class=3D"line">  <span class=3D"kt">char</span> <span class=3D"=
n">c</span> <span class=3D"o">=3D</span> <span class=3D"n">editorReadKey</s=
pan><span class=3D"p">();</span></div><div class=3D"line"></div><div class=
=3D"line">  <span class=3D"k">switch</span> <span class=3D"p">(</span><span=
 class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p">{</span><=
/div><div class=3D"line">    <span class=3D"k">case</span> <span class=3D"n=
">CTRL_KEY</span><span class=3D"p">(</span><span class=3D"sc">'q'</span><sp=
an class=3D"p">):</span></div><div class=3D"line">      <span class=3D"n">w=
rite</span><span class=3D"p">(</span><span class=3D"n">STDOUT_FILENO</span>=
<span class=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\x1=
b</span><span class=3D"s">[2J"</span><span class=3D"p">,</span> <span class=
=3D"mi">4</span><span class=3D"p">);</span></div><div class=3D"line">      =
<span class=3D"n">write</span><span class=3D"p">(</span><span class=3D"n">S=
TDOUT_FILENO</span><span class=3D"p">,</span> <span class=3D"s">"</span><sp=
an class=3D"se">\x1b</span><span class=3D"s">[H"</span><span class=3D"p">,<=
/span> <span class=3D"mi">3</span><span class=3D"p">);</span></div><div cla=
ss=3D"line">      <span class=3D"n">exit</span><span class=3D"p">(</span><s=
pan class=3D"mi">0</span><span class=3D"p">);</span></div><div class=3D"lin=
e">      <span class=3D"k">break</span><span class=3D"p">;</span></div><div=
 class=3D"line"></div><ins class=3D"line">    <span class=3D"k">case</span>=
 <span class=3D"n">ARROW_UP</span><span class=3D"p">:</span></ins><ins clas=
s=3D"line">    <span class=3D"k">case</span> <span class=3D"n">ARROW_DOWN</=
span><span class=3D"p">:</span></ins><ins class=3D"line">    <span class=3D=
"k">case</span> <span class=3D"n">ARROW_LEFT</span><span class=3D"p">:</spa=
n></ins><ins class=3D"line">    <span class=3D"k">case</span> <span class=
=3D"n">ARROW_RIGHT</span><span class=3D"p">:</span></ins><div class=3D"line=
">      <span class=3D"n">editorMoveCursor</span><span class=3D"p">(</span>=
<span class=3D"n">c</span><span class=3D"p">);</span></div><div class=3D"li=
ne">      <span class=3D"k">break</span><span class=3D"p">;</span></div><di=
v class=3D"line">  <span class=3D"p">}</span></div><div class=3D"line"><spa=
n class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line fo=
lded"><span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>Now we just have to choose a representation for arrow keys that doesn=E2=
=80=99t
conflict with <kbd>w</kbd><kbd>a</kbd><kbd>s</kbd><kbd>d</kbd>, in the
<code>editorKey</code> enum. We will give them a large integer value that i=
s out of the
range of a <code>char</code>, so that they don=E2=80=99t conflict with any =
ordinary keypresses. We
will also have to change all variables that store keypresses to be of type
<code>int</code> instead of <code>char</code>.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/arrow-keys-int/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 48</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/arrow-keys-int">arrow-keys-int</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line"><span class=3D"c=
m">/*** defines ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne"><span class=3D"cp">#define KILO_VERSION "0.0.1"</span></div><div class=
=3D"line"></div><div class=3D"line"><span class=3D"cp">#define CTRL_KEY(k) =
((k) &amp; 0x1f)</span></div><div class=3D"line"></div><div class=3D"line">=
<span class=3D"k">enum</span> <span class=3D"n">editorKey</span> <span clas=
s=3D"p">{</span></div><ins class=3D"line">  <span class=3D"n">ARROW_LEFT</s=
pan> <span class=3D"o">=3D</span> <span class=3D"mi">1000</span><span class=
=3D"p">,</span></ins><ins class=3D"line">  <span class=3D"n">ARROW_RIGHT</s=
pan><span class=3D"p">,</span></ins><ins class=3D"line">  <span class=3D"n"=
>ARROW_UP</span><span class=3D"p">,</span></ins><ins class=3D"line">  <span=
 class=3D"n">ARROW_DOWN</span></ins><div class=3D"line"><span class=3D"p">}=
;</span></div><div class=3D"line"></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line"><span class=3D"cm=
">/*** terminal ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne folded"><span class=3D"kt">void</span> <span class=3D"nf">die</span><spa=
n class=3D"p">(</span><span class=3D"k">const</span> <span class=3D"kt">cha=
r</span> <span class=3D"o">*</span><span class=3D"n">s</span><span class=3D=
"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span=
></div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"=
kt">void</span> <span class=3D"nf">disableRawMode</span><span class=3D"p">(=
)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></d=
iv><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">=
void</span> <span class=3D"nf">enableRawMode</span><span class=3D"p">()</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><d=
iv class=3D"line"></div><ins class=3D"line"><span class=3D"kt">int</span> <=
span class=3D"n">editorReadKey</span><span class=3D"p">()</span> <span clas=
s=3D"p">{</span></ins><div class=3D"line">  <span class=3D"kt">int</span> <=
span class=3D"n">nread</span><span class=3D"p">;</span></div><div class=3D"=
line">  <span class=3D"kt">char</span> <span class=3D"n">c</span><span clas=
s=3D"p">;</span></div><div class=3D"line">  <span class=3D"k">while</span> =
<span class=3D"p">((</span><span class=3D"n">nread</span> <span class=3D"o"=
>=3D</span> <span class=3D"n">read</span><span class=3D"p">(</span><span cl=
ass=3D"n">STDIN_FILENO</span><span class=3D"p">,</span> <span class=3D"o">&=
amp;</span><span class=3D"n">c</span><span class=3D"p">,</span> <span class=
=3D"mi">1</span><span class=3D"p">))</span> <span class=3D"o">!=3D</span> <=
span class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"p">{</s=
pan></div><div class=3D"line">    <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"n">nread</span> <span class=3D"o">=3D=3D</spa=
n> <span class=3D"o">-</span><span class=3D"mi">1</span> <span class=3D"o">=
&amp;&amp;</span> <span class=3D"n">errno</span> <span class=3D"o">!=3D</sp=
an> <span class=3D"n">EAGAIN</span><span class=3D"p">)</span> <span class=
=3D"n">die</span><span class=3D"p">(</span><span class=3D"s">"read"</span><=
span class=3D"p">);</span></div><div class=3D"line">  <span class=3D"p">}</=
span></div><div class=3D"line"></div><div class=3D"line">  <span class=3D"k=
">if</span> <span class=3D"p">(</span><span class=3D"n">c</span> <span clas=
s=3D"o">=3D=3D</span> <span class=3D"sc">'\x1b'</span><span class=3D"p">)</=
span> <span class=3D"p">{</span></div><div class=3D"line">    <span class=
=3D"kt">char</span> <span class=3D"n">seq</span><span class=3D"p">[</span><=
span class=3D"mi">3</span><span class=3D"p">];</span></div><div class=3D"li=
ne"></div><div class=3D"line">    <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"n">read</span><span class=3D"p">(</span><span=
 class=3D"n">STDIN_FILENO</span><span class=3D"p">,</span> <span class=3D"o=
">&amp;</span><span class=3D"n">seq</span><span class=3D"p">[</span><span c=
lass=3D"mi">0</span><span class=3D"p">],</span> <span class=3D"mi">1</span>=
<span class=3D"p">)</span> <span class=3D"o">!=3D</span> <span class=3D"mi"=
>1</span><span class=3D"p">)</span> <span class=3D"k">return</span> <span c=
lass=3D"sc">'\x1b'</span><span class=3D"p">;</span></div><div class=3D"line=
">    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"=
n">read</span><span class=3D"p">(</span><span class=3D"n">STDIN_FILENO</spa=
n><span class=3D"p">,</span> <span class=3D"o">&amp;</span><span class=3D"n=
">seq</span><span class=3D"p">[</span><span class=3D"mi">1</span><span clas=
s=3D"p">],</span> <span class=3D"mi">1</span><span class=3D"p">)</span> <sp=
an class=3D"o">!=3D</span> <span class=3D"mi">1</span><span class=3D"p">)</=
span> <span class=3D"k">return</span> <span class=3D"sc">'\x1b'</span><span=
 class=3D"p">;</span></div><div class=3D"line"></div><div class=3D"line">  =
  <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">s=
eq</span><span class=3D"p">[</span><span class=3D"mi">0</span><span class=
=3D"p">]</span> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'['</spa=
n><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"=
line">      <span class=3D"k">switch</span> <span class=3D"p">(</span><span=
 class=3D"n">seq</span><span class=3D"p">[</span><span class=3D"mi">1</span=
><span class=3D"p">])</span> <span class=3D"p">{</span></div><div class=3D"=
line">        <span class=3D"k">case</span> <span class=3D"sc">'A'</span><s=
pan class=3D"p">:</span> <span class=3D"k">return</span> <span class=3D"n">=
ARROW_UP</span><span class=3D"p">;</span></div><div class=3D"line">        =
<span class=3D"k">case</span> <span class=3D"sc">'B'</span><span class=3D"p=
">:</span> <span class=3D"k">return</span> <span class=3D"n">ARROW_DOWN</sp=
an><span class=3D"p">;</span></div><div class=3D"line">        <span class=
=3D"k">case</span> <span class=3D"sc">'C'</span><span class=3D"p">:</span> =
<span class=3D"k">return</span> <span class=3D"n">ARROW_RIGHT</span><span c=
lass=3D"p">;</span></div><div class=3D"line">        <span class=3D"k">case=
</span> <span class=3D"sc">'D'</span><span class=3D"p">:</span> <span class=
=3D"k">return</span> <span class=3D"n">ARROW_LEFT</span><span class=3D"p">;=
</span></div><div class=3D"line">      <span class=3D"p">}</span></div><div=
 class=3D"line">    <span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line">    <span class=3D"k">return</span> <span class=3D"s=
c">'\x1b'</span><span class=3D"p">;</span></div><div class=3D"line">  <span=
 class=3D"p">}</span> <span class=3D"k">else</span> <span class=3D"p">{</sp=
an></div><div class=3D"line">    <span class=3D"k">return</span> <span clas=
s=3D"n">c</span><span class=3D"p">;</span></div><div class=3D"line">  <span=
 class=3D"p">}</span></div><div class=3D"line"><span class=3D"p">}</span></=
div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt"=
>int</span> <span class=3D"n">getCursorPosition</span><span class=3D"p">(</=
span><span class=3D"kt">int</span> <span class=3D"o">*</span><span class=3D=
"n">rows</span><span class=3D"p">,</span> <span class=3D"kt">int</span> <sp=
an class=3D"o">*</span><span class=3D"n">cols</span><span class=3D"p">)</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><d=
iv class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">int</=
span> <span class=3D"n">getWindowSize</span><span class=3D"p">(</span><span=
 class=3D"kt">int</span> <span class=3D"o">*</span><span class=3D"n">rows</=
span><span class=3D"p">,</span> <span class=3D"kt">int</span> <span class=
=3D"o">*</span><span class=3D"n">cols</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=
=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/*** append b=
uffer ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** o=
utput ***/</span></div><div class=3D"line"><span class=3D"cm">/*** input **=
*/</span></div><div class=3D"line"></div><ins class=3D"line"><span class=3D=
"kt">void</span> <span class=3D"n">editorMoveCursor</span><span class=3D"p"=
>(</span><span class=3D"kt">int</span> <span class=3D"n">key</span><span cl=
ass=3D"p">)</span> <span class=3D"p">{</span></ins><div class=3D"line">  <s=
pan class=3D"k">switch</span> <span class=3D"p">(</span><span class=3D"n">k=
ey</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div cl=
ass=3D"line">    <span class=3D"k">case</span> <span class=3D"n">ARROW_LEFT=
</span><span class=3D"p">:</span></div><div class=3D"line">      <span clas=
s=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">cx</span><span =
class=3D"o">--</span><span class=3D"p">;</span></div><div class=3D"line">  =
    <span class=3D"k">break</span><span class=3D"p">;</span></div><div clas=
s=3D"line">    <span class=3D"k">case</span> <span class=3D"n">ARROW_RIGHT<=
/span><span class=3D"p">:</span></div><div class=3D"line">      <span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">cx</span><span c=
lass=3D"o">++</span><span class=3D"p">;</span></div><div class=3D"line">   =
   <span class=3D"k">break</span><span class=3D"p">;</span></div><div class=
=3D"line">    <span class=3D"k">case</span> <span class=3D"n">ARROW_UP</spa=
n><span class=3D"p">:</span></div><div class=3D"line">      <span class=3D"=
n">E</span><span class=3D"p">.</span><span class=3D"n">cy</span><span class=
=3D"o">--</span><span class=3D"p">;</span></div><div class=3D"line">      <=
span class=3D"k">break</span><span class=3D"p">;</span></div><div class=3D"=
line">    <span class=3D"k">case</span> <span class=3D"n">ARROW_DOWN</span>=
<span class=3D"p">:</span></div><div class=3D"line">      <span class=3D"n"=
>E</span><span class=3D"p">.</span><span class=3D"n">cy</span><span class=
=3D"o">++</span><span class=3D"p">;</span></div><div class=3D"line">      <=
span class=3D"k">break</span><span class=3D"p">;</span></div><div class=3D"=
line">  <span class=3D"p">}</span></div><div class=3D"line"><span class=3D"=
p">}</span></div><div class=3D"line"></div><div class=3D"line"><span class=
=3D"kt">void</span> <span class=3D"n">editorProcessKeypress</span><span cla=
ss=3D"p">()</span> <span class=3D"p">{</span></div><ins class=3D"line">  <s=
pan class=3D"kt">int</span> <span class=3D"n">c</span> <span class=3D"o">=
=3D</span> <span class=3D"n">editorReadKey</span><span class=3D"p">();</spa=
n></ins><div class=3D"line"></div><div class=3D"line">  <span class=3D"k">s=
witch</span> <span class=3D"p">(</span><span class=3D"n">c</span><span clas=
s=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line">    <s=
pan class=3D"k">case</span> <span class=3D"n">CTRL_KEY</span><span class=3D=
"p">(</span><span class=3D"sc">'q'</span><span class=3D"p">):</span></div><=
div class=3D"line">      <span class=3D"n">write</span><span class=3D"p">(<=
/span><span class=3D"n">STDOUT_FILENO</span><span class=3D"p">,</span> <spa=
n class=3D"s">"</span><span class=3D"se">\x1b</span><span class=3D"s">[2J"<=
/span><span class=3D"p">,</span> <span class=3D"mi">4</span><span class=3D"=
p">);</span></div><div class=3D"line">      <span class=3D"n">write</span><=
span class=3D"p">(</span><span class=3D"n">STDOUT_FILENO</span><span class=
=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\x1b</span><sp=
an class=3D"s">[H"</span><span class=3D"p">,</span> <span class=3D"mi">3</s=
pan><span class=3D"p">);</span></div><div class=3D"line">      <span class=
=3D"n">exit</span><span class=3D"p">(</span><span class=3D"mi">0</span><spa=
n class=3D"p">);</span></div><div class=3D"line">      <span class=3D"k">br=
eak</span><span class=3D"p">;</span></div><div class=3D"line"></div><div cl=
ass=3D"line">    <span class=3D"k">case</span> <span class=3D"n">ARROW_UP</=
span><span class=3D"p">:</span></div><div class=3D"line">    <span class=3D=
"k">case</span> <span class=3D"n">ARROW_DOWN</span><span class=3D"p">:</spa=
n></div><div class=3D"line">    <span class=3D"k">case</span> <span class=
=3D"n">ARROW_LEFT</span><span class=3D"p">:</span></div><div class=3D"line"=
>    <span class=3D"k">case</span> <span class=3D"n">ARROW_RIGHT</span><spa=
n class=3D"p">:</span></div><div class=3D"line">      <span class=3D"n">edi=
torMoveCursor</span><span class=3D"p">(</span><span class=3D"n">c</span><sp=
an class=3D"p">);</span></div><div class=3D"line">      <span class=3D"k">b=
reak</span><span class=3D"p">;</span></div><div class=3D"line">  <span clas=
s=3D"p">}</span></div><div class=3D"line"><span class=3D"p">}</span></div><=
div class=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/***=
 init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>By setting the first constant in the enum to <code>1000</code>, the rest=
 of the constants
get incrementing values of <code>1001</code>, <code>1002</code>, <code>1003=
</code>, and so on.</p>

<p>That concludes our arrow key handling code. At this point, it can be fun=
 to try
entering an escape sequence manually while the program runs. Try pressing t=
he
<kbd>Escape</kbd> key, the <kbd>[</kbd> key, and <kbd>Shift+C</kbd>
in sequence really fast, and you may
see your keypresses being interpreted as the right arrow key being pressed.=
 You
have to be pretty fast to do it, so you may want to adjust the <code>VTIME<=
/code> value
in <code>enableRawMode()</code> temporarily, to make it easier. (It also he=
lps to know
that pressing <kbd>Ctrl-[</kbd> is the same as pressing the <kbd>Escape</kb=
d>
key, for the same reason that <kbd>Ctrl-M</kbd> is the same as pressing
<kbd>Enter</kbd>: <kbd>Ctrl</kbd> clears the 6th and 7th bits of the charac=
ter
you type in combination with it.)</p>
<h2 id=3D"prevent-moving-the-cursor-off-screen"><a href=3D"https://viewsour=
cecode.org/snaptoken/kilo/03.rawInputAndOutput.html#prevent-moving-the-curs=
or-off-screen">Prevent moving the cursor off screen</a></h2>

<p>Currently, you can cause the <code>E.cx</code> and <code>E.cy</code> val=
ues to go into the negatives,
or go past the right and bottom edges of the screen. Let=E2=80=99s prevent =
that by
doing some bounds checking in <code>editorMoveCursor()</code>.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/off-screen/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 49</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/off-screen">off-screen</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** append buffer ***/</span></div><div class=3D"line folded"><=
span class=3D"cm">/*** output ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** input ***/</span></div><div class=3D"line"></div><div class=
=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">editorMoveCurso=
r</span><span class=3D"p">(</span><span class=3D"kt">int</span> <span class=
=3D"n">key</span><span class=3D"p">)</span> <span class=3D"p">{</span></div=
><div class=3D"line">  <span class=3D"k">switch</span> <span class=3D"p">(<=
/span><span class=3D"n">key</span><span class=3D"p">)</span> <span class=3D=
"p">{</span></div><div class=3D"line">    <span class=3D"k">case</span> <sp=
an class=3D"n">ARROW_LEFT</span><span class=3D"p">:</span></div><ins class=
=3D"line">      <span class=3D"k">if</span> <span class=3D"p">(</span><span=
 class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">cx</span> =
<span class=3D"o">!=3D</span> <span class=3D"mi">0</span><span class=3D"p">=
)</span> <span class=3D"p">{</span></ins><div class=3D"line">        <span =
class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">cx</span><s=
pan class=3D"o">--</span><span class=3D"p">;</span></div><ins class=3D"line=
">      <span class=3D"p">}</span></ins><div class=3D"line">      <span cla=
ss=3D"k">break</span><span class=3D"p">;</span></div><div class=3D"line">  =
  <span class=3D"k">case</span> <span class=3D"n">ARROW_RIGHT</span><span c=
lass=3D"p">:</span></div><ins class=3D"line">      <span class=3D"k">if</sp=
an> <span class=3D"p">(</span><span class=3D"n">E</span><span class=3D"p">.=
</span><span class=3D"n">cx</span> <span class=3D"o">!=3D</span> <span clas=
s=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screencols</spa=
n> <span class=3D"o">-</span> <span class=3D"mi">1</span><span class=3D"p">=
)</span> <span class=3D"p">{</span></ins><div class=3D"line">        <span =
class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">cx</span><s=
pan class=3D"o">++</span><span class=3D"p">;</span></div><ins class=3D"line=
">      <span class=3D"p">}</span></ins><div class=3D"line">      <span cla=
ss=3D"k">break</span><span class=3D"p">;</span></div><div class=3D"line">  =
  <span class=3D"k">case</span> <span class=3D"n">ARROW_UP</span><span clas=
s=3D"p">:</span></div><ins class=3D"line">      <span class=3D"k">if</span>=
 <span class=3D"p">(</span><span class=3D"n">E</span><span class=3D"p">.</s=
pan><span class=3D"n">cy</span> <span class=3D"o">!=3D</span> <span class=
=3D"mi">0</span><span class=3D"p">)</span> <span class=3D"p">{</span></ins>=
<div class=3D"line">        <span class=3D"n">E</span><span class=3D"p">.</=
span><span class=3D"n">cy</span><span class=3D"o">--</span><span class=3D"p=
">;</span></div><ins class=3D"line">      <span class=3D"p">}</span></ins><=
div class=3D"line">      <span class=3D"k">break</span><span class=3D"p">;<=
/span></div><div class=3D"line">    <span class=3D"k">case</span> <span cla=
ss=3D"n">ARROW_DOWN</span><span class=3D"p">:</span></div><ins class=3D"lin=
e">      <span class=3D"k">if</span> <span class=3D"p">(</span><span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">cy</span> <span =
class=3D"o">!=3D</span> <span class=3D"n">E</span><span class=3D"p">.</span=
><span class=3D"n">screenrows</span> <span class=3D"o">-</span> <span class=
=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"p">{</span></ins>=
<div class=3D"line">        <span class=3D"n">E</span><span class=3D"p">.</=
span><span class=3D"n">cy</span><span class=3D"o">++</span><span class=3D"p=
">;</span></div><ins class=3D"line">      <span class=3D"p">}</span></ins><=
div class=3D"line">      <span class=3D"k">break</span><span class=3D"p">;<=
/span></div><div class=3D"line">  <span class=3D"p">}</span></div><div clas=
s=3D"line"><span class=3D"p">}</span></div><div class=3D"line"></div><div c=
lass=3D"line folded"><span class=3D"kt">void</span> <span class=3D"nf">edit=
orProcessKeypress</span><span class=3D"p">()</span> <span class=3D"p">{</sp=
an> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><di=
v class=3D"line folded"><span class=3D"cm">/*** init ***/</span></div></cod=
e></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>

<h2 id=3D"the-page-up-and-page-down-keys"><a href=3D"https://viewsourcecode=
.org/snaptoken/kilo/03.rawInputAndOutput.html#the-page-up-and-page-down-key=
s">The <kbd>Page Up</kbd> and <kbd>Page Down</kbd> keys</a></h2>

<p>To complete our low-level terminal code, we need to detect a few more sp=
ecial
keypresses that use escape sequences, like the arrow keys did. We=E2=80=99l=
l start with
the <kbd>Page Up</kbd> and <kbd>Page Down</kbd> keys. <kbd>Page Up</kbd> is
sent as <code>&lt;esc&gt;[5~</code> and <kbd>Page Down</kbd> is sent as <co=
de>&lt;esc&gt;[6~</code>.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/detect-page-up-down/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 50</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/detect-page-up-down">detect-page-up-down</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line"><span class=3D"c=
m">/*** defines ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne"><span class=3D"cp">#define KILO_VERSION "0.0.1"</span></div><div class=
=3D"line"></div><div class=3D"line"><span class=3D"cp">#define CTRL_KEY(k) =
((k) &amp; 0x1f)</span></div><div class=3D"line"></div><div class=3D"line">=
<span class=3D"k">enum</span> <span class=3D"n">editorKey</span> <span clas=
s=3D"p">{</span></div><div class=3D"line">  <span class=3D"n">ARROW_LEFT</s=
pan> <span class=3D"o">=3D</span> <span class=3D"mi">1000</span><span class=
=3D"p">,</span></div><div class=3D"line">  <span class=3D"n">ARROW_RIGHT</s=
pan><span class=3D"p">,</span></div><div class=3D"line">  <span class=3D"n"=
>ARROW_UP</span><span class=3D"p">,</span></div><ins class=3D"line">  <span=
 class=3D"n">ARROW_DOWN</span><span class=3D"p">,</span></ins><ins class=3D=
"line">  <span class=3D"n">PAGE_UP</span><span class=3D"p">,</span></ins><i=
ns class=3D"line">  <span class=3D"n">PAGE_DOWN</span></ins><div class=3D"l=
ine"><span class=3D"p">};</span></div><div class=3D"line"></div><div class=
=3D"line folded"><span class=3D"cm">/*** data ***/</span></div><div class=
=3D"line"><span class=3D"cm">/*** terminal ***/</span></div><div class=3D"l=
ine"></div><div class=3D"line folded"><span class=3D"kt">void</span> <span =
class=3D"nf">die</span><span class=3D"p">(</span><span class=3D"k">const</s=
pan> <span class=3D"kt">char</span> <span class=3D"o">*</span><span class=
=3D"n">s</span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=
=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D=
"line folded"><span class=3D"kt">void</span> <span class=3D"nf">disableRawM=
ode</span><span class=3D"p">()</span> <span class=3D"p">{</span> =E2=80=A6 =
<span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"lin=
e folded"><span class=3D"kt">void</span> <span class=3D"nf">enableRawMode</=
span><span class=3D"p">()</span> <span class=3D"p">{</span> =E2=80=A6 <span=
 class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line"><s=
pan class=3D"kt">int</span> <span class=3D"nf">editorReadKey</span><span cl=
ass=3D"p">()</span> <span class=3D"p">{</span></div><div class=3D"line">  <=
span class=3D"kt">int</span> <span class=3D"n">nread</span><span class=3D"p=
">;</span></div><div class=3D"line">  <span class=3D"kt">char</span> <span =
class=3D"n">c</span><span class=3D"p">;</span></div><div class=3D"line">  <=
span class=3D"k">while</span> <span class=3D"p">((</span><span class=3D"n">=
nread</span> <span class=3D"o">=3D</span> <span class=3D"n">read</span><spa=
n class=3D"p">(</span><span class=3D"n">STDIN_FILENO</span><span class=3D"p=
">,</span> <span class=3D"o">&amp;</span><span class=3D"n">c</span><span cl=
ass=3D"p">,</span> <span class=3D"mi">1</span><span class=3D"p">))</span> <=
span class=3D"o">!=3D</span> <span class=3D"mi">1</span><span class=3D"p">)=
</span> <span class=3D"p">{</span></div><div class=3D"line">    <span class=
=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">nread</span> <=
span class=3D"o">=3D=3D</span> <span class=3D"o">-</span><span class=3D"mi"=
>1</span> <span class=3D"o">&amp;&amp;</span> <span class=3D"n">errno</span=
> <span class=3D"o">!=3D</span> <span class=3D"n">EAGAIN</span><span class=
=3D"p">)</span> <span class=3D"n">die</span><span class=3D"p">(</span><span=
 class=3D"s">"read"</span><span class=3D"p">);</span></div><div class=3D"li=
ne">  <span class=3D"p">}</span></div><div class=3D"line"></div><div class=
=3D"line">  <span class=3D"k">if</span> <span class=3D"p">(</span><span cla=
ss=3D"n">c</span> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'\x1b'=
</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div clas=
s=3D"line">    <span class=3D"kt">char</span> <span class=3D"n">seq</span><=
span class=3D"p">[</span><span class=3D"mi">3</span><span class=3D"p">];</s=
pan></div><div class=3D"line"></div><div class=3D"line">    <span class=3D"=
k">if</span> <span class=3D"p">(</span><span class=3D"n">read</span><span c=
lass=3D"p">(</span><span class=3D"n">STDIN_FILENO</span><span class=3D"p">,=
</span> <span class=3D"o">&amp;</span><span class=3D"n">seq</span><span cla=
ss=3D"p">[</span><span class=3D"mi">0</span><span class=3D"p">],</span> <sp=
an class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"o">!=3D</=
span> <span class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"=
k">return</span> <span class=3D"sc">'\x1b'</span><span class=3D"p">;</span>=
</div><div class=3D"line">    <span class=3D"k">if</span> <span class=3D"p"=
>(</span><span class=3D"n">read</span><span class=3D"p">(</span><span class=
=3D"n">STDIN_FILENO</span><span class=3D"p">,</span> <span class=3D"o">&amp=
;</span><span class=3D"n">seq</span><span class=3D"p">[</span><span class=
=3D"mi">1</span><span class=3D"p">],</span> <span class=3D"mi">1</span><spa=
n class=3D"p">)</span> <span class=3D"o">!=3D</span> <span class=3D"mi">1</=
span><span class=3D"p">)</span> <span class=3D"k">return</span> <span class=
=3D"sc">'\x1b'</span><span class=3D"p">;</span></div><div class=3D"line"></=
div><div class=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(=
</span><span class=3D"n">seq</span><span class=3D"p">[</span><span class=3D=
"mi">0</span><span class=3D"p">]</span> <span class=3D"o">=3D=3D</span> <sp=
an class=3D"sc">'['</span><span class=3D"p">)</span> <span class=3D"p">{</s=
pan></div><ins class=3D"line">      <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"n">seq</span><span class=3D"p">[</span><span =
class=3D"mi">1</span><span class=3D"p">]</span> <span class=3D"o">&gt;=3D</=
span> <span class=3D"sc">'0'</span> <span class=3D"o">&amp;&amp;</span> <sp=
an class=3D"n">seq</span><span class=3D"p">[</span><span class=3D"mi">1</sp=
an><span class=3D"p">]</span> <span class=3D"o">&lt;=3D</span> <span class=
=3D"sc">'9'</span><span class=3D"p">)</span> <span class=3D"p">{</span></in=
s><ins class=3D"line">        <span class=3D"k">if</span> <span class=3D"p"=
>(</span><span class=3D"n">read</span><span class=3D"p">(</span><span class=
=3D"n">STDIN_FILENO</span><span class=3D"p">,</span> <span class=3D"o">&amp=
;</span><span class=3D"n">seq</span><span class=3D"p">[</span><span class=
=3D"mi">2</span><span class=3D"p">],</span> <span class=3D"mi">1</span><spa=
n class=3D"p">)</span> <span class=3D"o">!=3D</span> <span class=3D"mi">1</=
span><span class=3D"p">)</span> <span class=3D"k">return</span> <span class=
=3D"sc">'\x1b'</span><span class=3D"p">;</span></ins><ins class=3D"line">  =
      <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"=
n">seq</span><span class=3D"p">[</span><span class=3D"mi">2</span><span cla=
ss=3D"p">]</span> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'~'</s=
pan><span class=3D"p">)</span> <span class=3D"p">{</span></ins><ins class=
=3D"line">          <span class=3D"k">switch</span> <span class=3D"p">(</sp=
an><span class=3D"n">seq</span><span class=3D"p">[</span><span class=3D"mi"=
>1</span><span class=3D"p">])</span> <span class=3D"p">{</span></ins><ins c=
lass=3D"line">            <span class=3D"k">case</span> <span class=3D"sc">=
'5'</span><span class=3D"p">:</span> <span class=3D"k">return</span> <span =
class=3D"n">PAGE_UP</span><span class=3D"p">;</span></ins><ins class=3D"lin=
e">            <span class=3D"k">case</span> <span class=3D"sc">'6'</span><=
span class=3D"p">:</span> <span class=3D"k">return</span> <span class=3D"n"=
>PAGE_DOWN</span><span class=3D"p">;</span></ins><ins class=3D"line">      =
    <span class=3D"p">}</span></ins><ins class=3D"line">        <span class=
=3D"p">}</span></ins><ins class=3D"line">      <span class=3D"p">}</span> <=
span class=3D"k">else</span> <span class=3D"p">{</span></ins><div class=3D"=
line">        <span class=3D"k">switch</span> <span class=3D"p">(</span><sp=
an class=3D"n">seq</span><span class=3D"p">[</span><span class=3D"mi">1</sp=
an><span class=3D"p">])</span> <span class=3D"p">{</span></div><div class=
=3D"line">          <span class=3D"k">case</span> <span class=3D"sc">'A'</s=
pan><span class=3D"p">:</span> <span class=3D"k">return</span> <span class=
=3D"n">ARROW_UP</span><span class=3D"p">;</span></div><div class=3D"line"> =
         <span class=3D"k">case</span> <span class=3D"sc">'B'</span><span c=
lass=3D"p">:</span> <span class=3D"k">return</span> <span class=3D"n">ARROW=
_DOWN</span><span class=3D"p">;</span></div><div class=3D"line">          <=
span class=3D"k">case</span> <span class=3D"sc">'C'</span><span class=3D"p"=
>:</span> <span class=3D"k">return</span> <span class=3D"n">ARROW_RIGHT</sp=
an><span class=3D"p">;</span></div><div class=3D"line">          <span clas=
s=3D"k">case</span> <span class=3D"sc">'D'</span><span class=3D"p">:</span>=
 <span class=3D"k">return</span> <span class=3D"n">ARROW_LEFT</span><span c=
lass=3D"p">;</span></div><div class=3D"line">        <span class=3D"p">}</s=
pan></div><div class=3D"line">      <span class=3D"p">}</span></div><ins cl=
ass=3D"line">    <span class=3D"p">}</span></ins><div class=3D"line"></div>=
<div class=3D"line">    <span class=3D"k">return</span> <span class=3D"sc">=
'\x1b'</span><span class=3D"p">;</span></div><div class=3D"line">  <span cl=
ass=3D"p">}</span> <span class=3D"k">else</span> <span class=3D"p">{</span>=
</div><div class=3D"line">    <span class=3D"k">return</span> <span class=
=3D"n">c</span><span class=3D"p">;</span></div><div class=3D"line">  <span =
class=3D"p">}</span></div><div class=3D"line"><span class=3D"p">}</span></d=
iv><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">=
int</span> <span class=3D"nf">getCursorPosition</span><span class=3D"p">(</=
span><span class=3D"kt">int</span> <span class=3D"o">*</span><span class=3D=
"n">rows</span><span class=3D"p">,</span> <span class=3D"kt">int</span> <sp=
an class=3D"o">*</span><span class=3D"n">cols</span><span class=3D"p">)</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><d=
iv class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">int</=
span> <span class=3D"nf">getWindowSize</span><span class=3D"p">(</span><spa=
n class=3D"kt">int</span> <span class=3D"o">*</span><span class=3D"n">rows<=
/span><span class=3D"p">,</span> <span class=3D"kt">int</span> <span class=
=3D"o">*</span><span class=3D"n">cols</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=
=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/*** append b=
uffer ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** o=
utput ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** i=
nput ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** in=
it ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>Now you see why we declared <code>seq</code> to be able to store 3 bytes=
. If the byte
after <code>[</code> is a digit, we read another byte expecting it to be a =
<code>~</code>. Then we
test the digit byte to see if it=E2=80=99s a <code>5</code> or a <code>6</c=
ode>.</p>

<p>Let=E2=80=99s make <kbd>Page Up</kbd> and <kbd>Page Down</kbd> do someth=
ing. For now,
we=E2=80=99ll have them move the cursor to the top of the screen or the bot=
tom of the
screen.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/page-up-down-simple/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 51</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/page-up-down-simple">page-up-down-simple</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** append buffer ***/</span></div><div class=3D"line folded"><=
span class=3D"cm">/*** output ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** input ***/</span></div><div class=3D"line"></div><div class=
=3D"line folded"><span class=3D"kt">void</span> <span class=3D"nf">editorMo=
veCursor</span><span class=3D"p">(</span><span class=3D"kt">int</span> <spa=
n class=3D"n">key</span><span class=3D"p">)</span> <span class=3D"p">{</spa=
n> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div=
 class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">editorPro=
cessKeypress</span><span class=3D"p">()</span> <span class=3D"p">{</span></=
div><div class=3D"line">  <span class=3D"kt">int</span> <span class=3D"n">c=
</span> <span class=3D"o">=3D</span> <span class=3D"n">editorReadKey</span>=
<span class=3D"p">();</span></div><div class=3D"line"></div><div class=3D"l=
ine">  <span class=3D"k">switch</span> <span class=3D"p">(</span><span clas=
s=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p">{</span></div>=
<div class=3D"line">    <span class=3D"k">case</span> <span class=3D"n">CTR=
L_KEY</span><span class=3D"p">(</span><span class=3D"sc">'q'</span><span cl=
ass=3D"p">):</span></div><div class=3D"line">      <span class=3D"n">write<=
/span><span class=3D"p">(</span><span class=3D"n">STDOUT_FILENO</span><span=
 class=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\x1b</sp=
an><span class=3D"s">[2J"</span><span class=3D"p">,</span> <span class=3D"m=
i">4</span><span class=3D"p">);</span></div><div class=3D"line">      <span=
 class=3D"n">write</span><span class=3D"p">(</span><span class=3D"n">STDOUT=
_FILENO</span><span class=3D"p">,</span> <span class=3D"s">"</span><span cl=
ass=3D"se">\x1b</span><span class=3D"s">[H"</span><span class=3D"p">,</span=
> <span class=3D"mi">3</span><span class=3D"p">);</span></div><div class=3D=
"line">      <span class=3D"n">exit</span><span class=3D"p">(</span><span c=
lass=3D"mi">0</span><span class=3D"p">);</span></div><div class=3D"line">  =
    <span class=3D"k">break</span><span class=3D"p">;</span></div><div clas=
s=3D"line"></div><ins class=3D"line">    <span class=3D"k">case</span> <spa=
n class=3D"n">PAGE_UP</span><span class=3D"p">:</span></ins><ins class=3D"l=
ine">    <span class=3D"k">case</span> <span class=3D"n">PAGE_DOWN</span><s=
pan class=3D"p">:</span></ins><ins class=3D"line">      <span class=3D"p">{=
</span></ins><ins class=3D"line">        <span class=3D"kt">int</span> <spa=
n class=3D"n">times</span> <span class=3D"o">=3D</span> <span class=3D"n">E=
</span><span class=3D"p">.</span><span class=3D"n">screenrows</span><span c=
lass=3D"p">;</span></ins><ins class=3D"line">        <span class=3D"k">whil=
e</span> <span class=3D"p">(</span><span class=3D"n">times</span><span clas=
s=3D"o">--</span><span class=3D"p">)</span></ins><ins class=3D"line">      =
    <span class=3D"n">editorMoveCursor</span><span class=3D"p">(</span><spa=
n class=3D"n">c</span> <span class=3D"o">=3D=3D</span> <span class=3D"n">PA=
GE_UP</span> <span class=3D"o">?</span> <span class=3D"n">ARROW_UP</span> <=
span class=3D"o">:</span> <span class=3D"n">ARROW_DOWN</span><span class=3D=
"p">);</span></ins><ins class=3D"line">      <span class=3D"p">}</span></in=
s><ins class=3D"line">      <span class=3D"k">break</span><span class=3D"p"=
>;</span></ins><div class=3D"line"></div><div class=3D"line">    <span clas=
s=3D"k">case</span> <span class=3D"n">ARROW_UP</span><span class=3D"p">:</s=
pan></div><div class=3D"line">    <span class=3D"k">case</span> <span class=
=3D"n">ARROW_DOWN</span><span class=3D"p">:</span></div><div class=3D"line"=
>    <span class=3D"k">case</span> <span class=3D"n">ARROW_LEFT</span><span=
 class=3D"p">:</span></div><div class=3D"line">    <span class=3D"k">case</=
span> <span class=3D"n">ARROW_RIGHT</span><span class=3D"p">:</span></div><=
div class=3D"line">      <span class=3D"n">editorMoveCursor</span><span cla=
ss=3D"p">(</span><span class=3D"n">c</span><span class=3D"p">);</span></div=
><div class=3D"line">      <span class=3D"k">break</span><span class=3D"p">=
;</span></div><div class=3D"line">  <span class=3D"p">}</span></div><div cl=
ass=3D"line"><span class=3D"p">}</span></div><div class=3D"line"></div><div=
 class=3D"line folded"><span class=3D"cm">/*** init ***/</span></div></code=
></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>We create a code block with that pair of braces so that we=E2=80=99re al=
lowed to
declare the <code>times</code> variable. (You can=E2=80=99t declare variabl=
es directly inside a
<code>switch</code> statement.) We simulate the user pressing the <kbd>=E2=
=86=91</kbd> or
<kbd>=E2=86=93</kbd> keys enough times to move to the top or bottom of the =
screen.
Implementing <kbd>Page Up</kbd> and <kbd>Page Down</kbd> in this way will m=
ake
it a lot easier for us later, when we implement scrolling.</p>

<p>If you=E2=80=99re on a laptop with an <kbd>Fn</kbd> key, you may be able=
 to press
<kbd>Fn</kbd>+<kbd>=E2=86=91</kbd> and <kbd>Fn</kbd>+<kbd>=E2=86=93</kbd> t=
o simulate
pressing the <kbd>Page Up</kbd> and <kbd>Page Down</kbd> keys.</p>
<h2 id=3D"the-home-and-end-keys"><a href=3D"https://viewsourcecode.org/snap=
token/kilo/03.rawInputAndOutput.html#the-home-and-end-keys">The <kbd>Home</=
kbd> and <kbd>End</kbd> keys</a></h2>

<p>Now let=E2=80=99s implement the <kbd>Home</kbd> and <kbd>End</kbd> keys.=
 Like the
previous keys, these keys also send escape sequences. Unlike the previous k=
eys,
there are many different escape sequences that could be sent by these keys,
depending on your OS, or your terminal emulator. The <kbd>Home</kbd> key co=
uld
be sent as <code>&lt;esc&gt;[1~</code>, <code>&lt;esc&gt;[7~</code>, <code>=
&lt;esc&gt;[H</code>, or <code>&lt;esc&gt;OH</code>. Similarly, the
<kbd>End</kbd> key could be sent as <code>&lt;esc&gt;[4~</code>, <code>&lt;=
esc&gt;[8~</code>, <code>&lt;esc&gt;[F</code>, or
<code>&lt;esc&gt;OF</code>. Let=E2=80=99s handle all of these cases.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/detect-home-end/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 52</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/detect-home-end">detect-home-end</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line"><span class=3D"c=
m">/*** defines ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne"><span class=3D"cp">#define KILO_VERSION "0.0.1"</span></div><div class=
=3D"line"></div><div class=3D"line"><span class=3D"cp">#define CTRL_KEY(k) =
((k) &amp; 0x1f)</span></div><div class=3D"line"></div><div class=3D"line">=
<span class=3D"k">enum</span> <span class=3D"n">editorKey</span> <span clas=
s=3D"p">{</span></div><div class=3D"line">  <span class=3D"n">ARROW_LEFT</s=
pan> <span class=3D"o">=3D</span> <span class=3D"mi">1000</span><span class=
=3D"p">,</span></div><div class=3D"line">  <span class=3D"n">ARROW_RIGHT</s=
pan><span class=3D"p">,</span></div><div class=3D"line">  <span class=3D"n"=
>ARROW_UP</span><span class=3D"p">,</span></div><div class=3D"line">  <span=
 class=3D"n">ARROW_DOWN</span><span class=3D"p">,</span></div><ins class=3D=
"line">  <span class=3D"n">HOME_KEY</span><span class=3D"p">,</span></ins><=
ins class=3D"line">  <span class=3D"n">END_KEY</span><span class=3D"p">,</s=
pan></ins><div class=3D"line">  <span class=3D"n">PAGE_UP</span><span class=
=3D"p">,</span></div><div class=3D"line">  <span class=3D"n">PAGE_DOWN</spa=
n></div><div class=3D"line"><span class=3D"p">};</span></div><div class=3D"=
line"></div><div class=3D"line folded"><span class=3D"cm">/*** data ***/</s=
pan></div><div class=3D"line"><span class=3D"cm">/*** terminal ***/</span><=
/div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt=
">void</span> <span class=3D"nf">die</span><span class=3D"p">(</span><span =
class=3D"k">const</span> <span class=3D"kt">char</span> <span class=3D"o">*=
</span><span class=3D"n">s</span><span class=3D"p">)</span> <span class=3D"=
p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"><=
/div><div class=3D"line folded"><span class=3D"kt">void</span> <span class=
=3D"nf">disableRawMode</span><span class=3D"p">()</span> <span class=3D"p">=
{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></di=
v><div class=3D"line folded"><span class=3D"kt">void</span> <span class=3D"=
nf">enableRawMode</span><span class=3D"p">()</span> <span class=3D"p">{</sp=
an> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><di=
v class=3D"line"><span class=3D"kt">int</span> <span class=3D"nf">editorRea=
dKey</span><span class=3D"p">()</span> <span class=3D"p">{</span></div><div=
 class=3D"line">  <span class=3D"kt">int</span> <span class=3D"n">nread</sp=
an><span class=3D"p">;</span></div><div class=3D"line">  <span class=3D"kt"=
>char</span> <span class=3D"n">c</span><span class=3D"p">;</span></div><div=
 class=3D"line">  <span class=3D"k">while</span> <span class=3D"p">((</span=
><span class=3D"n">nread</span> <span class=3D"o">=3D</span> <span class=3D=
"n">read</span><span class=3D"p">(</span><span class=3D"n">STDIN_FILENO</sp=
an><span class=3D"p">,</span> <span class=3D"o">&amp;</span><span class=3D"=
n">c</span><span class=3D"p">,</span> <span class=3D"mi">1</span><span clas=
s=3D"p">))</span> <span class=3D"o">!=3D</span> <span class=3D"mi">1</span>=
<span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"li=
ne">    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=
=3D"n">nread</span> <span class=3D"o">=3D=3D</span> <span class=3D"o">-</sp=
an><span class=3D"mi">1</span> <span class=3D"o">&amp;&amp;</span> <span cl=
ass=3D"n">errno</span> <span class=3D"o">!=3D</span> <span class=3D"n">EAGA=
IN</span><span class=3D"p">)</span> <span class=3D"n">die</span><span class=
=3D"p">(</span><span class=3D"s">"read"</span><span class=3D"p">);</span></=
div><div class=3D"line">  <span class=3D"p">}</span></div><div class=3D"lin=
e"></div><div class=3D"line">  <span class=3D"k">if</span> <span class=3D"p=
">(</span><span class=3D"n">c</span> <span class=3D"o">=3D=3D</span> <span =
class=3D"sc">'\x1b'</span><span class=3D"p">)</span> <span class=3D"p">{</s=
pan></div><div class=3D"line">    <span class=3D"kt">char</span> <span clas=
s=3D"n">seq</span><span class=3D"p">[</span><span class=3D"mi">3</span><spa=
n class=3D"p">];</span></div><div class=3D"line"></div><div class=3D"line">=
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n"=
>read</span><span class=3D"p">(</span><span class=3D"n">STDIN_FILENO</span>=
<span class=3D"p">,</span> <span class=3D"o">&amp;</span><span class=3D"n">=
seq</span><span class=3D"p">[</span><span class=3D"mi">0</span><span class=
=3D"p">],</span> <span class=3D"mi">1</span><span class=3D"p">)</span> <spa=
n class=3D"o">!=3D</span> <span class=3D"mi">1</span><span class=3D"p">)</s=
pan> <span class=3D"k">return</span> <span class=3D"sc">'\x1b'</span><span =
class=3D"p">;</span></div><div class=3D"line">    <span class=3D"k">if</spa=
n> <span class=3D"p">(</span><span class=3D"n">read</span><span class=3D"p"=
>(</span><span class=3D"n">STDIN_FILENO</span><span class=3D"p">,</span> <s=
pan class=3D"o">&amp;</span><span class=3D"n">seq</span><span class=3D"p">[=
</span><span class=3D"mi">1</span><span class=3D"p">],</span> <span class=
=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"o">!=3D</span> <s=
pan class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"k">retur=
n</span> <span class=3D"sc">'\x1b'</span><span class=3D"p">;</span></div><d=
iv class=3D"line"></div><div class=3D"line">    <span class=3D"k">if</span>=
 <span class=3D"p">(</span><span class=3D"n">seq</span><span class=3D"p">[<=
/span><span class=3D"mi">0</span><span class=3D"p">]</span> <span class=3D"=
o">=3D=3D</span> <span class=3D"sc">'['</span><span class=3D"p">)</span> <s=
pan class=3D"p">{</span></div><div class=3D"line">      <span class=3D"k">i=
f</span> <span class=3D"p">(</span><span class=3D"n">seq</span><span class=
=3D"p">[</span><span class=3D"mi">1</span><span class=3D"p">]</span> <span =
class=3D"o">&gt;=3D</span> <span class=3D"sc">'0'</span> <span class=3D"o">=
&amp;&amp;</span> <span class=3D"n">seq</span><span class=3D"p">[</span><sp=
an class=3D"mi">1</span><span class=3D"p">]</span> <span class=3D"o">&lt;=
=3D</span> <span class=3D"sc">'9'</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span></div><div class=3D"line">        <span class=3D"k">if</s=
pan> <span class=3D"p">(</span><span class=3D"n">read</span><span class=3D"=
p">(</span><span class=3D"n">STDIN_FILENO</span><span class=3D"p">,</span> =
<span class=3D"o">&amp;</span><span class=3D"n">seq</span><span class=3D"p"=
>[</span><span class=3D"mi">2</span><span class=3D"p">],</span> <span class=
=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"o">!=3D</span> <s=
pan class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"k">retur=
n</span> <span class=3D"sc">'\x1b'</span><span class=3D"p">;</span></div><d=
iv class=3D"line">        <span class=3D"k">if</span> <span class=3D"p">(</=
span><span class=3D"n">seq</span><span class=3D"p">[</span><span class=3D"m=
i">2</span><span class=3D"p">]</span> <span class=3D"o">=3D=3D</span> <span=
 class=3D"sc">'~'</span><span class=3D"p">)</span> <span class=3D"p">{</spa=
n></div><div class=3D"line">          <span class=3D"k">switch</span> <span=
 class=3D"p">(</span><span class=3D"n">seq</span><span class=3D"p">[</span>=
<span class=3D"mi">1</span><span class=3D"p">])</span> <span class=3D"p">{<=
/span></div><ins class=3D"line">            <span class=3D"k">case</span> <=
span class=3D"sc">'1'</span><span class=3D"p">:</span> <span class=3D"k">re=
turn</span> <span class=3D"n">HOME_KEY</span><span class=3D"p">;</span></in=
s><ins class=3D"line">            <span class=3D"k">case</span> <span class=
=3D"sc">'4'</span><span class=3D"p">:</span> <span class=3D"k">return</span=
> <span class=3D"n">END_KEY</span><span class=3D"p">;</span></ins><div clas=
s=3D"line">            <span class=3D"k">case</span> <span class=3D"sc">'5'=
</span><span class=3D"p">:</span> <span class=3D"k">return</span> <span cla=
ss=3D"n">PAGE_UP</span><span class=3D"p">;</span></div><div class=3D"line">=
            <span class=3D"k">case</span> <span class=3D"sc">'6'</span><spa=
n class=3D"p">:</span> <span class=3D"k">return</span> <span class=3D"n">PA=
GE_DOWN</span><span class=3D"p">;</span></div><ins class=3D"line">         =
   <span class=3D"k">case</span> <span class=3D"sc">'7'</span><span class=
=3D"p">:</span> <span class=3D"k">return</span> <span class=3D"n">HOME_KEY<=
/span><span class=3D"p">;</span></ins><ins class=3D"line">            <span=
 class=3D"k">case</span> <span class=3D"sc">'8'</span><span class=3D"p">:</=
span> <span class=3D"k">return</span> <span class=3D"n">END_KEY</span><span=
 class=3D"p">;</span></ins><div class=3D"line">          <span class=3D"p">=
}</span></div><div class=3D"line">        <span class=3D"p">}</span></div><=
div class=3D"line">      <span class=3D"p">}</span> <span class=3D"k">else<=
/span> <span class=3D"p">{</span></div><div class=3D"line">        <span cl=
ass=3D"k">switch</span> <span class=3D"p">(</span><span class=3D"n">seq</sp=
an><span class=3D"p">[</span><span class=3D"mi">1</span><span class=3D"p">]=
)</span> <span class=3D"p">{</span></div><div class=3D"line">          <spa=
n class=3D"k">case</span> <span class=3D"sc">'A'</span><span class=3D"p">:<=
/span> <span class=3D"k">return</span> <span class=3D"n">ARROW_UP</span><sp=
an class=3D"p">;</span></div><div class=3D"line">          <span class=3D"k=
">case</span> <span class=3D"sc">'B'</span><span class=3D"p">:</span> <span=
 class=3D"k">return</span> <span class=3D"n">ARROW_DOWN</span><span class=
=3D"p">;</span></div><div class=3D"line">          <span class=3D"k">case</=
span> <span class=3D"sc">'C'</span><span class=3D"p">:</span> <span class=
=3D"k">return</span> <span class=3D"n">ARROW_RIGHT</span><span class=3D"p">=
;</span></div><div class=3D"line">          <span class=3D"k">case</span> <=
span class=3D"sc">'D'</span><span class=3D"p">:</span> <span class=3D"k">re=
turn</span> <span class=3D"n">ARROW_LEFT</span><span class=3D"p">;</span></=
div><ins class=3D"line">          <span class=3D"k">case</span> <span class=
=3D"sc">'H'</span><span class=3D"p">:</span> <span class=3D"k">return</span=
> <span class=3D"n">HOME_KEY</span><span class=3D"p">;</span></ins><ins cla=
ss=3D"line">          <span class=3D"k">case</span> <span class=3D"sc">'F'<=
/span><span class=3D"p">:</span> <span class=3D"k">return</span> <span clas=
s=3D"n">END_KEY</span><span class=3D"p">;</span></ins><div class=3D"line"> =
       <span class=3D"p">}</span></div><div class=3D"line">      <span clas=
s=3D"p">}</span></div><ins class=3D"line">    <span class=3D"p">}</span> <s=
pan class=3D"k">else</span> <span class=3D"k">if</span> <span class=3D"p">(=
</span><span class=3D"n">seq</span><span class=3D"p">[</span><span class=3D=
"mi">0</span><span class=3D"p">]</span> <span class=3D"o">=3D=3D</span> <sp=
an class=3D"sc">'O'</span><span class=3D"p">)</span> <span class=3D"p">{</s=
pan></ins><ins class=3D"line">      <span class=3D"k">switch</span> <span c=
lass=3D"p">(</span><span class=3D"n">seq</span><span class=3D"p">[</span><s=
pan class=3D"mi">1</span><span class=3D"p">])</span> <span class=3D"p">{</s=
pan></ins><ins class=3D"line">        <span class=3D"k">case</span> <span c=
lass=3D"sc">'H'</span><span class=3D"p">:</span> <span class=3D"k">return</=
span> <span class=3D"n">HOME_KEY</span><span class=3D"p">;</span></ins><ins=
 class=3D"line">        <span class=3D"k">case</span> <span class=3D"sc">'F=
'</span><span class=3D"p">:</span> <span class=3D"k">return</span> <span cl=
ass=3D"n">END_KEY</span><span class=3D"p">;</span></ins><ins class=3D"line"=
>      <span class=3D"p">}</span></ins><div class=3D"line">    <span class=
=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line">    <spa=
n class=3D"k">return</span> <span class=3D"sc">'\x1b'</span><span class=3D"=
p">;</span></div><div class=3D"line">  <span class=3D"p">}</span> <span cla=
ss=3D"k">else</span> <span class=3D"p">{</span></div><div class=3D"line">  =
  <span class=3D"k">return</span> <span class=3D"n">c</span><span class=3D"=
p">;</span></div><div class=3D"line">  <span class=3D"p">}</span></div><div=
 class=3D"line"><span class=3D"p">}</span></div><div class=3D"line"></div><=
div class=3D"line folded"><span class=3D"kt">int</span> <span class=3D"nf">=
getCursorPosition</span><span class=3D"p">(</span><span class=3D"kt">int</s=
pan> <span class=3D"o">*</span><span class=3D"n">rows</span><span class=3D"=
p">,</span> <span class=3D"kt">int</span> <span class=3D"o">*</span><span c=
lass=3D"n">cols</span><span class=3D"p">)</span> <span class=3D"p">{</span>=
 =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div c=
lass=3D"line folded"><span class=3D"kt">int</span> <span class=3D"nf">getWi=
ndowSize</span><span class=3D"p">(</span><span class=3D"kt">int</span> <spa=
n class=3D"o">*</span><span class=3D"n">rows</span><span class=3D"p">,</spa=
n> <span class=3D"kt">int</span> <span class=3D"o">*</span><span class=3D"n=
">cols</span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=
=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D=
"line folded"><span class=3D"cm">/*** append buffer ***/</span></div><div c=
lass=3D"line folded"><span class=3D"cm">/*** output ***/</span></div><div c=
lass=3D"line folded"><span class=3D"cm">/*** input ***/</span></div><div cl=
ass=3D"line folded"><span class=3D"cm">/*** init ***/</span></div></code></=
pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>Now let=E2=80=99s make <kbd>Home</kbd> and <kbd>End</kbd> do something. =
For now, we=E2=80=99ll
have them move the cursor to the left or right edges of the screen.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/home-end-simple/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 53</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/home-end-simple">home-end-simple</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** append buffer ***/</span></div><div class=3D"line folded"><=
span class=3D"cm">/*** output ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** input ***/</span></div><div class=3D"line"></div><div class=
=3D"line folded"><span class=3D"kt">void</span> <span class=3D"nf">editorMo=
veCursor</span><span class=3D"p">(</span><span class=3D"kt">int</span> <spa=
n class=3D"n">key</span><span class=3D"p">)</span> <span class=3D"p">{</spa=
n> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div=
 class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">editorPro=
cessKeypress</span><span class=3D"p">()</span> <span class=3D"p">{</span></=
div><div class=3D"line">  <span class=3D"kt">int</span> <span class=3D"n">c=
</span> <span class=3D"o">=3D</span> <span class=3D"n">editorReadKey</span>=
<span class=3D"p">();</span></div><div class=3D"line"></div><div class=3D"l=
ine">  <span class=3D"k">switch</span> <span class=3D"p">(</span><span clas=
s=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p">{</span></div>=
<div class=3D"line">    <span class=3D"k">case</span> <span class=3D"n">CTR=
L_KEY</span><span class=3D"p">(</span><span class=3D"sc">'q'</span><span cl=
ass=3D"p">):</span></div><div class=3D"line">      <span class=3D"n">write<=
/span><span class=3D"p">(</span><span class=3D"n">STDOUT_FILENO</span><span=
 class=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\x1b</sp=
an><span class=3D"s">[2J"</span><span class=3D"p">,</span> <span class=3D"m=
i">4</span><span class=3D"p">);</span></div><div class=3D"line">      <span=
 class=3D"n">write</span><span class=3D"p">(</span><span class=3D"n">STDOUT=
_FILENO</span><span class=3D"p">,</span> <span class=3D"s">"</span><span cl=
ass=3D"se">\x1b</span><span class=3D"s">[H"</span><span class=3D"p">,</span=
> <span class=3D"mi">3</span><span class=3D"p">);</span></div><div class=3D=
"line">      <span class=3D"n">exit</span><span class=3D"p">(</span><span c=
lass=3D"mi">0</span><span class=3D"p">);</span></div><div class=3D"line">  =
    <span class=3D"k">break</span><span class=3D"p">;</span></div><div clas=
s=3D"line"></div><ins class=3D"line">    <span class=3D"k">case</span> <spa=
n class=3D"n">HOME_KEY</span><span class=3D"p">:</span></ins><ins class=3D"=
line">      <span class=3D"n">E</span><span class=3D"p">.</span><span class=
=3D"n">cx</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><s=
pan class=3D"p">;</span></ins><ins class=3D"line">      <span class=3D"k">b=
reak</span><span class=3D"p">;</span></ins><ins class=3D"line"></ins><ins c=
lass=3D"line">    <span class=3D"k">case</span> <span class=3D"n">END_KEY</=
span><span class=3D"p">:</span></ins><ins class=3D"line">      <span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">cx</span> <span =
class=3D"o">=3D</span> <span class=3D"n">E</span><span class=3D"p">.</span>=
<span class=3D"n">screencols</span> <span class=3D"o">-</span> <span class=
=3D"mi">1</span><span class=3D"p">;</span></ins><ins class=3D"line">      <=
span class=3D"k">break</span><span class=3D"p">;</span></ins><div class=3D"=
line"></div><div class=3D"line">    <span class=3D"k">case</span> <span cla=
ss=3D"n">PAGE_UP</span><span class=3D"p">:</span></div><div class=3D"line">=
    <span class=3D"k">case</span> <span class=3D"n">PAGE_DOWN</span><span c=
lass=3D"p">:</span></div><div class=3D"line">      <span class=3D"p">{</spa=
n></div><div class=3D"line">        <span class=3D"kt">int</span> <span cla=
ss=3D"n">times</span> <span class=3D"o">=3D</span> <span class=3D"n">E</spa=
n><span class=3D"p">.</span><span class=3D"n">screenrows</span><span class=
=3D"p">;</span></div><div class=3D"line">        <span class=3D"k">while</s=
pan> <span class=3D"p">(</span><span class=3D"n">times</span><span class=3D=
"o">--</span><span class=3D"p">)</span></div><div class=3D"line">          =
<span class=3D"n">editorMoveCursor</span><span class=3D"p">(</span><span cl=
ass=3D"n">c</span> <span class=3D"o">=3D=3D</span> <span class=3D"n">PAGE_U=
P</span> <span class=3D"o">?</span> <span class=3D"n">ARROW_UP</span> <span=
 class=3D"o">:</span> <span class=3D"n">ARROW_DOWN</span><span class=3D"p">=
);</span></div><div class=3D"line">      <span class=3D"p">}</span></div><d=
iv class=3D"line">      <span class=3D"k">break</span><span class=3D"p">;</=
span></div><div class=3D"line"></div><div class=3D"line">    <span class=3D=
"k">case</span> <span class=3D"n">ARROW_UP</span><span class=3D"p">:</span>=
</div><div class=3D"line">    <span class=3D"k">case</span> <span class=3D"=
n">ARROW_DOWN</span><span class=3D"p">:</span></div><div class=3D"line">   =
 <span class=3D"k">case</span> <span class=3D"n">ARROW_LEFT</span><span cla=
ss=3D"p">:</span></div><div class=3D"line">    <span class=3D"k">case</span=
> <span class=3D"n">ARROW_RIGHT</span><span class=3D"p">:</span></div><div =
class=3D"line">      <span class=3D"n">editorMoveCursor</span><span class=
=3D"p">(</span><span class=3D"n">c</span><span class=3D"p">);</span></div><=
div class=3D"line">      <span class=3D"k">break</span><span class=3D"p">;<=
/span></div><div class=3D"line">  <span class=3D"p">}</span></div><div clas=
s=3D"line"><span class=3D"p">}</span></div><div class=3D"line"></div><div c=
lass=3D"line folded"><span class=3D"cm">/*** init ***/</span></div></code><=
/pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>If you=E2=80=99re on a laptop with an <kbd>Fn</kbd> key, you may be able=
 to press
<kbd>Fn</kbd>+<kbd>=E2=86=90</kbd> and <kbd>Fn</kbd>+<kbd>=E2=86=92</kbd> t=
o simulate
pressing the <kbd>Home</kbd> and <kbd>End</kbd> keys.</p>
<h2 id=3D"the-delete-key"><a href=3D"https://viewsourcecode.org/snaptoken/k=
ilo/03.rawInputAndOutput.html#the-delete-key">The <kbd>Delete</kbd> key</a>=
</h2>

<p>Lastly, let=E2=80=99s detect when the <kbd>Delete</kbd> key is pressed. =
It simply sends
the escape sequence <code>&lt;esc&gt;[3~</code>, so it=E2=80=99s easy to ad=
d to our switch statement. We
won=E2=80=99t make this key do anything for now.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/detect-delete-key/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 54</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/detect-delete-key">detect-delete-key</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line"><span class=3D"c=
m">/*** defines ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne"><span class=3D"cp">#define KILO_VERSION "0.0.1"</span></div><div class=
=3D"line"></div><div class=3D"line"><span class=3D"cp">#define CTRL_KEY(k) =
((k) &amp; 0x1f)</span></div><div class=3D"line"></div><div class=3D"line">=
<span class=3D"k">enum</span> <span class=3D"n">editorKey</span> <span clas=
s=3D"p">{</span></div><div class=3D"line">  <span class=3D"n">ARROW_LEFT</s=
pan> <span class=3D"o">=3D</span> <span class=3D"mi">1000</span><span class=
=3D"p">,</span></div><div class=3D"line">  <span class=3D"n">ARROW_RIGHT</s=
pan><span class=3D"p">,</span></div><div class=3D"line">  <span class=3D"n"=
>ARROW_UP</span><span class=3D"p">,</span></div><div class=3D"line">  <span=
 class=3D"n">ARROW_DOWN</span><span class=3D"p">,</span></div><ins class=3D=
"line">  <span class=3D"n">DEL_KEY</span><span class=3D"p">,</span></ins><d=
iv class=3D"line">  <span class=3D"n">HOME_KEY</span><span class=3D"p">,</s=
pan></div><div class=3D"line">  <span class=3D"n">END_KEY</span><span class=
=3D"p">,</span></div><div class=3D"line">  <span class=3D"n">PAGE_UP</span>=
<span class=3D"p">,</span></div><div class=3D"line">  <span class=3D"n">PAG=
E_DOWN</span></div><div class=3D"line"><span class=3D"p">};</span></div><di=
v class=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/*** d=
ata ***/</span></div><div class=3D"line"><span class=3D"cm">/*** terminal *=
**/</span></div><div class=3D"line"></div><div class=3D"line folded"><span =
class=3D"kt">void</span> <span class=3D"nf">die</span><span class=3D"p">(</=
span><span class=3D"k">const</span> <span class=3D"kt">char</span> <span cl=
ass=3D"o">*</span><span class=3D"n">s</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=
=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void</span> <=
span class=3D"nf">disableRawMode</span><span class=3D"p">()</span> <span cl=
ass=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"=
line"></div><div class=3D"line folded"><span class=3D"kt">void</span> <span=
 class=3D"nf">enableRawMode</span><span class=3D"p">()</span> <span class=
=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"lin=
e"></div><div class=3D"line"><span class=3D"kt">int</span> <span class=3D"n=
f">editorReadKey</span><span class=3D"p">()</span> <span class=3D"p">{</spa=
n></div><div class=3D"line">  <span class=3D"kt">int</span> <span class=3D"=
n">nread</span><span class=3D"p">;</span></div><div class=3D"line">  <span =
class=3D"kt">char</span> <span class=3D"n">c</span><span class=3D"p">;</spa=
n></div><div class=3D"line">  <span class=3D"k">while</span> <span class=3D=
"p">((</span><span class=3D"n">nread</span> <span class=3D"o">=3D</span> <s=
pan class=3D"n">read</span><span class=3D"p">(</span><span class=3D"n">STDI=
N_FILENO</span><span class=3D"p">,</span> <span class=3D"o">&amp;</span><sp=
an class=3D"n">c</span><span class=3D"p">,</span> <span class=3D"mi">1</spa=
n><span class=3D"p">))</span> <span class=3D"o">!=3D</span> <span class=3D"=
mi">1</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div=
 class=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(</span><=
span class=3D"n">nread</span> <span class=3D"o">=3D=3D</span> <span class=
=3D"o">-</span><span class=3D"mi">1</span> <span class=3D"o">&amp;&amp;</sp=
an> <span class=3D"n">errno</span> <span class=3D"o">!=3D</span> <span clas=
s=3D"n">EAGAIN</span><span class=3D"p">)</span> <span class=3D"n">die</span=
><span class=3D"p">(</span><span class=3D"s">"read"</span><span class=3D"p"=
>);</span></div><div class=3D"line">  <span class=3D"p">}</span></div><div =
class=3D"line"></div><div class=3D"line">  <span class=3D"k">if</span> <spa=
n class=3D"p">(</span><span class=3D"n">c</span> <span class=3D"o">=3D=3D</=
span> <span class=3D"sc">'\x1b'</span><span class=3D"p">)</span> <span clas=
s=3D"p">{</span></div><div class=3D"line">    <span class=3D"kt">char</span=
> <span class=3D"n">seq</span><span class=3D"p">[</span><span class=3D"mi">=
3</span><span class=3D"p">];</span></div><div class=3D"line"></div><div cla=
ss=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(</span><span=
 class=3D"n">read</span><span class=3D"p">(</span><span class=3D"n">STDIN_F=
ILENO</span><span class=3D"p">,</span> <span class=3D"o">&amp;</span><span =
class=3D"n">seq</span><span class=3D"p">[</span><span class=3D"mi">0</span>=
<span class=3D"p">],</span> <span class=3D"mi">1</span><span class=3D"p">)<=
/span> <span class=3D"o">!=3D</span> <span class=3D"mi">1</span><span class=
=3D"p">)</span> <span class=3D"k">return</span> <span class=3D"sc">'\x1b'</=
span><span class=3D"p">;</span></div><div class=3D"line">    <span class=3D=
"k">if</span> <span class=3D"p">(</span><span class=3D"n">read</span><span =
class=3D"p">(</span><span class=3D"n">STDIN_FILENO</span><span class=3D"p">=
,</span> <span class=3D"o">&amp;</span><span class=3D"n">seq</span><span cl=
ass=3D"p">[</span><span class=3D"mi">1</span><span class=3D"p">],</span> <s=
pan class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"o">!=3D<=
/span> <span class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D=
"k">return</span> <span class=3D"sc">'\x1b'</span><span class=3D"p">;</span=
></div><div class=3D"line"></div><div class=3D"line">    <span class=3D"k">=
if</span> <span class=3D"p">(</span><span class=3D"n">seq</span><span class=
=3D"p">[</span><span class=3D"mi">0</span><span class=3D"p">]</span> <span =
class=3D"o">=3D=3D</span> <span class=3D"sc">'['</span><span class=3D"p">)<=
/span> <span class=3D"p">{</span></div><div class=3D"line">      <span clas=
s=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">seq</span><sp=
an class=3D"p">[</span><span class=3D"mi">1</span><span class=3D"p">]</span=
> <span class=3D"o">&gt;=3D</span> <span class=3D"sc">'0'</span> <span clas=
s=3D"o">&amp;&amp;</span> <span class=3D"n">seq</span><span class=3D"p">[</=
span><span class=3D"mi">1</span><span class=3D"p">]</span> <span class=3D"o=
">&lt;=3D</span> <span class=3D"sc">'9'</span><span class=3D"p">)</span> <s=
pan class=3D"p">{</span></div><div class=3D"line">        <span class=3D"k"=
>if</span> <span class=3D"p">(</span><span class=3D"n">read</span><span cla=
ss=3D"p">(</span><span class=3D"n">STDIN_FILENO</span><span class=3D"p">,</=
span> <span class=3D"o">&amp;</span><span class=3D"n">seq</span><span class=
=3D"p">[</span><span class=3D"mi">2</span><span class=3D"p">],</span> <span=
 class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"o">!=3D</sp=
an> <span class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"k"=
>return</span> <span class=3D"sc">'\x1b'</span><span class=3D"p">;</span></=
div><div class=3D"line">        <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"n">seq</span><span class=3D"p">[</span><span clas=
s=3D"mi">2</span><span class=3D"p">]</span> <span class=3D"o">=3D=3D</span>=
 <span class=3D"sc">'~'</span><span class=3D"p">)</span> <span class=3D"p">=
{</span></div><div class=3D"line">          <span class=3D"k">switch</span>=
 <span class=3D"p">(</span><span class=3D"n">seq</span><span class=3D"p">[<=
/span><span class=3D"mi">1</span><span class=3D"p">])</span> <span class=3D=
"p">{</span></div><div class=3D"line">            <span class=3D"k">case</s=
pan> <span class=3D"sc">'1'</span><span class=3D"p">:</span> <span class=3D=
"k">return</span> <span class=3D"n">HOME_KEY</span><span class=3D"p">;</spa=
n></div><ins class=3D"line">            <span class=3D"k">case</span> <span=
 class=3D"sc">'3'</span><span class=3D"p">:</span> <span class=3D"k">return=
</span> <span class=3D"n">DEL_KEY</span><span class=3D"p">;</span></ins><di=
v class=3D"line">            <span class=3D"k">case</span> <span class=3D"s=
c">'4'</span><span class=3D"p">:</span> <span class=3D"k">return</span> <sp=
an class=3D"n">END_KEY</span><span class=3D"p">;</span></div><div class=3D"=
line">            <span class=3D"k">case</span> <span class=3D"sc">'5'</spa=
n><span class=3D"p">:</span> <span class=3D"k">return</span> <span class=3D=
"n">PAGE_UP</span><span class=3D"p">;</span></div><div class=3D"line">     =
       <span class=3D"k">case</span> <span class=3D"sc">'6'</span><span cla=
ss=3D"p">:</span> <span class=3D"k">return</span> <span class=3D"n">PAGE_DO=
WN</span><span class=3D"p">;</span></div><div class=3D"line">            <s=
pan class=3D"k">case</span> <span class=3D"sc">'7'</span><span class=3D"p">=
:</span> <span class=3D"k">return</span> <span class=3D"n">HOME_KEY</span><=
span class=3D"p">;</span></div><div class=3D"line">            <span class=
=3D"k">case</span> <span class=3D"sc">'8'</span><span class=3D"p">:</span> =
<span class=3D"k">return</span> <span class=3D"n">END_KEY</span><span class=
=3D"p">;</span></div><div class=3D"line">          <span class=3D"p">}</spa=
n></div><div class=3D"line">        <span class=3D"p">}</span></div><div cl=
ass=3D"line">      <span class=3D"p">}</span> <span class=3D"k">else</span>=
 <span class=3D"p">{</span></div><div class=3D"line">        <span class=3D=
"k">switch</span> <span class=3D"p">(</span><span class=3D"n">seq</span><sp=
an class=3D"p">[</span><span class=3D"mi">1</span><span class=3D"p">])</spa=
n> <span class=3D"p">{</span></div><div class=3D"line">          <span clas=
s=3D"k">case</span> <span class=3D"sc">'A'</span><span class=3D"p">:</span>=
 <span class=3D"k">return</span> <span class=3D"n">ARROW_UP</span><span cla=
ss=3D"p">;</span></div><div class=3D"line">          <span class=3D"k">case=
</span> <span class=3D"sc">'B'</span><span class=3D"p">:</span> <span class=
=3D"k">return</span> <span class=3D"n">ARROW_DOWN</span><span class=3D"p">;=
</span></div><div class=3D"line">          <span class=3D"k">case</span> <s=
pan class=3D"sc">'C'</span><span class=3D"p">:</span> <span class=3D"k">ret=
urn</span> <span class=3D"n">ARROW_RIGHT</span><span class=3D"p">;</span></=
div><div class=3D"line">          <span class=3D"k">case</span> <span class=
=3D"sc">'D'</span><span class=3D"p">:</span> <span class=3D"k">return</span=
> <span class=3D"n">ARROW_LEFT</span><span class=3D"p">;</span></div><div c=
lass=3D"line">          <span class=3D"k">case</span> <span class=3D"sc">'H=
'</span><span class=3D"p">:</span> <span class=3D"k">return</span> <span cl=
ass=3D"n">HOME_KEY</span><span class=3D"p">;</span></div><div class=3D"line=
">          <span class=3D"k">case</span> <span class=3D"sc">'F'</span><spa=
n class=3D"p">:</span> <span class=3D"k">return</span> <span class=3D"n">EN=
D_KEY</span><span class=3D"p">;</span></div><div class=3D"line">        <sp=
an class=3D"p">}</span></div><div class=3D"line">      <span class=3D"p">}<=
/span></div><div class=3D"line">    <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"k">if</span> <span class=3D"p">(</span><s=
pan class=3D"n">seq</span><span class=3D"p">[</span><span class=3D"mi">0</s=
pan><span class=3D"p">]</span> <span class=3D"o">=3D=3D</span> <span class=
=3D"sc">'O'</span><span class=3D"p">)</span> <span class=3D"p">{</span></di=
v><div class=3D"line">      <span class=3D"k">switch</span> <span class=3D"=
p">(</span><span class=3D"n">seq</span><span class=3D"p">[</span><span clas=
s=3D"mi">1</span><span class=3D"p">])</span> <span class=3D"p">{</span></di=
v><div class=3D"line">        <span class=3D"k">case</span> <span class=3D"=
sc">'H'</span><span class=3D"p">:</span> <span class=3D"k">return</span> <s=
pan class=3D"n">HOME_KEY</span><span class=3D"p">;</span></div><div class=
=3D"line">        <span class=3D"k">case</span> <span class=3D"sc">'F'</spa=
n><span class=3D"p">:</span> <span class=3D"k">return</span> <span class=3D=
"n">END_KEY</span><span class=3D"p">;</span></div><div class=3D"line">     =
 <span class=3D"p">}</span></div><div class=3D"line">    <span class=3D"p">=
}</span></div><div class=3D"line"></div><div class=3D"line">    <span class=
=3D"k">return</span> <span class=3D"sc">'\x1b'</span><span class=3D"p">;</s=
pan></div><div class=3D"line">  <span class=3D"p">}</span> <span class=3D"k=
">else</span> <span class=3D"p">{</span></div><div class=3D"line">    <span=
 class=3D"k">return</span> <span class=3D"n">c</span><span class=3D"p">;</s=
pan></div><div class=3D"line">  <span class=3D"p">}</span></div><div class=
=3D"line"><span class=3D"p">}</span></div><div class=3D"line"></div><div cl=
ass=3D"line folded"><span class=3D"kt">int</span> <span class=3D"nf">getCur=
sorPosition</span><span class=3D"p">(</span><span class=3D"kt">int</span> <=
span class=3D"o">*</span><span class=3D"n">rows</span><span class=3D"p">,</=
span> <span class=3D"kt">int</span> <span class=3D"o">*</span><span class=
=3D"n">cols</span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=
=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div class=
=3D"line folded"><span class=3D"kt">int</span> <span class=3D"nf">getWindow=
Size</span><span class=3D"p">(</span><span class=3D"kt">int</span> <span cl=
ass=3D"o">*</span><span class=3D"n">rows</span><span class=3D"p">,</span> <=
span class=3D"kt">int</span> <span class=3D"o">*</span><span class=3D"n">co=
ls</span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <s=
pan class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line =
folded"><span class=3D"cm">/*** append buffer ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** output ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** input ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** init ***/</span></div></code></pre=
>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>If you=E2=80=99re on a laptop with an <kbd>Fn</kbd> key, you may be able=
 to press
<kbd>Fn</kbd>+<kbd>Backspace</kbd> to simulate pressing the <kbd>Delete</kb=
d>
key.</p>

<p>In the <a href=3D"https://viewsourcecode.org/snaptoken/kilo/04.aTextView=
er.html">next chapter</a>, we will get our program to display
text files, complete with vertical and horizontal scrolling and a status ba=
r.</p>

    </div>
    <div id=3D"version">
      <a href=3D"https://github.com/snaptoken/kilo-tutorial/tree/v1.0.0beta=
11">1.0.0beta11</a>
      (<a href=3D"https://github.com/snaptoken/kilo-tutorial/blob/master/CH=
ANGELOG.md">changelog</a>)
    </div>
    <footer class=3D"bar">
      <nav>
        <a href=3D"https://viewsourcecode.org/snaptoken/kilo/03.rawInputAnd=
Output.html#">top of page</a>
      </nav>
    </footer>
 =20


</body><grammarly-desktop-integration data-grammarly-shadow-root=3D"true"><=
template shadowmode=3D"open"><div aria-label=3D"grammarly-integration" role=
=3D"group" tabindex=3D"-1" class=3D"grammarly-desktop-integration" data-con=
tent=3D"{&quot;mode&quot;:&quot;full&quot;,&quot;isActive&quot;:true,&quot;=
isUserDisabled&quot;:false}"></div></template></grammarly-desktop-integrati=
on></html>
------MultipartBoundary--lVblIC6eJFfMBMRBEYeOrYaBwpwG3IrvOjGBnKMKJD----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://viewsourcecode.org/snaptoken/kilo/i/x.png

iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAMFWlDQ1BJQ0MgUHJvZmlsZQAASImV
VwdYU8kWnltSCEkogQhICb0jvQqEDoKAdLARkgChREgICnZlUcG1iwUruipiWwsgi4rYFRGw1wcq
Ksq6WMCCypsU0PW1753vmzt/zpxz5j9zz53MAKBiz8nLy0FVAcgVFohiQvxZSckpLFIXwIAeoAN9
QOJwxXl+0dERAMpw/3cZuAUQaX/dVhrrX8f/q6jx+GIuAEg0xGk8MTcX4qMA4FrcPFEBAIQWqDee
XpAnxX0Qa4ggQQCIuBRnyLGWFKfJsY3MJi4mAGI2AGQqhyPKAIAu5c0q5GbAOHQpR3shTyCEeBPE
PtxMDg/iBxDb5OZOg1iFDLFF2g9xMv4WM20kJoeTMYLluciEHCgQ5+Vwiv7P5fjfkpsjGZ7DCDZq
pig0RpozXLc92dPCpZgKcaMwLTIKYnWILwp4MnspvpcpCY1X2PdyxQFwzQATABTwOIHhEOtCzJRk
x/spsCNHJPOF9mikoCAsToHTRNNiFPHRQmFOZIQizuJMftgw3sIXB8UO26QLgsMghpWGHi3OjEuU
80TPFgoSIiGmQ9wmzo4NV/g+Ks4MiBy2EUlipJxNIH6fLgqOkdtgWrni4bwwOy5HNhesBYxdkBkX
KvfFkvjipIhhDjx+YJCcA8bjC+MV3DBYXf4xCt/SvJxohT22hZ8TEiNfZ+yQuDB22LejABaYfB2w
x1mccdGKuQbyCqLj5NxwFESAABAIWEACWxqYBrKAoLW3rhf+ko8EAw4QgQzAB7YKzbBHomxECJ+x
oBj8CREfiEf8/GWjfFAI9V9HtPKnLUiXjRbKPLLBM4hzcR3cB/fCI+CTDZsj7o57DPuxVIZnJQYR
A4mhxGCi5QgPLmSdA5sICP6NLhz2fJidlItwOIfv8QjPCO2Ex4SbhE7CXZAAnsqiKKymChaIfmLO
AuNBJ4wWrMgu7cfscDPI2gX3x70hf8gdZ+I6wBZ3hpn44b4wNxeo/ZGhZITb97X8eT4p6x/zUejp
VnQXBYu0kTcTMGL1c5SAH9aIB/vwny2xxdgR7AJ2GruENWJ1gIWdwuqxFuyEFI9UwlNZJQzPFiPj
lg3jCIZt7Gvse+y//DQ3RzG/dL3EBfwZBdKPIWBaXpFIkJFZwPKDuzGfFSbk2tmwHO0d3ACQ7u3y
reMdU7ZnI8zL33X5TQB4lEFlxncdxxiA488AYAx81xm/heW+AoATbVyJqFCuk27HgAAoQAV+Fdrw
f8MYWMB8HIEr8AJsEATGgSgQB5LBFLjimSAXcp4OZoH5oBSUgxVgLdgItoIdYA/YDw6DOtAIToPz
4ApoAzfBfVgX3eAV6AMDYBBBEBJCQxiINmKAmCLWiCPijvggQUgEEoMkI6lIBiJEJMgsZCFSjqxC
NiLbkWrkd+Q4chq5hLQjd5EupAd5i3xGMZSKaqB6qBk6BnVH/dBwNA6djGag+WgxWoIuQ9ejVeg+
tBY9jV5Bb6Kd6Cu0HwOYMsbEDDFbzB0LwKKwFCwdE2FzsDKsAqvCDmAN8D1fxzqxXuwTTsQZOAu3
hbUZisfjXDwfn4MvxTfie/Ba/Cx+He/C+/BvBBpBl2BN8CSEEZIIGYTphFJCBWEX4RjhHPxuugkD
RCKRSTQnusHvMpmYRZxJXErcTDxIbCK2E58Q+0kkkjbJmuRNiiJxSAWkUtIG0j7SKVIHqZv0kaxM
NiA7koPJKWQheQG5gryXfJLcQX5OHlRSVTJV8lSKUuIpFSktV9qp1KB0TalbaZCiRjGneFPiKFmU
+ZT1lAOUc5QHlHfKyspGyh7KE5QFyvOU1ysfUr6o3KX8iapOtaIGUCdRJdRl1N3UJupd6jsajWZG
Y9NSaAW0ZbRq2hnaI9pHOoNuRw+j8+hz6ZX0WnoH/bWKkoqpip/KFJVilQqVIyrXVHpVlVTNVANU
OapzVCtVj6veVu1XY6g5qEWp5aotVdurdknthTpJ3Uw9SJ2nXqK+Q/2M+hMGxjBmBDC4jIWMnYxz
jG4Nooa5RphGlka5xn6NVo0+TXVNZ80EzRmalZonNDuZGNOMGcbMYS5nHmbeYn4epTfKbxR/1JJR
B0Z1jPqgNVqLrcXXKtM6qHVT67M2SztIO1t7pXad9kMdXMdKZ4LOdJ0tOud0ekdrjPYazR1dNvrw
6Hu6qK6VbozuTN0dui26/Xr6eiF6eXob9M7o9eoz9dn6Wfpr9E/q9xgwDHwMBAZrDE4ZvGRpsvxY
Oaz1rLOsPkNdw1BDieF2w1bDQSNzo3ijBUYHjR4aU4zdjdON1xg3G/eZGJiMN5llUmNyz1TJ1N00
03Sd6QXTD2bmZolmi8zqzF6Ya5mHmReb15g/sKBZ+FrkW1RZ3LAkWrpbZltutmyzQq1crDKtKq2u
WaPWrtYC683W7TYEGw8boU2VzW1bqq2fbaFtjW2XHdMuwm6BXZ3d6zEmY1LGrBxzYcw3exf7HPud
9vcd1B3GOSxwaHB462jlyHWsdLzhRHMKdprrVO/0xtname+8xfmOC8NlvMsil2aXr65uriLXA649
biZuqW6b3G67a7hHuy91v+hB8PD3mOvR6PHJ09WzwPOw519etl7ZXnu9Xow1H8sfu3PsE28jb473
du9OH5ZPqs82n05fQ1+Ob5XvY7Yxm8fexX7uZ+mX5bfP77W/vb/I/5j/hwDPgNkBTYFYYEhgWWBr
kHpQfNDGoEfBRsEZwTXBfSEuITNDmkIJoeGhK0Nvh+mFccOqw/rGuY2bPe5sODU8Nnxj+OMIqwhR
RMN4dPy48avHP4g0jRRG1kWBqLCo1VEPo82j86P/mECcED2hcsKzGIeYWTEXYhmxU2P3xg7E+cct
j7sfbxEviW9OUEmYlFCd8CExMHFVYmfSmKTZSVeSdZIFyfUppJSElF0p/RODJq6d2D3JZVLppFuT
zSfPmHxpis6UnCknpqpM5Uw9kkpITUzdm/qFE8Wp4vSnhaVtSuvjBnDXcV/x2Lw1vB6+N38V/3m6
d/qq9BcZ3hmrM3oyfTMrMnsFAYKNgjdZoVlbsz5kR2Xvzh7KScw5mEvOTc09LlQXZgvPTtOfNmNa
e551XmleZ75n/tr8PlG4aJcYEU8W1xdowGNOi8RC8oukq9CnsLLw4/SE6UdmqM0QzmgpsipaUvS8
OLj4t5n4TO7M5lmGs+bP6prtN3v7HGRO2pzmucZzS+Z2zwuZt2c+ZX72/KsL7BesWvB+YeLChhK9
knklT34J+aWmlF4qKr29yGvR1sX4YsHi1iVOSzYs+VbGK7tcbl9eUf5lKXfp5V8dfl3/69Cy9GWt
y12Xb1lBXCFccWul78o9q9RWFa96snr86to1rDVla96vnbr2UoVzxdZ1lHWSdZ3rI9bXbzDZsGLD
l42ZG29W+lce3KS7acmmD5t5mzu2sLcc2Kq3tXzr522CbXe2h2yvrTKrqthB3FG449nOhJ0XfnP/
rXqXzq7yXV93C3d37onZc7barbp6r+7e5TVojaSmZ9+kfW37A/fXH7A9sP0g82D5IXBIcujl76m/
3zocfrj5iPuRA0dNj246xjhWVovUFtX21WXWddYn17cfH3e8ucGr4dgfdn/sbjRsrDyheWL5ScrJ
kpNDp4pP9TflNfWezjj9pHlq8/0zSWdunJ1wtvVc+LmL54PPn7ngd+HURe+LjZc8Lx2/7H657orr
ldoWl5ZjV12uHmt1ba295natvs2jraF9bPvJDt+O09cDr5+/EXbjys3Im+234m/duT3pducd3p0X
d3PuvrlXeG/w/rwHhAdlD1UfVjzSfVT1D8t/HOx07TzRFdjV8jj28f0n3CevnoqffukueUZ7VvHc
4Hn1C8cXjT3BPW0vJ77sfpX3arC39E+1Pze9tnh99C/2Xy19SX3db0Rvht4ufaf9bvd75/fN/dH9
jwZyBwY/lH3U/rjnk/unC58TPz8fnP6F9GX9V8uvDd/Cvz0Yyh0ayuOIOLKjAAYbmp4OwNvdANCS
4dmhDQAKXX73kgkivy/KEPhPWH4/k4krALvZAMTPAyACnlG2wGYKMRX20qN3HBugTk4jTSHidCdH
eSwqvMEQPg4NvdMDgNQAwFfR0NDg5qGhrzsh2bsANOXL73xSIcLz/TbZOeeqcVEg+En+Cd8+bBGE
+qe9AAAACXBIWXMAABYlAAAWJQFJUiTwAAACBGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6
eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAi
PgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRm
LXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAg
ICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyIKICAgICAgICAg
ICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8
ZXhpZjpQaXhlbFlEaW1lbnNpb24+NTg0PC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgICAg
PGV4aWY6UGl4ZWxYRGltZW5zaW9uPjE1ODwvZXhpZjpQaXhlbFhEaW1lbnNpb24+CiAgICAgICAg
IDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2Ny
aXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgrYaV7IAAAB2UlEQVRYCe2WoV/CQBTH
HxaSyUayWWyzaLMMi/wBGrStKMkCBD4GTKZhMQkdypJQsGDCMgiQoGxJixRJ844xNt1t4919+HwW
7spu7969++179+4t45AGKW47Kda2lCYFiu6QJCgJihIQnS/PoCQoSkB0PvcZnA0nMN9g9c/JEOzF
Bo5RLvRnAdvGRslRFMVRSq/Od8xkq//i+qm6M/2JcYwZQhNc2B24vO+639utwGm5wyRpv9ehUHxy
/b6aUG5PohjF2tECs7k8GPqVH5Qh0hXX9H3UKjxfHPjviF6G0kX4r13DImrQf8jDnJA7KwbEHVeh
Vz+H3fVMXIdbIF0mJPL/2oLiaDj0Fgc15E5uwXgMbHdgcI9sqwg5L5QQQS/I2/UR3I28N/o8hNag
AftBE2dfiCBdk27zX3HUOgItIrvpKKYJEUw8g2oNeiRxeBOEfgg3wZA4khD9wSDxCsLQ4xZofzTI
JRy+SrIk4jJxEu5JjEg8QVJJCtqqQtCVGFcJS6TWnmF0+b4xZTByyGzdrGqxkVCLdeFaDJEqEgam
5jhWnDfdGpuOxfmjQGMIZbG/D9vr4c/g9rQwI0uBTCwIoySIgMV0lQSZWBBGSRABi+kqCTKxIIyp
J/gL86pOZRzqaU0AAAAASUVORK5CYII=

------MultipartBoundary--lVblIC6eJFfMBMRBEYeOrYaBwpwG3IrvOjGBnKMKJD----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://viewsourcecode.org/snaptoken/kilo/i/arrow.png

iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAMFWlDQ1BJQ0MgUHJvZmlsZQAASImV
VwdYU8kWnltSCEkogQhICb0jvQqEDoKAdLARkgChREgICnZlUcG1iwUruipiWwsgi4rYFRGw1wcq
Ksq6WMCCypsU0PW1753vmzt/zpxz5j9zz53MAKBiz8nLy0FVAcgVFohiQvxZSckpLFIXwIAeoAN9
QOJwxXl+0dERAMpw/3cZuAUQaX/dVhrrX8f/q6jx+GIuAEg0xGk8MTcX4qMA4FrcPFEBAIQWqDee
XpAnxX0Qa4ggQQCIuBRnyLGWFKfJsY3MJi4mAGI2AGQqhyPKAIAu5c0q5GbAOHQpR3shTyCEeBPE
PtxMDg/iBxDb5OZOg1iFDLFF2g9xMv4WM20kJoeTMYLluciEHCgQ5+Vwiv7P5fjfkpsjGZ7DCDZq
pig0RpozXLc92dPCpZgKcaMwLTIKYnWILwp4MnspvpcpCY1X2PdyxQFwzQATABTwOIHhEOtCzJRk
x/spsCNHJPOF9mikoCAsToHTRNNiFPHRQmFOZIQizuJMftgw3sIXB8UO26QLgsMghpWGHi3OjEuU
80TPFgoSIiGmQ9wmzo4NV/g+Ks4MiBy2EUlipJxNIH6fLgqOkdtgWrni4bwwOy5HNhesBYxdkBkX
KvfFkvjipIhhDjx+YJCcA8bjC+MV3DBYXf4xCt/SvJxohT22hZ8TEiNfZ+yQuDB22LejABaYfB2w
x1mccdGKuQbyCqLj5NxwFESAABAIWEACWxqYBrKAoLW3rhf+ko8EAw4QgQzAB7YKzbBHomxECJ+x
oBj8CREfiEf8/GWjfFAI9V9HtPKnLUiXjRbKPLLBM4hzcR3cB/fCI+CTDZsj7o57DPuxVIZnJQYR
A4mhxGCi5QgPLmSdA5sICP6NLhz2fJidlItwOIfv8QjPCO2Ex4SbhE7CXZAAnsqiKKymChaIfmLO
AuNBJ4wWrMgu7cfscDPI2gX3x70hf8gdZ+I6wBZ3hpn44b4wNxeo/ZGhZITb97X8eT4p6x/zUejp
VnQXBYu0kTcTMGL1c5SAH9aIB/vwny2xxdgR7AJ2GruENWJ1gIWdwuqxFuyEFI9UwlNZJQzPFiPj
lg3jCIZt7Gvse+y//DQ3RzG/dL3EBfwZBdKPIWBaXpFIkJFZwPKDuzGfFSbk2tmwHO0d3ACQ7u3y
reMdU7ZnI8zL33X5TQB4lEFlxncdxxiA488AYAx81xm/heW+AoATbVyJqFCuk27HgAAoQAV+Fdrw
f8MYWMB8HIEr8AJsEATGgSgQB5LBFLjimSAXcp4OZoH5oBSUgxVgLdgItoIdYA/YDw6DOtAIToPz
4ApoAzfBfVgX3eAV6AMDYBBBEBJCQxiINmKAmCLWiCPijvggQUgEEoMkI6lIBiJEJMgsZCFSjqxC
NiLbkWrkd+Q4chq5hLQjd5EupAd5i3xGMZSKaqB6qBk6BnVH/dBwNA6djGag+WgxWoIuQ9ejVeg+
tBY9jV5Bb6Kd6Cu0HwOYMsbEDDFbzB0LwKKwFCwdE2FzsDKsAqvCDmAN8D1fxzqxXuwTTsQZOAu3
hbUZisfjXDwfn4MvxTfie/Ba/Cx+He/C+/BvBBpBl2BN8CSEEZIIGYTphFJCBWEX4RjhHPxuugkD
RCKRSTQnusHvMpmYRZxJXErcTDxIbCK2E58Q+0kkkjbJmuRNiiJxSAWkUtIG0j7SKVIHqZv0kaxM
NiA7koPJKWQheQG5gryXfJLcQX5OHlRSVTJV8lSKUuIpFSktV9qp1KB0TalbaZCiRjGneFPiKFmU
+ZT1lAOUc5QHlHfKyspGyh7KE5QFyvOU1ysfUr6o3KX8iapOtaIGUCdRJdRl1N3UJupd6jsajWZG
Y9NSaAW0ZbRq2hnaI9pHOoNuRw+j8+hz6ZX0WnoH/bWKkoqpip/KFJVilQqVIyrXVHpVlVTNVANU
OapzVCtVj6veVu1XY6g5qEWp5aotVdurdknthTpJ3Uw9SJ2nXqK+Q/2M+hMGxjBmBDC4jIWMnYxz
jG4Nooa5RphGlka5xn6NVo0+TXVNZ80EzRmalZonNDuZGNOMGcbMYS5nHmbeYn4epTfKbxR/1JJR
B0Z1jPqgNVqLrcXXKtM6qHVT67M2SztIO1t7pXad9kMdXMdKZ4LOdJ0tOud0ekdrjPYazR1dNvrw
6Hu6qK6VbozuTN0dui26/Xr6eiF6eXob9M7o9eoz9dn6Wfpr9E/q9xgwDHwMBAZrDE4ZvGRpsvxY
Oaz1rLOsPkNdw1BDieF2w1bDQSNzo3ijBUYHjR4aU4zdjdON1xg3G/eZGJiMN5llUmNyz1TJ1N00
03Sd6QXTD2bmZolmi8zqzF6Ya5mHmReb15g/sKBZ+FrkW1RZ3LAkWrpbZltutmyzQq1crDKtKq2u
WaPWrtYC683W7TYEGw8boU2VzW1bqq2fbaFtjW2XHdMuwm6BXZ3d6zEmY1LGrBxzYcw3exf7HPud
9vcd1B3GOSxwaHB462jlyHWsdLzhRHMKdprrVO/0xtname+8xfmOC8NlvMsil2aXr65uriLXA649
biZuqW6b3G67a7hHuy91v+hB8PD3mOvR6PHJ09WzwPOw519etl7ZXnu9Xow1H8sfu3PsE28jb473
du9OH5ZPqs82n05fQ1+Ob5XvY7Yxm8fexX7uZ+mX5bfP77W/vb/I/5j/hwDPgNkBTYFYYEhgWWBr
kHpQfNDGoEfBRsEZwTXBfSEuITNDmkIJoeGhK0Nvh+mFccOqw/rGuY2bPe5sODU8Nnxj+OMIqwhR
RMN4dPy48avHP4g0jRRG1kWBqLCo1VEPo82j86P/mECcED2hcsKzGIeYWTEXYhmxU2P3xg7E+cct
j7sfbxEviW9OUEmYlFCd8CExMHFVYmfSmKTZSVeSdZIFyfUppJSElF0p/RODJq6d2D3JZVLppFuT
zSfPmHxpis6UnCknpqpM5Uw9kkpITUzdm/qFE8Wp4vSnhaVtSuvjBnDXcV/x2Lw1vB6+N38V/3m6
d/qq9BcZ3hmrM3oyfTMrMnsFAYKNgjdZoVlbsz5kR2Xvzh7KScw5mEvOTc09LlQXZgvPTtOfNmNa
e551XmleZ75n/tr8PlG4aJcYEU8W1xdowGNOi8RC8oukq9CnsLLw4/SE6UdmqM0QzmgpsipaUvS8
OLj4t5n4TO7M5lmGs+bP6prtN3v7HGRO2pzmucZzS+Z2zwuZt2c+ZX72/KsL7BesWvB+YeLChhK9
knklT34J+aWmlF4qKr29yGvR1sX4YsHi1iVOSzYs+VbGK7tcbl9eUf5lKXfp5V8dfl3/69Cy9GWt
y12Xb1lBXCFccWul78o9q9RWFa96snr86to1rDVla96vnbr2UoVzxdZ1lHWSdZ3rI9bXbzDZsGLD
l42ZG29W+lce3KS7acmmD5t5mzu2sLcc2Kq3tXzr522CbXe2h2yvrTKrqthB3FG449nOhJ0XfnP/
rXqXzq7yXV93C3d37onZc7barbp6r+7e5TVojaSmZ9+kfW37A/fXH7A9sP0g82D5IXBIcujl76m/
3zocfrj5iPuRA0dNj246xjhWVovUFtX21WXWddYn17cfH3e8ucGr4dgfdn/sbjRsrDyheWL5ScrJ
kpNDp4pP9TflNfWezjj9pHlq8/0zSWdunJ1wtvVc+LmL54PPn7ngd+HURe+LjZc8Lx2/7H657orr
ldoWl5ZjV12uHmt1ba295natvs2jraF9bPvJDt+O09cDr5+/EXbjys3Im+234m/duT3pducd3p0X
d3PuvrlXeG/w/rwHhAdlD1UfVjzSfVT1D8t/HOx07TzRFdjV8jj28f0n3CevnoqffukueUZ7VvHc
4Hn1C8cXjT3BPW0vJ77sfpX3arC39E+1Pze9tnh99C/2Xy19SX3db0Rvht4ufaf9bvd75/fN/dH9
jwZyBwY/lH3U/rjnk/unC58TPz8fnP6F9GX9V8uvDd/Cvz0Yyh0ayuOIOLKjAAYbmp4OwNvdANCS
4dmhDQAKXX73kgkivy/KEPhPWH4/k4krALvZAMTPAyACnlG2wGYKMRX20qN3HBugTk4jTSHidCdH
eSwqvMEQPg4NvdMDgNQAwFfR0NDg5qGhrzsh2bsANOXL73xSIcLz/TbZOeeqcVEg+En+Cd8+bBGE
+qe9AAAACXBIWXMAABYlAAAWJQFJUiTwAAACBGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6
eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAi
PgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRm
LXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAg
ICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyIKICAgICAgICAg
ICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8
ZXhpZjpQaXhlbFlEaW1lbnNpb24+NTg0PC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgICAg
PGV4aWY6UGl4ZWxYRGltZW5zaW9uPjE1ODwvZXhpZjpQaXhlbFhEaW1lbnNpb24+CiAgICAgICAg
IDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2Ny
aXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgrYaV7IAAABPklEQVRYCWP8DwQMgxgw
DWK3gZ026kBKY2g0BEdDkNIQoFT/aBocDUFKQ4BS/aNpcDQEKQ0BSvWTnwZ/PmN48OwzpfYT1E+e
Az+fZci19mMIqTrG8JOgFRQqALWoSQGf7u/4H2ls/N/YOP7/mU+k6CRPLQvx/vvMcGByFUPJwuNQ
Lc8ZHhzbzPDgyy+ijfgJDG5j32AGdV6itTCQ5MDLx2GOA1nwlmHt8uUMb5+/Jdq2t2+FGVqtfIAO
ZCdaDwOpAX9/xyRg9IKiuPL//R+k6iZdPckOBFnx6dIaiCNbj5JuI4k6SIhiRKzw6gYz7JjPw7Dr
mTBCkEYsRpCHaGQ2VYwlrxykitXEGTLqQOLCCbeq0RDEHTbEyYyGIHHhhFvVaAjiDhviZEZDkLhw
wq1qNARxhw1xMqMhSFw44VYFAJIg/q91M+6jAAAAAElFTkSuQmCC

------MultipartBoundary--lVblIC6eJFfMBMRBEYeOrYaBwpwG3IrvOjGBnKMKJD----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://fonts.googleapis.com/css?family=PT+Serif:400,400i,700|Work+Sans:700|Fira+Mono:400,500

@charset "utf-8";

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bX2SlFPv1weGeLZDtgK_=
7Ss9XZYalI.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C8A, =
U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bX2SlFPv1weGeLZDtgIv=
7Ss9XZYalI.woff2") format("woff2"); unicode-range: U+301, U+400-45F, U+490-=
491, U+4B0-4B1, U+2116; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bX2SlFPv1weGeLZDtgKv=
7Ss9XZYalI.woff2") format("woff2"); unicode-range: U+1F00-1FFF; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bX2SlFPv1weGeLZDtgJf=
7Ss9XZYalI.woff2") format("woff2"); unicode-range: U+370-377, U+37A-37F, U+=
384-38A, U+38C, U+38E-3A1, U+3A3-3FF; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bX2SlFPv1weGeLZDtgnN=
_3nP3TaZFxBQ.woff2") format("woff2"); unicode-range: U+2000-2001, U+2004-20=
08, U+200A, U+23B8-23BD, U+2500-259F; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bX2SlFPv1weGeLZDtgKP=
7Ss9XZYalI.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5, U+=
2C7-2CC, U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00-1E9=
F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A7=
20-A7FF; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bX2SlFPv1weGeLZDtgJv=
7Ss9XZYQ.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, =
U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20AC, U=
+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 500=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bS2SlFPv1weGeLZDto1d=
3Hk_fUS5NBBASF.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C=
8A, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 500=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bS2SlFPv1weGeLZDto1d=
3HmvfUS5NBBASF.woff2") format("woff2"); unicode-range: U+301, U+400-45F, U+=
490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 500=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bS2SlFPv1weGeLZDto1d=
3HkvfUS5NBBASF.woff2") format("woff2"); unicode-range: U+1F00-1FFF; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 500=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bS2SlFPv1weGeLZDto1d=
3HnffUS5NBBASF.woff2") format("woff2"); unicode-range: U+370-377, U+37A-37F=
, U+384-38A, U+38C, U+38E-3A1, U+3A3-3FF; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 500=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bS2SlFPv1weGeLZDto1d=
3HJNbxZLtLDDy8Rg.woff2") format("woff2"); unicode-range: U+2000-2001, U+200=
4-2008, U+200A, U+23B8-23BD, U+2500-259F; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 500=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bS2SlFPv1weGeLZDto1d=
3HkPfUS5NBBASF.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5=
, U+2C7-2CC, U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00=
-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, =
U+A720-A7FF; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 500=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bS2SlFPv1weGeLZDto1d=
3HnvfUS5NBBA.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-1=
53, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20A=
C, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "PT Serif"; font-style: italic; font-weight: 400;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRTQgYoZZY2vCFuvAFT_rC1=
cgT9rct48Q.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C8A, =
U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "PT Serif"; font-style: italic; font-weight: 400;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRTQgYoZZY2vCFuvAFT_rm1=
cgT9rct48Q.woff2") format("woff2"); unicode-range: U+301, U+400-45F, U+490-=
491, U+4B0-4B1, U+2116; }

@font-face { font-family: "PT Serif"; font-style: italic; font-weight: 400;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRTQgYoZZY2vCFuvAFT_rO1=
cgT9rct48Q.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5, U+=
2C7-2CC, U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00-1E9=
F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A7=
20-A7FF; }

@font-face { font-family: "PT Serif"; font-style: italic; font-weight: 400;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRTQgYoZZY2vCFuvAFT_r21=
cgT9rcs.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U=
+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20AC, U+=
2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 400;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRVQgYoZZY2vCFuvAFbzr-_=
dSb_nco.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C8A, U+2=
0B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 400;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRVQgYoZZY2vCFuvAFSzr-_=
dSb_nco.woff2") format("woff2"); unicode-range: U+301, U+400-45F, U+490-491=
, U+4B0-4B1, U+2116; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 400;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRVQgYoZZY2vCFuvAFYzr-_=
dSb_nco.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5, U+2C7=
-2CC, U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00-1E9F, =
U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-=
A7FF; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 400;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRVQgYoZZY2vCFuvAFWzr-_=
dSb_.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2B=
B-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20AC, U+212=
2, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 700;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRSQgYoZZY2vCFuvAnt66qf=
VyvVp8NAyIw.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C8A,=
 U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 700;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRSQgYoZZY2vCFuvAnt66qW=
VyvVp8NAyIw.woff2") format("woff2"); unicode-range: U+301, U+400-45F, U+490=
-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 700;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRSQgYoZZY2vCFuvAnt66qc=
VyvVp8NAyIw.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5, U=
+2C7-2CC, U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00-1E=
9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A=
720-A7FF; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 700;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRSQgYoZZY2vCFuvAnt66qS=
VyvVp8NA.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, =
U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20AC, U=
+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "Work Sans"; font-style: normal; font-weight: 700=
; src: url("https://fonts.gstatic.com/s/worksans/v24/QGY_z_wNahGAdqQ43RhVcI=
gYT2Xz5u32K67QBiAJpo3ZKyHaQfhf.woff2") format("woff2"); unicode-range: U+10=
2-103, U+110-111, U+128-129, U+168-169, U+1A0-1A1, U+1AF-1B0, U+300-301, U+=
303-304, U+308-309, U+323, U+329, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: "Work Sans"; font-style: normal; font-weight: 700=
; src: url("https://fonts.gstatic.com/s/worksans/v24/QGY_z_wNahGAdqQ43RhVcI=
gYT2Xz5u32K67QBiEJpo3ZKyHaQfhf.woff2") format("woff2"); unicode-range: U+10=
0-2BA, U+2BD-2C5, U+2C7-2CC, U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1=
D00-1DBF, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+211=
3, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "Work Sans"; font-style: normal; font-weight: 700=
; src: url("https://fonts.gstatic.com/s/worksans/v24/QGY_z_wNahGAdqQ43RhVcI=
gYT2Xz5u32K67QBi8Jpo3ZKyHaQQ.woff2") format("woff2"); unicode-range: U+0-FF=
, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+=
2000-206F, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }
------MultipartBoundary--lVblIC6eJFfMBMRBEYeOrYaBwpwG3IrvOjGBnKMKJD----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://viewsourcecode.org/snaptoken/kilo/style.css

@charset "utf-8";

@import url("https://fonts.googleapis.com/css?family=3DPT+Serif:400,400i,70=
0|Work+Sans:700|Fira+Mono:400,500");

* { margin: 0px; padding: 0px; box-sizing: border-box; }

body { font-family: "PT Serif", Utopia, Georgia, Times, "Apple Symbols", se=
rif; line-height: 140%; color: rgb(51, 51, 51); font-size: 18px; }

#container { width: 700px; margin: 18px auto; }

.bar { display: block; width: 100%; background-color: rgb(204, 238, 187); b=
ox-shadow: rgb(221, 221, 221) 0px 0px 15px 1px; }

.bar > nav { display: flex; justify-content: space-between; width: 700px; m=
argin: 0px auto; }

footer.bar > nav { justify-content: center; }

.bar > nav > a { display: block; padding: 2px 0px 4px; color: rgb(17, 85, 3=
4); }

#version { text-align: right; font-size: 12px; font-family: "Fira Mono", mo=
nospace; padding-right: 5px; }

#version a { color: rgb(51, 51, 51); }

h1, h2, h3, h4, h5, h6 { font-family: "Work Sans", Futura, Helvetica, Arial=
, sans-serif; color: rgb(34, 34, 34); line-height: 100%; margin-top: 32px; =
}

h2 a, h3 a, h4 a { color: inherit; text-decoration: none; }

h2 a::before, h3 a::before, h4 a::before { content: "#"; color: rgb(255, 25=
5, 255); font-weight: normal; transition: color 0.15s; display: block; floa=
t: left; width: 32px; margin-left: -32px; }

h2 a:hover::before, h3 a:hover::before, h4 a:hover::before { color: rgb(204=
, 204, 204); }

h1 { margin-top: 0px; font-size: 38px; border-bottom: 3px solid rgb(238, 11=
9, 204); display: inline-block; }

h2 { font-size: 26px; }

p { margin-top: 18px; }

ul, ol { margin-top: 18px; margin-left: 36px; }

hr { border-top: none; border-right: none; border-left: none; border-image:=
 initial; border-bottom: 1px solid rgb(136, 136, 136); }

a { color: rgb(34, 102, 221); }

code { font-family: "Fira Mono", monospace; font-size: inherit; white-space=
: nowrap; background-color: rgb(239, 244, 234); padding: 1px 3px; }

h1 code, h2 code, h3 code, h4 code, h5 code, h6 code { font-weight: normal;=
 }

kbd { font-family: "Fira Mono", monospace; border-radius: 3px; padding: 2px=
 3px; box-shadow: rgb(119, 119, 119) 1px 1px 1px; margin: 2px; font-size: 1=
4px; background: rgb(247, 247, 247); font-weight: 500; color: rgb(85, 85, 8=
5); white-space: nowrap; }

h1 kbd, h2 kbd, h3 kbd, h4 kbd, h5 kbd, h6 kbd { font-size: 80%; }

.diff code { font-size: 14px; line-height: 20px; padding: 0px; margin-botto=
m: 18px; white-space: inherit; }

.diff pre { background-color: rgb(255, 252, 250); padding: 5px 0px; }

.diff { border: 1px solid rgb(237, 231, 227); border-radius: 3px; margin-to=
p: 18px; }

.diff .diff-header { display: flex; justify-content: space-between; padding=
: 0px 5px; background-color: rgb(237, 231, 227); font-size: 16px; color: rg=
b(102, 102, 102); }

.diff .step-number { font-weight: bold; }

.diff .step-filename { font-weight: bold; }

.diff .step-name { font-family: "Fira Mono", monospace; font-size: 12px; }

.diff .diff-header a { text-decoration: none; color: rgb(102, 102, 102); }

.diff .diff-header a:hover { text-decoration: underline; }

.diff .step-filename a { text-decoration: underline; }

.diff .diff-footer { background-color: rgb(237, 231, 227); }

.diff .diff-footer > div { font-size: 12px; line-height: 16px; height: 16px=
; padding-right: 5px; text-align: right; }

.diff .diff-tag-c0 { color: rgb(187, 51, 51); }

.diff .diff-tag-c1 { color: rgb(51, 51, 187); }

.diff .diff-tag-c2 { color: rgb(51, 187, 51); }

.diff .diff-tag-c-unknown { color: rgb(170, 102, 34); }

.diff .line { display: block; height: 20px; padding: 0px 5px; position: rel=
ative; }

.diff .line.folded { background-color: rgb(238, 238, 255); opacity: 0.5; }

.diff ins.line { background-color: rgb(255, 255, 221); text-decoration: non=
e; }

.diff ins.line::after { display: block; content: ""; width: 20px; height: 2=
0px; background-image: url("i/arrow.png"); background-size: 20px 20px; posi=
tion: absolute; right: -24px; top: 0px; }

.diff del.line { background-color: rgb(255, 221, 221); text-decoration: lin=
e-through; }

.diff del.line::after { display: block; content: ""; width: 20px; height: 2=
0px; background-image: url("i/x.png"); background-size: 20px 20px; position=
: absolute; right: -24px; top: 0px; }

@media screen and (max-width: 700px) {
  #container { width: auto; margin: 18px 0px; padding: 0px 5px; }
  .bar > nav { width: auto; margin: 0px; padding: 0px 5px; }
  .highlight { overflow-x: scroll; }
  .diff .line { width: 700px; }
  .diff ins.line::after, .diff del.line::after { display: none; }
}

.highlight table td { padding: 5px; }

.highlight table pre { margin: 0px; }

.highlight .cm { color: rgb(153, 153, 136); font-style: italic; }

.highlight .cp { color: rgb(153, 153, 153); font-weight: 500; }

.highlight .c1 { color: rgb(153, 153, 136); font-style: italic; }

.highlight .cs { color: rgb(153, 153, 153); }

.highlight .c, .highlight .cd { color: rgb(153, 153, 136); font-style: ital=
ic; }

.highlight .err { color: rgb(166, 23, 23); background-color: rgb(227, 210, =
210); }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .ge { color: rgb(0, 0, 0); font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: 500; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .kc { color: rgb(0, 0, 0); font-weight: 500; }

.highlight .kd { color: rgb(0, 0, 0); font-weight: 500; }

.highlight .kn { color: rgb(0, 0, 0); font-weight: 500; }

.highlight .kp { color: rgb(0, 0, 0); font-weight: 500; }

.highlight .kr { color: rgb(0, 0, 0); font-weight: 500; }

.highlight .kt { color: rgb(68, 85, 136); font-weight: 500; }

.highlight .k, .highlight .kv { color: rgb(0, 0, 0); font-weight: 500; }

.highlight .mf { color: rgb(0, 153, 153); }

.highlight .mh { color: rgb(0, 153, 153); }

.highlight .il { color: rgb(0, 153, 153); }

.highlight .mi { color: rgb(0, 153, 153); }

.highlight .mo { color: rgb(0, 153, 153); }

.highlight .m, .highlight .mb, .highlight .mx { color: rgb(0, 153, 153); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .s { color: rgb(221, 17, 68); }

.highlight .na { color: rgb(0, 128, 128); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .nb { color: rgb(0, 134, 179); }

.highlight .nc { color: rgb(68, 85, 136); font-weight: 500; }

.highlight .no { color: rgb(0, 128, 128); }

.highlight .nd { color: rgb(60, 93, 93); font-weight: 500; }

.highlight .ni { color: rgb(128, 0, 128); }

.highlight .ne { color: rgb(153, 0, 0); font-weight: 500; }

.highlight .nf { color: rgb(153, 0, 0); font-weight: 500; }

.highlight .nl { color: rgb(153, 0, 0); font-weight: 500; }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: rgb(0, 0, 128); }

.highlight .vc { color: rgb(0, 128, 128); }

.highlight .vg { color: rgb(0, 128, 128); }

.highlight .vi { color: rgb(0, 128, 128); }

.highlight .nv { color: rgb(0, 128, 128); }

.highlight .ow { color: rgb(0, 0, 0); font-weight: 500; }

.highlight .o { color: rgb(0, 0, 0); font-weight: 500; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight { background-color: rgb(248, 248, 248); }
------MultipartBoundary--lVblIC6eJFfMBMRBEYeOrYaBwpwG3IrvOjGBnKMKJD------
