From: <Saved by Blink>
Snapshot-Content-Location: https://viewsourcecode.org/snaptoken/kilo/07.syntaxHighlighting.html
Subject: 7. Syntax highlighting | Build Your Own Text Editor
Date: Tue, 23 Sep 2025 12:38:11 +0100
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--wjIh6xuEwOEDnUY6wRwfDLlxiXSHeUdd07dSW76Mno----"


------MultipartBoundary--wjIh6xuEwOEDnUY6wRwfDLlxiXSHeUdd07dSW76Mno----
Content-Type: text/html
Content-ID: <frame-52DD9075882A8A50928F6BAC7A5437A4@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://viewsourcecode.org/snaptoken/kilo/07.syntaxHighlighting.html

<!DOCTYPE html><html><head><meta http-equiv=3D"Content-Type" content=3D"tex=
t/html; charset=3DUTF-8">
   =20
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1.0, maximum-scale=3D1.0">
    <title>7. Syntax highlighting | Build Your Own Text Editor</title>
    <link href=3D"https://viewsourcecode.org/snaptoken/kilo/style.css" rel=
=3D"stylesheet">
  </head>
  <body data-new-gr-c-s-check-loaded=3D"14.1254.0" data-gr-ext-installed=3D=
"">
    <header class=3D"bar">
      <nav>
        <a href=3D"https://viewsourcecode.org/snaptoken/kilo/06.search.html=
">=E2=86=90 prev</a>
        <a href=3D"https://viewsourcecode.org/snaptoken/kilo/index.html">co=
ntents</a>
        <a href=3D"https://viewsourcecode.org/snaptoken/kilo/08.appendices.=
html">next =E2=86=92</a>
      </nav>
    </header>
    <div id=3D"container">
      <h1 id=3D"syntax-highlighting">Syntax highlighting</h1>
<h2 id=3D"colorful-digits"><a href=3D"https://viewsourcecode.org/snaptoken/=
kilo/07.syntaxHighlighting.html#colorful-digits">Colorful digits</a></h2>

<p>Let=E2=80=99s start by just getting some color on the screen, as simply =
as possible.
We=E2=80=99ll attempt to highlight numbers by coloring each digit character
<span style=3D"color: red">red</span>.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/syntax-digits/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 142</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/syntax-digits">syntax-digits</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><span =
class=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><spa=
n class=3D"cm">/*** row operations ***/</span></div><div class=3D"line fold=
ed"><span class=3D"cm">/*** editor operations ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span></div><div cla=
ss=3D"line folded"><span class=3D"cm">/*** find ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** append buffer ***/</span></div><di=
v class=3D"line"><span class=3D"cm">/*** output ***/</span></div><div class=
=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void</span> <=
span class=3D"nf">editorScroll</span><span class=3D"p">()</span> <span clas=
s=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"li=
ne"></div><div class=3D"line"><span class=3D"kt">void</span> <span class=3D=
"nf">editorDrawRows</span><span class=3D"p">(</span><span class=3D"k">struc=
t</span> <span class=3D"n">abuf</span> <span class=3D"o">*</span><span clas=
s=3D"n">ab</span><span class=3D"p">)</span> <span class=3D"p">{</span></div=
><div class=3D"line">  <span class=3D"kt">int</span> <span class=3D"n">y</s=
pan><span class=3D"p">;</span></div><div class=3D"line">  <span class=3D"k"=
>for</span> <span class=3D"p">(</span><span class=3D"n">y</span> <span clas=
s=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span> <s=
pan class=3D"n">y</span> <span class=3D"o">&lt;</span> <span class=3D"n">E<=
/span><span class=3D"p">.</span><span class=3D"n">screenrows</span><span cl=
ass=3D"p">;</span> <span class=3D"n">y</span><span class=3D"o">++</span><sp=
an class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line"=
>    <span class=3D"kt">int</span> <span class=3D"n">filerow</span> <span c=
lass=3D"o">=3D</span> <span class=3D"n">y</span> <span class=3D"o">+</span>=
 <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">rowo=
ff</span><span class=3D"p">;</span></div><div class=3D"line">    <span clas=
s=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">filerow</span=
> <span class=3D"o">&gt;=3D</span> <span class=3D"n">E</span><span class=3D=
"p">.</span><span class=3D"n">numrows</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span></div><div class=3D"line">      <span class=3D"k">if<=
/span> <span class=3D"p">(</span><span class=3D"n">E</span><span class=3D"p=
">.</span><span class=3D"n">numrows</span> <span class=3D"o">=3D=3D</span> =
<span class=3D"mi">0</span> <span class=3D"o">&amp;&amp;</span> <span class=
=3D"n">y</span> <span class=3D"o">=3D=3D</span> <span class=3D"n">E</span><=
span class=3D"p">.</span><span class=3D"n">screenrows</span> <span class=3D=
"o">/</span> <span class=3D"mi">3</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span></div><div class=3D"line">        <span class=3D"kt">char=
</span> <span class=3D"n">welcome</span><span class=3D"p">[</span><span cla=
ss=3D"mi">80</span><span class=3D"p">];</span></div><div class=3D"line">   =
     <span class=3D"kt">int</span> <span class=3D"n">welcomelen</span> <spa=
n class=3D"o">=3D</span> <span class=3D"n">snprintf</span><span class=3D"p"=
>(</span><span class=3D"n">welcome</span><span class=3D"p">,</span> <span c=
lass=3D"k">sizeof</span><span class=3D"p">(</span><span class=3D"n">welcome=
</span><span class=3D"p">),</span></div><div class=3D"line">          <span=
 class=3D"s">"Kilo editor -- version %s"</span><span class=3D"p">,</span> <=
span class=3D"n">KILO_VERSION</span><span class=3D"p">);</span></div><div c=
lass=3D"line">        <span class=3D"k">if</span> <span class=3D"p">(</span=
><span class=3D"n">welcomelen</span> <span class=3D"o">&gt;</span> <span cl=
ass=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screencols</s=
pan><span class=3D"p">)</span> <span class=3D"n">welcomelen</span> <span cl=
ass=3D"o">=3D</span> <span class=3D"n">E</span><span class=3D"p">.</span><s=
pan class=3D"n">screencols</span><span class=3D"p">;</span></div><div class=
=3D"line">        <span class=3D"kt">int</span> <span class=3D"n">padding</=
span> <span class=3D"o">=3D</span> <span class=3D"p">(</span><span class=3D=
"n">E</span><span class=3D"p">.</span><span class=3D"n">screencols</span> <=
span class=3D"o">-</span> <span class=3D"n">welcomelen</span><span class=3D=
"p">)</span> <span class=3D"o">/</span> <span class=3D"mi">2</span><span cl=
ass=3D"p">;</span></div><div class=3D"line">        <span class=3D"k">if</s=
pan> <span class=3D"p">(</span><span class=3D"n">padding</span><span class=
=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line">       =
   <span class=3D"n">abAppend</span><span class=3D"p">(</span><span class=
=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s">"~"</span><spa=
n class=3D"p">,</span> <span class=3D"mi">1</span><span class=3D"p">);</spa=
n></div><div class=3D"line">          <span class=3D"n">padding</span><span=
 class=3D"o">--</span><span class=3D"p">;</span></div><div class=3D"line"> =
       <span class=3D"p">}</span></div><div class=3D"line">        <span cl=
ass=3D"k">while</span> <span class=3D"p">(</span><span class=3D"n">padding<=
/span><span class=3D"o">--</span><span class=3D"p">)</span> <span class=3D"=
n">abAppend</span><span class=3D"p">(</span><span class=3D"n">ab</span><spa=
n class=3D"p">,</span> <span class=3D"s">" "</span><span class=3D"p">,</spa=
n> <span class=3D"mi">1</span><span class=3D"p">);</span></div><div class=
=3D"line">        <span class=3D"n">abAppend</span><span class=3D"p">(</spa=
n><span class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"n">w=
elcome</span><span class=3D"p">,</span> <span class=3D"n">welcomelen</span>=
<span class=3D"p">);</span></div><div class=3D"line">      <span class=3D"p=
">}</span> <span class=3D"k">else</span> <span class=3D"p">{</span></div><d=
iv class=3D"line">        <span class=3D"n">abAppend</span><span class=3D"p=
">(</span><span class=3D"n">ab</span><span class=3D"p">,</span> <span class=
=3D"s">"~"</span><span class=3D"p">,</span> <span class=3D"mi">1</span><spa=
n class=3D"p">);</span></div><div class=3D"line">      <span class=3D"p">}<=
/span></div><div class=3D"line">    <span class=3D"p">}</span> <span class=
=3D"k">else</span> <span class=3D"p">{</span></div><div class=3D"line">    =
  <span class=3D"kt">int</span> <span class=3D"n">len</span> <span class=3D=
"o">=3D</span> <span class=3D"n">E</span><span class=3D"p">.</span><span cl=
ass=3D"n">row</span><span class=3D"p">[</span><span class=3D"n">filerow</sp=
an><span class=3D"p">].</span><span class=3D"n">rsize</span> <span class=3D=
"o">-</span> <span class=3D"n">E</span><span class=3D"p">.</span><span clas=
s=3D"n">coloff</span><span class=3D"p">;</span></div><div class=3D"line">  =
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n"=
>len</span> <span class=3D"o">&lt;</span> <span class=3D"mi">0</span><span =
class=3D"p">)</span> <span class=3D"n">len</span> <span class=3D"o">=3D</sp=
an> <span class=3D"mi">0</span><span class=3D"p">;</span></div><div class=
=3D"line">      <span class=3D"k">if</span> <span class=3D"p">(</span><span=
 class=3D"n">len</span> <span class=3D"o">&gt;</span> <span class=3D"n">E</=
span><span class=3D"p">.</span><span class=3D"n">screencols</span><span cla=
ss=3D"p">)</span> <span class=3D"n">len</span> <span class=3D"o">=3D</span>=
 <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">scre=
encols</span><span class=3D"p">;</span></div><ins class=3D"line">      <spa=
n class=3D"kt">char</span> <span class=3D"o">*</span><span class=3D"n">c</s=
pan> <span class=3D"o">=3D</span> <span class=3D"o">&amp;</span><span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">row</span><span =
class=3D"p">[</span><span class=3D"n">filerow</span><span class=3D"p">].</s=
pan><span class=3D"n">render</span><span class=3D"p">[</span><span class=3D=
"n">E</span><span class=3D"p">.</span><span class=3D"n">coloff</span><span =
class=3D"p">];</span></ins><ins class=3D"line">      <span class=3D"kt">int=
</span> <span class=3D"n">j</span><span class=3D"p">;</span></ins><ins clas=
s=3D"line">      <span class=3D"k">for</span> <span class=3D"p">(</span><sp=
an class=3D"n">j</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</=
span><span class=3D"p">;</span> <span class=3D"n">j</span> <span class=3D"o=
">&lt;</span> <span class=3D"n">len</span><span class=3D"p">;</span> <span =
class=3D"n">j</span><span class=3D"o">++</span><span class=3D"p">)</span> <=
span class=3D"p">{</span></ins><ins class=3D"line">        <span class=3D"k=
">if</span> <span class=3D"p">(</span><span class=3D"n">isdigit</span><span=
 class=3D"p">(</span><span class=3D"n">c</span><span class=3D"p">[</span><s=
pan class=3D"n">j</span><span class=3D"p">]))</span> <span class=3D"p">{</s=
pan></ins><ins class=3D"line">          <span class=3D"n">abAppend</span><s=
pan class=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</spa=
n> <span class=3D"s">"</span><span class=3D"se">\x1b</span><span class=3D"s=
">[31m"</span><span class=3D"p">,</span> <span class=3D"mi">5</span><span c=
lass=3D"p">);</span></ins><ins class=3D"line">          <span class=3D"n">a=
bAppend</span><span class=3D"p">(</span><span class=3D"n">ab</span><span cl=
ass=3D"p">,</span> <span class=3D"o">&amp;</span><span class=3D"n">c</span>=
<span class=3D"p">[</span><span class=3D"n">j</span><span class=3D"p">],</s=
pan> <span class=3D"mi">1</span><span class=3D"p">);</span></ins><ins class=
=3D"line">          <span class=3D"n">abAppend</span><span class=3D"p">(</s=
pan><span class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s"=
>"</span><span class=3D"se">\x1b</span><span class=3D"s">[39m"</span><span =
class=3D"p">,</span> <span class=3D"mi">5</span><span class=3D"p">);</span>=
</ins><ins class=3D"line">        <span class=3D"p">}</span> <span class=3D=
"k">else</span> <span class=3D"p">{</span></ins><ins class=3D"line">       =
   <span class=3D"n">abAppend</span><span class=3D"p">(</span><span class=
=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"o">&amp;</span><s=
pan class=3D"n">c</span><span class=3D"p">[</span><span class=3D"n">j</span=
><span class=3D"p">],</span> <span class=3D"mi">1</span><span class=3D"p">)=
;</span></ins><ins class=3D"line">        <span class=3D"p">}</span></ins><=
ins class=3D"line">      <span class=3D"p">}</span></ins><div class=3D"line=
">    <span class=3D"p">}</span></div><div class=3D"line"></div><div class=
=3D"line">    <span class=3D"n">abAppend</span><span class=3D"p">(</span><s=
pan class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s">"</sp=
an><span class=3D"se">\x1b</span><span class=3D"s">[K"</span><span class=3D=
"p">,</span> <span class=3D"mi">3</span><span class=3D"p">);</span></div><d=
iv class=3D"line">    <span class=3D"n">abAppend</span><span class=3D"p">(<=
/span><span class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"=
s">"</span><span class=3D"se">\r\n</span><span class=3D"s">"</span><span cl=
ass=3D"p">,</span> <span class=3D"mi">2</span><span class=3D"p">);</span></=
div><div class=3D"line">  <span class=3D"p">}</span></div><div class=3D"lin=
e"><span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"=
line folded"><span class=3D"kt">void</span> <span class=3D"nf">editorDrawSt=
atusBar</span><span class=3D"p">(</span><span class=3D"k">struct</span> <sp=
an class=3D"n">abuf</span> <span class=3D"o">*</span><span class=3D"n">ab</=
span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span =
class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line fold=
ed"><span class=3D"kt">void</span> <span class=3D"nf">editorDrawMessageBar<=
/span><span class=3D"p">(</span><span class=3D"k">struct</span> <span class=
=3D"n">abuf</span> <span class=3D"o">*</span><span class=3D"n">ab</span><sp=
an class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D=
"p">}</span></div><div class=3D"line"></div><div class=3D"line folded"><spa=
n class=3D"kt">void</span> <span class=3D"nf">editorRefreshScreen</span><sp=
an class=3D"p">()</span> <span class=3D"p">{</span> =E2=80=A6 <span class=
=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line folded"><=
span class=3D"kt">void</span> <span class=3D"nf">editorSetStatusMessage</sp=
an><span class=3D"p">(</span><span class=3D"k">const</span> <span class=3D"=
kt">char</span> <span class=3D"o">*</span><span class=3D"n">fmt</span><span=
 class=3D"p">,</span> <span class=3D"p">...)</span> <span class=3D"p">{</sp=
an> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><di=
v class=3D"line folded"><span class=3D"cm">/*** input ***/</span></div><div=
 class=3D"line folded"><span class=3D"cm">/*** init ***/</span></div></code=
></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>We can no longer just feed the substring of <code>render</code> that we =
want to print
right into <code>abAppend()</code>. We=E2=80=99ll have to do it character-b=
y-character from now
on. So we loop through the characters and use <code>isdigit()</code> on eac=
h one to test
if it is a digit character. If it is, we precede it with the <code>&lt;esc&=
gt;[31m</code> escape
sequence and follow it by the <code>&lt;esc&gt;[39m</code> sequence.</p>

<p>We previously used the <code>m</code> command
(<a href=3D"http://vt100.net/docs/vt100-ug/chapter3.html#SGR">Select Graphi=
c Rendition</a>)
to draw the status bar using inverted colors. Now we are using it to set th=
e
text color. The
<a href=3D"http://vt100.net/docs/vt100-ug/chapter3.html">VT100 User Guide</=
a> doesn=E2=80=99t
document color, so let=E2=80=99s turn to the Wikipedia article on
<a href=3D"https://en.wikipedia.org/wiki/ANSI_escape_code">ANSI escape code=
s</a>. It
includes a large table containing all the different argument codes you can =
use
with the <code>m</code> command on various terminals. It also includes the =
ANSI color
table with the 8 foreground/background colors available.</p>

<p>The first table says we can set the text color using codes <code>30</cod=
e> to <code>37</code>, and
reset it to the default color using <code>39</code>. The color table says <=
code>0</code> is black,
<code>1</code> is red, and so on, up to <code>7</code> which is white. Putt=
ing these together, we can
set the text color to red using <code>31</code> as an argument to the <code=
>m</code> command. After
printing the digit, we use <code>39</code> as an argument to <code>m</code>=
 to set the text color
back to normal.</p>
<h2 id=3D"refactor-syntax-highlighting"><a href=3D"https://viewsourcecode.o=
rg/snaptoken/kilo/07.syntaxHighlighting.html#refactor-syntax-highlighting">=
Refactor syntax highlighting</a></h2>

<p>Now we know how to color text, but we=E2=80=99re going to have to do a l=
ot more work to
actually highlight entire strings, keywords, comments, and so on. We can=E2=
=80=99t just
decide what color to use based on the class of each character, like we=E2=
=80=99re doing
with digits currently. What we want to do is figure out the highlighting fo=
r
each row of text before we display it, and then rehighlight a line whenever=
 it
gets changed. To do that, we need to store the highlighting of each line in=
 an
array. Let=E2=80=99s add an array to the <code>erow</code> struct named <co=
de>hl</code>, which stands for
=E2=80=9Chighlight=E2=80=9D.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/syntax-refactoring/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 143</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/syntax-refactoring">syntax-refactoring</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line"><span class=3D"=
cm">/*** data ***/</span></div><div class=3D"line"></div><div class=3D"line=
"><span class=3D"k">typedef</span> <span class=3D"k">struct</span> <span cl=
ass=3D"n">erow</span> <span class=3D"p">{</span></div><div class=3D"line"> =
 <span class=3D"kt">int</span> <span class=3D"n">size</span><span class=3D"=
p">;</span></div><div class=3D"line">  <span class=3D"kt">int</span> <span =
class=3D"n">rsize</span><span class=3D"p">;</span></div><div class=3D"line"=
>  <span class=3D"kt">char</span> <span class=3D"o">*</span><span class=3D"=
n">chars</span><span class=3D"p">;</span></div><div class=3D"line">  <span =
class=3D"kt">char</span> <span class=3D"o">*</span><span class=3D"n">render=
</span><span class=3D"p">;</span></div><ins class=3D"line">  <span class=3D=
"kt">unsigned</span> <span class=3D"kt">char</span> <span class=3D"o">*</sp=
an><span class=3D"n">hl</span><span class=3D"p">;</span></ins><div class=3D=
"line"><span class=3D"p">}</span> <span class=3D"n">erow</span><span class=
=3D"p">;</span></div><div class=3D"line"></div><div class=3D"line folded"><=
span class=3D"k">struct</span> <span class=3D"n">editorConfig</span> <span =
class=3D"p">{</span> =E2=80=A6 <span class=3D"p">};</span></div><div class=
=3D"line"></div><div class=3D"line"><span class=3D"k">struct</span> <span c=
lass=3D"n">editorConfig</span> <span class=3D"n">E</span><span class=3D"p">=
;</span></div><div class=3D"line"></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><spa=
n class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span cla=
ss=3D"cm">/*** row operations ***/</span></div><div class=3D"line"></div><d=
iv class=3D"line folded"><span class=3D"kt">int</span> <span class=3D"nf">e=
ditorRowCxToRx</span><span class=3D"p">(</span><span class=3D"n">erow</span=
> <span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p">,=
</span> <span class=3D"kt">int</span> <span class=3D"n">cx</span><span clas=
s=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</=
span></div><div class=3D"line"></div><div class=3D"line folded"><span class=
=3D"kt">int</span> <span class=3D"nf">editorRowRxToCx</span><span class=3D"=
p">(</span><span class=3D"n">erow</span> <span class=3D"o">*</span><span cl=
ass=3D"n">row</span><span class=3D"p">,</span> <span class=3D"kt">int</span=
> <span class=3D"n">rx</span><span class=3D"p">)</span> <span class=3D"p">{=
</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div=
><div class=3D"line folded"><span class=3D"kt">void</span> <span class=3D"n=
f">editorUpdateRow</span><span class=3D"p">(</span><span class=3D"n">erow</=
span> <span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"=
p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span>=
</div><div class=3D"line"></div><div class=3D"line"><span class=3D"kt">void=
</span> <span class=3D"nf">editorInsertRow</span><span class=3D"p">(</span>=
<span class=3D"kt">int</span> <span class=3D"n">at</span><span class=3D"p">=
,</span> <span class=3D"kt">char</span> <span class=3D"o">*</span><span cla=
ss=3D"n">s</span><span class=3D"p">,</span> <span class=3D"kt">size_t</span=
> <span class=3D"n">len</span><span class=3D"p">)</span> <span class=3D"p">=
{</span></div><div class=3D"line">  <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"n">at</span> <span class=3D"o">&lt;</span> <s=
pan class=3D"mi">0</span> <span class=3D"o">||</span> <span class=3D"n">at<=
/span> <span class=3D"o">&gt;</span> <span class=3D"n">E</span><span class=
=3D"p">.</span><span class=3D"n">numrows</span><span class=3D"p">)</span> <=
span class=3D"k">return</span><span class=3D"p">;</span></div><div class=3D=
"line"></div><div class=3D"line">  <span class=3D"n">E</span><span class=3D=
"p">.</span><span class=3D"n">row</span> <span class=3D"o">=3D</span> <span=
 class=3D"n">realloc</span><span class=3D"p">(</span><span class=3D"n">E</s=
pan><span class=3D"p">.</span><span class=3D"n">row</span><span class=3D"p"=
>,</span> <span class=3D"k">sizeof</span><span class=3D"p">(</span><span cl=
ass=3D"n">erow</span><span class=3D"p">)</span> <span class=3D"o">*</span> =
<span class=3D"p">(</span><span class=3D"n">E</span><span class=3D"p">.</sp=
an><span class=3D"n">numrows</span> <span class=3D"o">+</span> <span class=
=3D"mi">1</span><span class=3D"p">));</span></div><div class=3D"line">  <sp=
an class=3D"n">memmove</span><span class=3D"p">(</span><span class=3D"o">&a=
mp;</span><span class=3D"n">E</span><span class=3D"p">.</span><span class=
=3D"n">row</span><span class=3D"p">[</span><span class=3D"n">at</span> <spa=
n class=3D"o">+</span> <span class=3D"mi">1</span><span class=3D"p">],</spa=
n> <span class=3D"o">&amp;</span><span class=3D"n">E</span><span class=3D"p=
">.</span><span class=3D"n">row</span><span class=3D"p">[</span><span class=
=3D"n">at</span><span class=3D"p">],</span> <span class=3D"k">sizeof</span>=
<span class=3D"p">(</span><span class=3D"n">erow</span><span class=3D"p">)<=
/span> <span class=3D"o">*</span> <span class=3D"p">(</span><span class=3D"=
n">E</span><span class=3D"p">.</span><span class=3D"n">numrows</span> <span=
 class=3D"o">-</span> <span class=3D"n">at</span><span class=3D"p">));</spa=
n></div><div class=3D"line"></div><div class=3D"line">  <span class=3D"n">E=
</span><span class=3D"p">.</span><span class=3D"n">row</span><span class=3D=
"p">[</span><span class=3D"n">at</span><span class=3D"p">].</span><span cla=
ss=3D"n">size</span> <span class=3D"o">=3D</span> <span class=3D"n">len</sp=
an><span class=3D"p">;</span></div><div class=3D"line">  <span class=3D"n">=
E</span><span class=3D"p">.</span><span class=3D"n">row</span><span class=
=3D"p">[</span><span class=3D"n">at</span><span class=3D"p">].</span><span =
class=3D"n">chars</span> <span class=3D"o">=3D</span> <span class=3D"n">mal=
loc</span><span class=3D"p">(</span><span class=3D"n">len</span> <span clas=
s=3D"o">+</span> <span class=3D"mi">1</span><span class=3D"p">);</span></di=
v><div class=3D"line">  <span class=3D"n">memcpy</span><span class=3D"p">(<=
/span><span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n"=
>row</span><span class=3D"p">[</span><span class=3D"n">at</span><span class=
=3D"p">].</span><span class=3D"n">chars</span><span class=3D"p">,</span> <s=
pan class=3D"n">s</span><span class=3D"p">,</span> <span class=3D"n">len</s=
pan><span class=3D"p">);</span></div><div class=3D"line">  <span class=3D"n=
">E</span><span class=3D"p">.</span><span class=3D"n">row</span><span class=
=3D"p">[</span><span class=3D"n">at</span><span class=3D"p">].</span><span =
class=3D"n">chars</span><span class=3D"p">[</span><span class=3D"n">len</sp=
an><span class=3D"p">]</span> <span class=3D"o">=3D</span> <span class=3D"s=
c">'\0'</span><span class=3D"p">;</span></div><div class=3D"line"></div><di=
v class=3D"line">  <span class=3D"n">E</span><span class=3D"p">.</span><spa=
n class=3D"n">row</span><span class=3D"p">[</span><span class=3D"n">at</spa=
n><span class=3D"p">].</span><span class=3D"n">rsize</span> <span class=3D"=
o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span></div><d=
iv class=3D"line">  <span class=3D"n">E</span><span class=3D"p">.</span><sp=
an class=3D"n">row</span><span class=3D"p">[</span><span class=3D"n">at</sp=
an><span class=3D"p">].</span><span class=3D"n">render</span> <span class=
=3D"o">=3D</span> <span class=3D"nb">NULL</span><span class=3D"p">;</span><=
/div><ins class=3D"line">  <span class=3D"n">E</span><span class=3D"p">.</s=
pan><span class=3D"n">row</span><span class=3D"p">[</span><span class=3D"n"=
>at</span><span class=3D"p">].</span><span class=3D"n">hl</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nb">NULL</span><span class=3D"p">;</span>=
</ins><div class=3D"line">  <span class=3D"n">editorUpdateRow</span><span c=
lass=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D"n">E</span>=
<span class=3D"p">.</span><span class=3D"n">row</span><span class=3D"p">[</=
span><span class=3D"n">at</span><span class=3D"p">]);</span></div><div clas=
s=3D"line"></div><div class=3D"line">  <span class=3D"n">E</span><span clas=
s=3D"p">.</span><span class=3D"n">numrows</span><span class=3D"o">++</span>=
<span class=3D"p">;</span></div><div class=3D"line">  <span class=3D"n">E</=
span><span class=3D"p">.</span><span class=3D"n">dirty</span><span class=3D=
"o">++</span><span class=3D"p">;</span></div><div class=3D"line"><span clas=
s=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line"><span c=
lass=3D"kt">void</span> <span class=3D"nf">editorFreeRow</span><span class=
=3D"p">(</span><span class=3D"n">erow</span> <span class=3D"o">*</span><spa=
n class=3D"n">row</span><span class=3D"p">)</span> <span class=3D"p">{</spa=
n></div><div class=3D"line">  <span class=3D"n">free</span><span class=3D"p=
">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span c=
lass=3D"n">render</span><span class=3D"p">);</span></div><div class=3D"line=
">  <span class=3D"n">free</span><span class=3D"p">(</span><span class=3D"n=
">row</span><span class=3D"o">-&gt;</span><span class=3D"n">chars</span><sp=
an class=3D"p">);</span></div><ins class=3D"line">  <span class=3D"n">free<=
/span><span class=3D"p">(</span><span class=3D"n">row</span><span class=3D"=
o">-&gt;</span><span class=3D"n">hl</span><span class=3D"p">);</span></ins>=
<div class=3D"line"><span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line folded"><span class=3D"kt">void</span> <span class=3D=
"nf">editorDelRow</span><span class=3D"p">(</span><span class=3D"kt">int</s=
pan> <span class=3D"n">at</span><span class=3D"p">)</span> <span class=3D"p=
">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></=
div><div class=3D"line folded"><span class=3D"kt">void</span> <span class=
=3D"nf">editorRowInsertChar</span><span class=3D"p">(</span><span class=3D"=
n">erow</span> <span class=3D"o">*</span><span class=3D"n">row</span><span =
class=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D"n">at</sp=
an><span class=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D"=
n">c</span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 =
<span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"lin=
e folded"><span class=3D"kt">void</span> <span class=3D"nf">editorRowAppend=
String</span><span class=3D"p">(</span><span class=3D"n">erow</span> <span =
class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p">,</span> =
<span class=3D"kt">char</span> <span class=3D"o">*</span><span class=3D"n">=
s</span><span class=3D"p">,</span> <span class=3D"kt">size_t</span> <span c=
lass=3D"n">len</span><span class=3D"p">)</span> <span class=3D"p">{</span> =
=E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div cl=
ass=3D"line folded"><span class=3D"kt">void</span> <span class=3D"nf">edito=
rRowDelChar</span><span class=3D"p">(</span><span class=3D"n">erow</span> <=
span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p">,</s=
pan> <span class=3D"kt">int</span> <span class=3D"n">at</span><span class=
=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</s=
pan></div><div class=3D"line"></div><div class=3D"line folded"><span class=
=3D"cm">/*** editor operations ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** file i/o ***/</span></div><div class=3D"line folded=
"><span class=3D"cm">/*** find ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** append buffer ***/</span></div><div class=3D"line f=
olded"><span class=3D"cm">/*** output ***/</span></div><div class=3D"line f=
olded"><span class=3D"cm">/*** input ***/</span></div><div class=3D"line fo=
lded"><span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p><code>hl</code> is an array of <code>unsigned char</code> values, meanin=
g integers in the range of
<code>0</code> to <code>255</code>. Each value in the array will correspond=
 to a character in
<code>render</code>, and will tell you whether that character is part of a =
string, or a
comment, or a number, and so on. Let=E2=80=99s create an <code>enum</code> =
containing the possible
values that the <code>hl</code> array can contain.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/highlight-enum/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 144</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/highlight-enum">highlight-enum</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line"><span class=3D"c=
m">/*** defines ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne"><span class=3D"cp">#define KILO_VERSION "0.0.1"</span></div><div class=
=3D"line"><span class=3D"cp">#define KILO_TAB_STOP 8</span></div><div class=
=3D"line"><span class=3D"cp">#define KILO_QUIT_TIMES 3</span></div><div cla=
ss=3D"line"></div><div class=3D"line"><span class=3D"cp">#define CTRL_KEY(k=
) ((k) &amp; 0x1f)</span></div><div class=3D"line"></div><div class=3D"line=
 folded"><span class=3D"k">enum</span> <span class=3D"n">editorKey</span> <=
span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">};</span></div><div c=
lass=3D"line"></div><ins class=3D"line"><span class=3D"k">enum</span> <span=
 class=3D"n">editorHighlight</span> <span class=3D"p">{</span></ins><ins cl=
ass=3D"line">  <span class=3D"n">HL_NORMAL</span> <span class=3D"o">=3D</sp=
an> <span class=3D"mi">0</span><span class=3D"p">,</span></ins><ins class=
=3D"line">  <span class=3D"n">HL_NUMBER</span></ins><ins class=3D"line"><sp=
an class=3D"p">};</span></ins><div class=3D"line"></div><div class=3D"line =
folded"><span class=3D"cm">/*** data ***/</span></div><div class=3D"line fo=
lded"><span class=3D"cm">/*** prototypes ***/</span></div><div class=3D"lin=
e folded"><span class=3D"cm">/*** terminal ***/</span></div><div class=3D"l=
ine folded"><span class=3D"cm">/*** row operations ***/</span></div><div cl=
ass=3D"line folded"><span class=3D"cm">/*** editor operations ***/</span></=
div><div class=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span>=
</div><div class=3D"line folded"><span class=3D"cm">/*** find ***/</span></=
div><div class=3D"line folded"><span class=3D"cm">/*** append buffer ***/</=
span></div><div class=3D"line folded"><span class=3D"cm">/*** output ***/</=
span></div><div class=3D"line folded"><span class=3D"cm">/*** input ***/</s=
pan></div><div class=3D"line folded"><span class=3D"cm">/*** init ***/</spa=
n></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>For now, we=E2=80=99ll focus on highlighting numbers only. So we want ev=
ery character
that=E2=80=99s part of a number to have a corresponding <code>HL_NUMBER</co=
de> value in the <code>hl</code>
array, and we want every other value in <code>hl</code> to be <code>HL_NORM=
AL</code>.</p>

<p>Let=E2=80=99s create a new <code>/*** syntax highlighting ***/</code> se=
ction, and create an
<code>editorUpdateSyntax()</code> function in it. This function will go thr=
ough the
characters of an <code>erow</code> and highlight them by setting each value=
 in the <code>hl</code>
array.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/editor-update-syntax/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 145</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/editor-update-syntax">editor-update-syntax</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** prototypes ***/</span></div><div class=3D"line"><span class=
=3D"cm">/*** terminal ***/</span></div><div class=3D"line"></div><div class=
=3D"line folded"><span class=3D"kt">void</span> <span class=3D"nf">die</spa=
n><span class=3D"p">(</span><span class=3D"k">const</span> <span class=3D"k=
t">char</span> <span class=3D"o">*</span><span class=3D"n">s</span><span cl=
ass=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}=
</span></div><div class=3D"line"></div><div class=3D"line folded"><span cla=
ss=3D"kt">void</span> <span class=3D"nf">disableRawMode</span><span class=
=3D"p">()</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</=
span></div><div class=3D"line"></div><div class=3D"line folded"><span class=
=3D"kt">void</span> <span class=3D"nf">enableRawMode</span><span class=3D"p=
">()</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span>=
</div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"k=
t">int</span> <span class=3D"nf">editorReadKey</span><span class=3D"p">()</=
span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div>=
<div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">int=
</span> <span class=3D"nf">getCursorPosition</span><span class=3D"p">(</spa=
n><span class=3D"kt">int</span> <span class=3D"o">*</span><span class=3D"n"=
>rows</span><span class=3D"p">,</span> <span class=3D"kt">int</span> <span =
class=3D"o">*</span><span class=3D"n">cols</span><span class=3D"p">)</span>=
 <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div =
class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">int</spa=
n> <span class=3D"nf">getWindowSize</span><span class=3D"p">(</span><span c=
lass=3D"kt">int</span> <span class=3D"o">*</span><span class=3D"n">rows</sp=
an><span class=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D"=
o">*</span><span class=3D"n">cols</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"=
line"></div><ins class=3D"line"><span class=3D"cm">/*** syntax highlighting=
 ***/</span></ins><ins class=3D"line"></ins><ins class=3D"line"><span class=
=3D"kt">void</span> <span class=3D"nf">editorUpdateSyntax</span><span class=
=3D"p">(</span><span class=3D"n">erow</span> <span class=3D"o">*</span><spa=
n class=3D"n">row</span><span class=3D"p">)</span> <span class=3D"p">{</spa=
n></ins><ins class=3D"line">  <span class=3D"n">row</span><span class=3D"o"=
>-&gt;</span><span class=3D"n">hl</span> <span class=3D"o">=3D</span> <span=
 class=3D"n">realloc</span><span class=3D"p">(</span><span class=3D"n">row<=
/span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><span class=
=3D"p">,</span> <span class=3D"n">row</span><span class=3D"o">-&gt;</span><=
span class=3D"n">rsize</span><span class=3D"p">);</span></ins><ins class=3D=
"line">  <span class=3D"n">memset</span><span class=3D"p">(</span><span cla=
ss=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span=
><span class=3D"p">,</span> <span class=3D"n">HL_NORMAL</span><span class=
=3D"p">,</span> <span class=3D"n">row</span><span class=3D"o">-&gt;</span><=
span class=3D"n">rsize</span><span class=3D"p">);</span></ins><ins class=3D=
"line"></ins><ins class=3D"line">  <span class=3D"kt">int</span> <span clas=
s=3D"n">i</span><span class=3D"p">;</span></ins><ins class=3D"line">  <span=
 class=3D"k">for</span> <span class=3D"p">(</span><span class=3D"n">i</span=
> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p"=
>;</span> <span class=3D"n">i</span> <span class=3D"o">&lt;</span> <span cl=
ass=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">rsize</=
span><span class=3D"p">;</span> <span class=3D"n">i</span><span class=3D"o"=
>++</span><span class=3D"p">)</span> <span class=3D"p">{</span></ins><ins c=
lass=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(</span><sp=
an class=3D"n">isdigit</span><span class=3D"p">(</span><span class=3D"n">ro=
w</span><span class=3D"o">-&gt;</span><span class=3D"n">render</span><span =
class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]))</span> =
<span class=3D"p">{</span></ins><ins class=3D"line">      <span class=3D"n"=
>row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><span c=
lass=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</span> <sp=
an class=3D"o">=3D</span> <span class=3D"n">HL_NUMBER</span><span class=3D"=
p">;</span></ins><ins class=3D"line">    <span class=3D"p">}</span></ins><i=
ns class=3D"line">  <span class=3D"p">}</span></ins><ins class=3D"line"><sp=
an class=3D"p">}</span></ins><div class=3D"line"></div><div class=3D"line f=
olded"><span class=3D"cm">/*** row operations ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** editor operations ***/</span></div=
><div class=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span></d=
iv><div class=3D"line folded"><span class=3D"cm">/*** find ***/</span></div=
><div class=3D"line folded"><span class=3D"cm">/*** append buffer ***/</spa=
n></div><div class=3D"line folded"><span class=3D"cm">/*** output ***/</spa=
n></div><div class=3D"line folded"><span class=3D"cm">/*** input ***/</span=
></div><div class=3D"line folded"><span class=3D"cm">/*** init ***/</span><=
/div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p><code>memset()</code> comes from <code>&lt;string.h&gt;</code>.</p>

<p>First we <code>realloc()</code> the needed memory, since this might be a=
 new row or the
row might be bigger than the last time we highlighted it. Notice that the s=
ize
of the <code>hl</code> array is the same as the <code>render</code> array, =
so we use <code>rsize</code> as the
amount of memory to allocate for <code>hl</code>.</p>

<p>Then we use <code>memset()</code> to set all characters to <code>HL_NORM=
AL</code> by default, before
looping through the characters and setting the digits to <code>HL_NUMBER</c=
ode>. (Don=E2=80=99t
worry, we=E2=80=99ll implement a better way of recognizing numbers soon eno=
ugh, but
right now we are focusing on refactoring.)</p>

<p>Now let=E2=80=99s actually call <code>editorUpdateSyntax()</code>.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/call-update-syntax/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 146</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/call-update-syntax">call-update-syntax</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><span =
class=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><spa=
n class=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line=
"><span class=3D"cm">/*** row operations ***/</span></div><div class=3D"lin=
e"></div><div class=3D"line folded"><span class=3D"kt">int</span> <span cla=
ss=3D"nf">editorRowCxToRx</span><span class=3D"p">(</span><span class=3D"n"=
>erow</span> <span class=3D"o">*</span><span class=3D"n">row</span><span cl=
ass=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D"n">cx</span=
><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span clas=
s=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line folded">=
<span class=3D"kt">int</span> <span class=3D"nf">editorRowRxToCx</span><spa=
n class=3D"p">(</span><span class=3D"n">erow</span> <span class=3D"o">*</sp=
an><span class=3D"n">row</span><span class=3D"p">,</span> <span class=3D"kt=
">int</span> <span class=3D"n">rx</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"=
line"></div><div class=3D"line"><span class=3D"kt">void</span> <span class=
=3D"nf">editorUpdateRow</span><span class=3D"p">(</span><span class=3D"n">e=
row</span> <span class=3D"o">*</span><span class=3D"n">row</span><span clas=
s=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line">  <spa=
n class=3D"kt">int</span> <span class=3D"n">tabs</span> <span class=3D"o">=
=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span></div><div =
class=3D"line">  <span class=3D"kt">int</span> <span class=3D"n">j</span><s=
pan class=3D"p">;</span></div><div class=3D"line">  <span class=3D"k">for</=
span> <span class=3D"p">(</span><span class=3D"n">j</span> <span class=3D"o=
">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span> <span cl=
ass=3D"n">j</span> <span class=3D"o">&lt;</span> <span class=3D"n">row</spa=
n><span class=3D"o">-&gt;</span><span class=3D"n">size</span><span class=3D=
"p">;</span> <span class=3D"n">j</span><span class=3D"o">++</span><span cla=
ss=3D"p">)</span></div><div class=3D"line">    <span class=3D"k">if</span> =
<span class=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&g=
t;</span><span class=3D"n">chars</span><span class=3D"p">[</span><span clas=
s=3D"n">j</span><span class=3D"p">]</span> <span class=3D"o">=3D=3D</span> =
<span class=3D"sc">'\t'</span><span class=3D"p">)</span> <span class=3D"n">=
tabs</span><span class=3D"o">++</span><span class=3D"p">;</span></div><div =
class=3D"line"></div><div class=3D"line">  <span class=3D"n">free</span><sp=
an class=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;<=
/span><span class=3D"n">render</span><span class=3D"p">);</span></div><div =
class=3D"line">  <span class=3D"n">row</span><span class=3D"o">-&gt;</span>=
<span class=3D"n">render</span> <span class=3D"o">=3D</span> <span class=3D=
"n">malloc</span><span class=3D"p">(</span><span class=3D"n">row</span><spa=
n class=3D"o">-&gt;</span><span class=3D"n">size</span> <span class=3D"o">+=
</span> <span class=3D"n">tabs</span><span class=3D"o">*</span><span class=
=3D"p">(</span><span class=3D"n">KILO_TAB_STOP</span> <span class=3D"o">-</=
span> <span class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"=
o">+</span> <span class=3D"mi">1</span><span class=3D"p">);</span></div><di=
v class=3D"line"></div><div class=3D"line">  <span class=3D"kt">int</span> =
<span class=3D"n">idx</span> <span class=3D"o">=3D</span> <span class=3D"mi=
">0</span><span class=3D"p">;</span></div><div class=3D"line">  <span class=
=3D"k">for</span> <span class=3D"p">(</span><span class=3D"n">j</span> <spa=
n class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</sp=
an> <span class=3D"n">j</span> <span class=3D"o">&lt;</span> <span class=3D=
"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">size</span><s=
pan class=3D"p">;</span> <span class=3D"n">j</span><span class=3D"o">++</sp=
an><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D=
"line">    <span class=3D"k">if</span> <span class=3D"p">(</span><span clas=
s=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">chars</sp=
an><span class=3D"p">[</span><span class=3D"n">j</span><span class=3D"p">]<=
/span> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'\t'</span><span =
class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line">  =
    <span class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=
=3D"n">render</span><span class=3D"p">[</span><span class=3D"n">idx</span><=
span class=3D"o">++</span><span class=3D"p">]</span> <span class=3D"o">=3D<=
/span> <span class=3D"sc">' '</span><span class=3D"p">;</span></div><div cl=
ass=3D"line">      <span class=3D"k">while</span> <span class=3D"p">(</span=
><span class=3D"n">idx</span> <span class=3D"o">%</span> <span class=3D"n">=
KILO_TAB_STOP</span> <span class=3D"o">!=3D</span> <span class=3D"mi">0</sp=
an><span class=3D"p">)</span> <span class=3D"n">row</span><span class=3D"o"=
>-&gt;</span><span class=3D"n">render</span><span class=3D"p">[</span><span=
 class=3D"n">idx</span><span class=3D"o">++</span><span class=3D"p">]</span=
> <span class=3D"o">=3D</span> <span class=3D"sc">' '</span><span class=3D"=
p">;</span></div><div class=3D"line">    <span class=3D"p">}</span> <span c=
lass=3D"k">else</span> <span class=3D"p">{</span></div><div class=3D"line">=
      <span class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=
=3D"n">render</span><span class=3D"p">[</span><span class=3D"n">idx</span><=
span class=3D"o">++</span><span class=3D"p">]</span> <span class=3D"o">=3D<=
/span> <span class=3D"n">row</span><span class=3D"o">-&gt;</span><span clas=
s=3D"n">chars</span><span class=3D"p">[</span><span class=3D"n">j</span><sp=
an class=3D"p">];</span></div><div class=3D"line">    <span class=3D"p">}</=
span></div><div class=3D"line">  <span class=3D"p">}</span></div><div class=
=3D"line">  <span class=3D"n">row</span><span class=3D"o">-&gt;</span><span=
 class=3D"n">render</span><span class=3D"p">[</span><span class=3D"n">idx</=
span><span class=3D"p">]</span> <span class=3D"o">=3D</span> <span class=3D=
"sc">'\0'</span><span class=3D"p">;</span></div><div class=3D"line">  <span=
 class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">rsiz=
e</span> <span class=3D"o">=3D</span> <span class=3D"n">idx</span><span cla=
ss=3D"p">;</span></div><div class=3D"line"></div><ins class=3D"line">  <spa=
n class=3D"n">editorUpdateSyntax</span><span class=3D"p">(</span><span clas=
s=3D"n">row</span><span class=3D"p">);</span></ins><div class=3D"line"><spa=
n class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line fo=
lded"><span class=3D"kt">void</span> <span class=3D"nf">editorInsertRow</sp=
an><span class=3D"p">(</span><span class=3D"kt">int</span> <span class=3D"n=
">at</span><span class=3D"p">,</span> <span class=3D"kt">char</span> <span =
class=3D"o">*</span><span class=3D"n">s</span><span class=3D"p">,</span> <s=
pan class=3D"kt">size_t</span> <span class=3D"n">len</span><span class=3D"p=
">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span><=
/div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt=
">void</span> <span class=3D"nf">editorFreeRow</span><span class=3D"p">(</s=
pan><span class=3D"n">erow</span> <span class=3D"o">*</span><span class=3D"=
n">row</span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=
=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D=
"line folded"><span class=3D"kt">void</span> <span class=3D"nf">editorDelRo=
w</span><span class=3D"p">(</span><span class=3D"kt">int</span> <span class=
=3D"n">at</span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=
=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div class=
=3D"line folded"><span class=3D"kt">void</span> <span class=3D"nf">editorRo=
wInsertChar</span><span class=3D"p">(</span><span class=3D"n">erow</span> <=
span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p">,</s=
pan> <span class=3D"kt">int</span> <span class=3D"n">at</span><span class=
=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D"n">c</span><sp=
an class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D=
"p">}</span></div><div class=3D"line"></div><div class=3D"line folded"><spa=
n class=3D"kt">void</span> <span class=3D"nf">editorRowAppendString</span><=
span class=3D"p">(</span><span class=3D"n">erow</span> <span class=3D"o">*<=
/span><span class=3D"n">row</span><span class=3D"p">,</span> <span class=3D=
"kt">char</span> <span class=3D"o">*</span><span class=3D"n">s</span><span =
class=3D"p">,</span> <span class=3D"kt">size_t</span> <span class=3D"n">len=
</span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <spa=
n class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line fo=
lded"><span class=3D"kt">void</span> <span class=3D"nf">editorRowDelChar</s=
pan><span class=3D"p">(</span><span class=3D"n">erow</span> <span class=3D"=
o">*</span><span class=3D"n">row</span><span class=3D"p">,</span> <span cla=
ss=3D"kt">int</span> <span class=3D"n">at</span><span class=3D"p">)</span> =
<span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div c=
lass=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/*** edit=
or operations ***/</span></div><div class=3D"line folded"><span class=3D"cm=
">/*** file i/o ***/</span></div><div class=3D"line folded"><span class=3D"=
cm">/*** find ***/</span></div><div class=3D"line folded"><span class=3D"cm=
">/*** append buffer ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** output ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** input ***/</span></div><div class=3D"line folded"><span class=
=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p><code>editorUpdateRow()</code> already has the job of updating the <code=
>render</code> array whenever
the text of the row changes, so it makes sense that that=E2=80=99s where we=
 want to
update the <code>hl</code> array. So after updating <code>render</code>, we=
 call
<code>editorUpdateSyntax()</code> at the end.</p>

<p>Next, let=E2=80=99s make an <code>editorSyntaxToColor()</code> function =
that maps values in <code>hl</code>
to the actual ANSI color codes we want to draw them with.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/map-colors/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 147</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/map-colors">map-colors</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><span =
class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span class=
=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line"></div=
><div class=3D"line folded"><span class=3D"kt">void</span> <span class=3D"n=
f">editorUpdateSyntax</span><span class=3D"p">(</span><span class=3D"n">ero=
w</span> <span class=3D"o">*</span><span class=3D"n">row</span><span class=
=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</s=
pan></div><div class=3D"line"></div><ins class=3D"line"><span class=3D"kt">=
int</span> <span class=3D"nf">editorSyntaxToColor</span><span class=3D"p">(=
</span><span class=3D"kt">int</span> <span class=3D"n">hl</span><span class=
=3D"p">)</span> <span class=3D"p">{</span></ins><ins class=3D"line">  <span=
 class=3D"k">switch</span> <span class=3D"p">(</span><span class=3D"n">hl</=
span><span class=3D"p">)</span> <span class=3D"p">{</span></ins><ins class=
=3D"line">    <span class=3D"k">case</span> <span class=3D"n">HL_NUMBER</sp=
an><span class=3D"p">:</span> <span class=3D"k">return</span> <span class=
=3D"mi">31</span><span class=3D"p">;</span></ins><ins class=3D"line">    <s=
pan class=3D"nl">default:</span> <span class=3D"k">return</span> <span clas=
s=3D"mi">37</span><span class=3D"p">;</span></ins><ins class=3D"line">  <sp=
an class=3D"p">}</span></ins><ins class=3D"line"><span class=3D"p">}</span>=
</ins><div class=3D"line"></div><div class=3D"line folded"><span class=3D"c=
m">/*** row operations ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** editor operations ***/</span></div><div class=3D"line folde=
d"><span class=3D"cm">/*** file i/o ***/</span></div><div class=3D"line fol=
ded"><span class=3D"cm">/*** find ***/</span></div><div class=3D"line folde=
d"><span class=3D"cm">/*** append buffer ***/</span></div><div class=3D"lin=
e folded"><span class=3D"cm">/*** output ***/</span></div><div class=3D"lin=
e folded"><span class=3D"cm">/*** input ***/</span></div><div class=3D"line=
 folded"><span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>We return the ANSI code for =E2=80=9Cforeground red=E2=80=9D for numbers=
, and =E2=80=9Cforeground
white=E2=80=9D for anything else that might slip through. (We=E2=80=99ll be=
 handling
<code>HL_NORMAL</code> separately, so <code>editorSyntaxToColor()</code> do=
esn=E2=80=99t need to handle it.)</p>

<p>Now let=E2=80=99s finally draw the highlighted text to the screen!</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/use-hl/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 148</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/use-hl">use-hl</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><span =
class=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><spa=
n class=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line=
 folded"><span class=3D"cm">/*** row operations ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** editor operations ***/</span></div=
><div class=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span></d=
iv><div class=3D"line folded"><span class=3D"cm">/*** find ***/</span></div=
><div class=3D"line folded"><span class=3D"cm">/*** append buffer ***/</spa=
n></div><div class=3D"line"><span class=3D"cm">/*** output ***/</span></div=
><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">vo=
id</span> <span class=3D"nf">editorScroll</span><span class=3D"p">()</span>=
 <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div =
class=3D"line"></div><div class=3D"line"><span class=3D"kt">void</span> <sp=
an class=3D"nf">editorDrawRows</span><span class=3D"p">(</span><span class=
=3D"k">struct</span> <span class=3D"n">abuf</span> <span class=3D"o">*</spa=
n><span class=3D"n">ab</span><span class=3D"p">)</span> <span class=3D"p">{=
</span></div><div class=3D"line">  <span class=3D"kt">int</span> <span clas=
s=3D"n">y</span><span class=3D"p">;</span></div><div class=3D"line">  <span=
 class=3D"k">for</span> <span class=3D"p">(</span><span class=3D"n">y</span=
> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p"=
>;</span> <span class=3D"n">y</span> <span class=3D"o">&lt;</span> <span cl=
ass=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screenrows</s=
pan><span class=3D"p">;</span> <span class=3D"n">y</span><span class=3D"o">=
++</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div cl=
ass=3D"line">    <span class=3D"kt">int</span> <span class=3D"n">filerow</s=
pan> <span class=3D"o">=3D</span> <span class=3D"n">y</span> <span class=3D=
"o">+</span> <span class=3D"n">E</span><span class=3D"p">.</span><span clas=
s=3D"n">rowoff</span><span class=3D"p">;</span></div><div class=3D"line">  =
  <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">f=
ilerow</span> <span class=3D"o">&gt;=3D</span> <span class=3D"n">E</span><s=
pan class=3D"p">.</span><span class=3D"n">numrows</span><span class=3D"p">)=
</span> <span class=3D"p">{</span></div><div class=3D"line">      <span cla=
ss=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">E</span><spa=
n class=3D"p">.</span><span class=3D"n">numrows</span> <span class=3D"o">=
=3D=3D</span> <span class=3D"mi">0</span> <span class=3D"o">&amp;&amp;</spa=
n> <span class=3D"n">y</span> <span class=3D"o">=3D=3D</span> <span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screenrows</span=
> <span class=3D"o">/</span> <span class=3D"mi">3</span><span class=3D"p">)=
</span> <span class=3D"p">{</span></div><div class=3D"line">        <span c=
lass=3D"kt">char</span> <span class=3D"n">welcome</span><span class=3D"p">[=
</span><span class=3D"mi">80</span><span class=3D"p">];</span></div><div cl=
ass=3D"line">        <span class=3D"kt">int</span> <span class=3D"n">welcom=
elen</span> <span class=3D"o">=3D</span> <span class=3D"n">snprintf</span><=
span class=3D"p">(</span><span class=3D"n">welcome</span><span class=3D"p">=
,</span> <span class=3D"k">sizeof</span><span class=3D"p">(</span><span cla=
ss=3D"n">welcome</span><span class=3D"p">),</span></div><div class=3D"line"=
>          <span class=3D"s">"Kilo editor -- version %s"</span><span class=
=3D"p">,</span> <span class=3D"n">KILO_VERSION</span><span class=3D"p">);</=
span></div><div class=3D"line">        <span class=3D"k">if</span> <span cl=
ass=3D"p">(</span><span class=3D"n">welcomelen</span> <span class=3D"o">&gt=
;</span> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D=
"n">screencols</span><span class=3D"p">)</span> <span class=3D"n">welcomele=
n</span> <span class=3D"o">=3D</span> <span class=3D"n">E</span><span class=
=3D"p">.</span><span class=3D"n">screencols</span><span class=3D"p">;</span=
></div><div class=3D"line">        <span class=3D"kt">int</span> <span clas=
s=3D"n">padding</span> <span class=3D"o">=3D</span> <span class=3D"p">(</sp=
an><span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">sc=
reencols</span> <span class=3D"o">-</span> <span class=3D"n">welcomelen</sp=
an><span class=3D"p">)</span> <span class=3D"o">/</span> <span class=3D"mi"=
>2</span><span class=3D"p">;</span></div><div class=3D"line">        <span =
class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">padding</=
span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=
=3D"line">          <span class=3D"n">abAppend</span><span class=3D"p">(</s=
pan><span class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s"=
>"~"</span><span class=3D"p">,</span> <span class=3D"mi">1</span><span clas=
s=3D"p">);</span></div><div class=3D"line">          <span class=3D"n">padd=
ing</span><span class=3D"o">--</span><span class=3D"p">;</span></div><div c=
lass=3D"line">        <span class=3D"p">}</span></div><div class=3D"line"> =
       <span class=3D"k">while</span> <span class=3D"p">(</span><span class=
=3D"n">padding</span><span class=3D"o">--</span><span class=3D"p">)</span> =
<span class=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"n=
">ab</span><span class=3D"p">,</span> <span class=3D"s">" "</span><span cla=
ss=3D"p">,</span> <span class=3D"mi">1</span><span class=3D"p">);</span></d=
iv><div class=3D"line">        <span class=3D"n">abAppend</span><span class=
=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</span> <span =
class=3D"n">welcome</span><span class=3D"p">,</span> <span class=3D"n">welc=
omelen</span><span class=3D"p">);</span></div><div class=3D"line">      <sp=
an class=3D"p">}</span> <span class=3D"k">else</span> <span class=3D"p">{</=
span></div><div class=3D"line">        <span class=3D"n">abAppend</span><sp=
an class=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</span=
> <span class=3D"s">"~"</span><span class=3D"p">,</span> <span class=3D"mi"=
>1</span><span class=3D"p">);</span></div><div class=3D"line">      <span c=
lass=3D"p">}</span></div><div class=3D"line">    <span class=3D"p">}</span>=
 <span class=3D"k">else</span> <span class=3D"p">{</span></div><div class=
=3D"line">      <span class=3D"kt">int</span> <span class=3D"n">len</span> =
<span class=3D"o">=3D</span> <span class=3D"n">E</span><span class=3D"p">.<=
/span><span class=3D"n">row</span><span class=3D"p">[</span><span class=3D"=
n">filerow</span><span class=3D"p">].</span><span class=3D"n">rsize</span> =
<span class=3D"o">-</span> <span class=3D"n">E</span><span class=3D"p">.</s=
pan><span class=3D"n">coloff</span><span class=3D"p">;</span></div><div cla=
ss=3D"line">      <span class=3D"k">if</span> <span class=3D"p">(</span><sp=
an class=3D"n">len</span> <span class=3D"o">&lt;</span> <span class=3D"mi">=
0</span><span class=3D"p">)</span> <span class=3D"n">len</span> <span class=
=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span></di=
v><div class=3D"line">      <span class=3D"k">if</span> <span class=3D"p">(=
</span><span class=3D"n">len</span> <span class=3D"o">&gt;</span> <span cla=
ss=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screencols</sp=
an><span class=3D"p">)</span> <span class=3D"n">len</span> <span class=3D"o=
">=3D</span> <span class=3D"n">E</span><span class=3D"p">.</span><span clas=
s=3D"n">screencols</span><span class=3D"p">;</span></div><div class=3D"line=
">      <span class=3D"kt">char</span> <span class=3D"o">*</span><span clas=
s=3D"n">c</span> <span class=3D"o">=3D</span> <span class=3D"o">&amp;</span=
><span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">row<=
/span><span class=3D"p">[</span><span class=3D"n">filerow</span><span class=
=3D"p">].</span><span class=3D"n">render</span><span class=3D"p">[</span><s=
pan class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">coloff<=
/span><span class=3D"p">];</span></div><ins class=3D"line">      <span clas=
s=3D"kt">unsigned</span> <span class=3D"kt">char</span> <span class=3D"o">*=
</span><span class=3D"n">hl</span> <span class=3D"o">=3D</span> <span class=
=3D"o">&amp;</span><span class=3D"n">E</span><span class=3D"p">.</span><spa=
n class=3D"n">row</span><span class=3D"p">[</span><span class=3D"n">filerow=
</span><span class=3D"p">].</span><span class=3D"n">hl</span><span class=3D=
"p">[</span><span class=3D"n">E</span><span class=3D"p">.</span><span class=
=3D"n">coloff</span><span class=3D"p">];</span></ins><div class=3D"line">  =
    <span class=3D"kt">int</span> <span class=3D"n">j</span><span class=3D"=
p">;</span></div><div class=3D"line">      <span class=3D"k">for</span> <sp=
an class=3D"p">(</span><span class=3D"n">j</span> <span class=3D"o">=3D</sp=
an> <span class=3D"mi">0</span><span class=3D"p">;</span> <span class=3D"n"=
>j</span> <span class=3D"o">&lt;</span> <span class=3D"n">len</span><span c=
lass=3D"p">;</span> <span class=3D"n">j</span><span class=3D"o">++</span><s=
pan class=3D"p">)</span> <span class=3D"p">{</span></div><ins class=3D"line=
">        <span class=3D"k">if</span> <span class=3D"p">(</span><span class=
=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">j</span><span c=
lass=3D"p">]</span> <span class=3D"o">=3D=3D</span> <span class=3D"n">HL_NO=
RMAL</span><span class=3D"p">)</span> <span class=3D"p">{</span></ins><div =
class=3D"line">          <span class=3D"n">abAppend</span><span class=3D"p"=
>(</span><span class=3D"n">ab</span><span class=3D"p">,</span> <span class=
=3D"s">"</span><span class=3D"se">\x1b</span><span class=3D"s">[39m"</span>=
<span class=3D"p">,</span> <span class=3D"mi">5</span><span class=3D"p">);<=
/span></div><ins class=3D"line">          <span class=3D"n">abAppend</span>=
<span class=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</s=
pan> <span class=3D"o">&amp;</span><span class=3D"n">c</span><span class=3D=
"p">[</span><span class=3D"n">j</span><span class=3D"p">],</span> <span cla=
ss=3D"mi">1</span><span class=3D"p">);</span></ins><div class=3D"line">    =
    <span class=3D"p">}</span> <span class=3D"k">else</span> <span class=3D=
"p">{</span></div><ins class=3D"line">          <span class=3D"kt">int</spa=
n> <span class=3D"n">color</span> <span class=3D"o">=3D</span> <span class=
=3D"n">editorSyntaxToColor</span><span class=3D"p">(</span><span class=3D"n=
">hl</span><span class=3D"p">[</span><span class=3D"n">j</span><span class=
=3D"p">]);</span></ins><ins class=3D"line">          <span class=3D"kt">cha=
r</span> <span class=3D"n">buf</span><span class=3D"p">[</span><span class=
=3D"mi">16</span><span class=3D"p">];</span></ins><ins class=3D"line">     =
     <span class=3D"kt">int</span> <span class=3D"n">clen</span> <span clas=
s=3D"o">=3D</span> <span class=3D"n">snprintf</span><span class=3D"p">(</sp=
an><span class=3D"n">buf</span><span class=3D"p">,</span> <span class=3D"k"=
>sizeof</span><span class=3D"p">(</span><span class=3D"n">buf</span><span c=
lass=3D"p">),</span> <span class=3D"s">"</span><span class=3D"se">\x1b</spa=
n><span class=3D"s">[%dm"</span><span class=3D"p">,</span> <span class=3D"n=
">color</span><span class=3D"p">);</span></ins><ins class=3D"line">        =
  <span class=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D=
"n">ab</span><span class=3D"p">,</span> <span class=3D"n">buf</span><span c=
lass=3D"p">,</span> <span class=3D"n">clen</span><span class=3D"p">);</span=
></ins><div class=3D"line">          <span class=3D"n">abAppend</span><span=
 class=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</span> =
<span class=3D"o">&amp;</span><span class=3D"n">c</span><span class=3D"p">[=
</span><span class=3D"n">j</span><span class=3D"p">],</span> <span class=3D=
"mi">1</span><span class=3D"p">);</span></div><div class=3D"line">        <=
span class=3D"p">}</span></div><div class=3D"line">      <span class=3D"p">=
}</span></div><ins class=3D"line">      <span class=3D"n">abAppend</span><s=
pan class=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</spa=
n> <span class=3D"s">"</span><span class=3D"se">\x1b</span><span class=3D"s=
">[39m"</span><span class=3D"p">,</span> <span class=3D"mi">5</span><span c=
lass=3D"p">);</span></ins><div class=3D"line">    <span class=3D"p">}</span=
></div><div class=3D"line"></div><div class=3D"line">    <span class=3D"n">=
abAppend</span><span class=3D"p">(</span><span class=3D"n">ab</span><span c=
lass=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\x1b</span=
><span class=3D"s">[K"</span><span class=3D"p">,</span> <span class=3D"mi">=
3</span><span class=3D"p">);</span></div><div class=3D"line">    <span clas=
s=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"n">ab</span=
><span class=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\r=
\n</span><span class=3D"s">"</span><span class=3D"p">,</span> <span class=
=3D"mi">2</span><span class=3D"p">);</span></div><div class=3D"line">  <spa=
n class=3D"p">}</span></div><div class=3D"line"><span class=3D"p">}</span><=
/div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt=
">void</span> <span class=3D"n">editorDrawStatusBar</span><span class=3D"p"=
>(</span><span class=3D"k">struct</span> <span class=3D"n">abuf</span> <spa=
n class=3D"o">*</span><span class=3D"n">ab</span><span class=3D"p">)</span>=
 <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div =
class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void</sp=
an> <span class=3D"n">editorDrawMessageBar</span><span class=3D"p">(</span>=
<span class=3D"k">struct</span> <span class=3D"n">abuf</span> <span class=
=3D"o">*</span><span class=3D"n">ab</span><span class=3D"p">)</span> <span =
class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=
=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void</span> <=
span class=3D"n">editorRefreshScreen</span><span class=3D"p">()</span> <spa=
n class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=
=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void</span> <=
span class=3D"n">editorSetStatusMessage</span><span class=3D"p">(</span><sp=
an class=3D"k">const</span> <span class=3D"kt">char</span> <span class=3D"o=
">*</span><span class=3D"n">fmt</span><span class=3D"p">,</span> <span clas=
s=3D"p">...)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">=
}</span></div><div class=3D"line"></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** input ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>First we get a pointer, <code>hl</code>, to the slice of the <code>hl</c=
ode> array that corresponds
to the slice of <code>render</code> that we are printing. Then, for each ch=
aracter, if
it=E2=80=99s an <code>HL_NORMAL</code> character, we use <code>&lt;esc&gt;[=
39m</code> to make sure we=E2=80=99re using the
default text color before printing it. If it=E2=80=99s not <code>HL_NORMAL<=
/code>, we use
<code>snprintf()</code> to write the escape sequence into a buffer which we=
 pass to
<code>abAppend()</code> before appending the actual character. Finally, aft=
er we=E2=80=99re done
looping through all the characters and displaying them, we print a final
<code>&lt;esc&gt;[39m</code> escape sequence to make sure the text color is=
 reset to default.</p>

<p>This works, but do we really have to write out an escape sequence before=
 every
single character? In practice, most characters are going to be the same col=
or
as the previous character, so most of the escape sequences are redundant. L=
et=E2=80=99s
keep track of the current text color as we loop through the characters, and
only print out an escape sequence when the color changes.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/current-color/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 149</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/current-color">current-color</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><span =
class=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><spa=
n class=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line=
 folded"><span class=3D"cm">/*** row operations ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** editor operations ***/</span></div=
><div class=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span></d=
iv><div class=3D"line folded"><span class=3D"cm">/*** find ***/</span></div=
><div class=3D"line folded"><span class=3D"cm">/*** append buffer ***/</spa=
n></div><div class=3D"line"><span class=3D"cm">/*** output ***/</span></div=
><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">vo=
id</span> <span class=3D"nf">editorScroll</span><span class=3D"p">()</span>=
 <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div =
class=3D"line"></div><div class=3D"line"><span class=3D"kt">void</span> <sp=
an class=3D"nf">editorDrawRows</span><span class=3D"p">(</span><span class=
=3D"k">struct</span> <span class=3D"n">abuf</span> <span class=3D"o">*</spa=
n><span class=3D"n">ab</span><span class=3D"p">)</span> <span class=3D"p">{=
</span></div><div class=3D"line">  <span class=3D"kt">int</span> <span clas=
s=3D"n">y</span><span class=3D"p">;</span></div><div class=3D"line">  <span=
 class=3D"k">for</span> <span class=3D"p">(</span><span class=3D"n">y</span=
> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p"=
>;</span> <span class=3D"n">y</span> <span class=3D"o">&lt;</span> <span cl=
ass=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screenrows</s=
pan><span class=3D"p">;</span> <span class=3D"n">y</span><span class=3D"o">=
++</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div cl=
ass=3D"line">    <span class=3D"kt">int</span> <span class=3D"n">filerow</s=
pan> <span class=3D"o">=3D</span> <span class=3D"n">y</span> <span class=3D=
"o">+</span> <span class=3D"n">E</span><span class=3D"p">.</span><span clas=
s=3D"n">rowoff</span><span class=3D"p">;</span></div><div class=3D"line">  =
  <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">f=
ilerow</span> <span class=3D"o">&gt;=3D</span> <span class=3D"n">E</span><s=
pan class=3D"p">.</span><span class=3D"n">numrows</span><span class=3D"p">)=
</span> <span class=3D"p">{</span></div><div class=3D"line">      <span cla=
ss=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">E</span><spa=
n class=3D"p">.</span><span class=3D"n">numrows</span> <span class=3D"o">=
=3D=3D</span> <span class=3D"mi">0</span> <span class=3D"o">&amp;&amp;</spa=
n> <span class=3D"n">y</span> <span class=3D"o">=3D=3D</span> <span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screenrows</span=
> <span class=3D"o">/</span> <span class=3D"mi">3</span><span class=3D"p">)=
</span> <span class=3D"p">{</span></div><div class=3D"line">        <span c=
lass=3D"kt">char</span> <span class=3D"n">welcome</span><span class=3D"p">[=
</span><span class=3D"mi">80</span><span class=3D"p">];</span></div><div cl=
ass=3D"line">        <span class=3D"kt">int</span> <span class=3D"n">welcom=
elen</span> <span class=3D"o">=3D</span> <span class=3D"n">snprintf</span><=
span class=3D"p">(</span><span class=3D"n">welcome</span><span class=3D"p">=
,</span> <span class=3D"k">sizeof</span><span class=3D"p">(</span><span cla=
ss=3D"n">welcome</span><span class=3D"p">),</span></div><div class=3D"line"=
>          <span class=3D"s">"Kilo editor -- version %s"</span><span class=
=3D"p">,</span> <span class=3D"n">KILO_VERSION</span><span class=3D"p">);</=
span></div><div class=3D"line">        <span class=3D"k">if</span> <span cl=
ass=3D"p">(</span><span class=3D"n">welcomelen</span> <span class=3D"o">&gt=
;</span> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D=
"n">screencols</span><span class=3D"p">)</span> <span class=3D"n">welcomele=
n</span> <span class=3D"o">=3D</span> <span class=3D"n">E</span><span class=
=3D"p">.</span><span class=3D"n">screencols</span><span class=3D"p">;</span=
></div><div class=3D"line">        <span class=3D"kt">int</span> <span clas=
s=3D"n">padding</span> <span class=3D"o">=3D</span> <span class=3D"p">(</sp=
an><span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">sc=
reencols</span> <span class=3D"o">-</span> <span class=3D"n">welcomelen</sp=
an><span class=3D"p">)</span> <span class=3D"o">/</span> <span class=3D"mi"=
>2</span><span class=3D"p">;</span></div><div class=3D"line">        <span =
class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">padding</=
span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=
=3D"line">          <span class=3D"n">abAppend</span><span class=3D"p">(</s=
pan><span class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s"=
>"~"</span><span class=3D"p">,</span> <span class=3D"mi">1</span><span clas=
s=3D"p">);</span></div><div class=3D"line">          <span class=3D"n">padd=
ing</span><span class=3D"o">--</span><span class=3D"p">;</span></div><div c=
lass=3D"line">        <span class=3D"p">}</span></div><div class=3D"line"> =
       <span class=3D"k">while</span> <span class=3D"p">(</span><span class=
=3D"n">padding</span><span class=3D"o">--</span><span class=3D"p">)</span> =
<span class=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"n=
">ab</span><span class=3D"p">,</span> <span class=3D"s">" "</span><span cla=
ss=3D"p">,</span> <span class=3D"mi">1</span><span class=3D"p">);</span></d=
iv><div class=3D"line">        <span class=3D"n">abAppend</span><span class=
=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</span> <span =
class=3D"n">welcome</span><span class=3D"p">,</span> <span class=3D"n">welc=
omelen</span><span class=3D"p">);</span></div><div class=3D"line">      <sp=
an class=3D"p">}</span> <span class=3D"k">else</span> <span class=3D"p">{</=
span></div><div class=3D"line">        <span class=3D"n">abAppend</span><sp=
an class=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</span=
> <span class=3D"s">"~"</span><span class=3D"p">,</span> <span class=3D"mi"=
>1</span><span class=3D"p">);</span></div><div class=3D"line">      <span c=
lass=3D"p">}</span></div><div class=3D"line">    <span class=3D"p">}</span>=
 <span class=3D"k">else</span> <span class=3D"p">{</span></div><div class=
=3D"line">      <span class=3D"kt">int</span> <span class=3D"n">len</span> =
<span class=3D"o">=3D</span> <span class=3D"n">E</span><span class=3D"p">.<=
/span><span class=3D"n">row</span><span class=3D"p">[</span><span class=3D"=
n">filerow</span><span class=3D"p">].</span><span class=3D"n">rsize</span> =
<span class=3D"o">-</span> <span class=3D"n">E</span><span class=3D"p">.</s=
pan><span class=3D"n">coloff</span><span class=3D"p">;</span></div><div cla=
ss=3D"line">      <span class=3D"k">if</span> <span class=3D"p">(</span><sp=
an class=3D"n">len</span> <span class=3D"o">&lt;</span> <span class=3D"mi">=
0</span><span class=3D"p">)</span> <span class=3D"n">len</span> <span class=
=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span></di=
v><div class=3D"line">      <span class=3D"k">if</span> <span class=3D"p">(=
</span><span class=3D"n">len</span> <span class=3D"o">&gt;</span> <span cla=
ss=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screencols</sp=
an><span class=3D"p">)</span> <span class=3D"n">len</span> <span class=3D"o=
">=3D</span> <span class=3D"n">E</span><span class=3D"p">.</span><span clas=
s=3D"n">screencols</span><span class=3D"p">;</span></div><div class=3D"line=
">      <span class=3D"kt">char</span> <span class=3D"o">*</span><span clas=
s=3D"n">c</span> <span class=3D"o">=3D</span> <span class=3D"o">&amp;</span=
><span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">row<=
/span><span class=3D"p">[</span><span class=3D"n">filerow</span><span class=
=3D"p">].</span><span class=3D"n">render</span><span class=3D"p">[</span><s=
pan class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">coloff<=
/span><span class=3D"p">];</span></div><div class=3D"line">      <span clas=
s=3D"kt">unsigned</span> <span class=3D"kt">char</span> <span class=3D"o">*=
</span><span class=3D"n">hl</span> <span class=3D"o">=3D</span> <span class=
=3D"o">&amp;</span><span class=3D"n">E</span><span class=3D"p">.</span><spa=
n class=3D"n">row</span><span class=3D"p">[</span><span class=3D"n">filerow=
</span><span class=3D"p">].</span><span class=3D"n">hl</span><span class=3D=
"p">[</span><span class=3D"n">E</span><span class=3D"p">.</span><span class=
=3D"n">coloff</span><span class=3D"p">];</span></div><ins class=3D"line">  =
    <span class=3D"kt">int</span> <span class=3D"n">current_color</span> <s=
pan class=3D"o">=3D</span> <span class=3D"o">-</span><span class=3D"mi">1</=
span><span class=3D"p">;</span></ins><div class=3D"line">      <span class=
=3D"kt">int</span> <span class=3D"n">j</span><span class=3D"p">;</span></di=
v><div class=3D"line">      <span class=3D"k">for</span> <span class=3D"p">=
(</span><span class=3D"n">j</span> <span class=3D"o">=3D</span> <span class=
=3D"mi">0</span><span class=3D"p">;</span> <span class=3D"n">j</span> <span=
 class=3D"o">&lt;</span> <span class=3D"n">len</span><span class=3D"p">;</s=
pan> <span class=3D"n">j</span><span class=3D"o">++</span><span class=3D"p"=
>)</span> <span class=3D"p">{</span></div><div class=3D"line">        <span=
 class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">hl</span=
><span class=3D"p">[</span><span class=3D"n">j</span><span class=3D"p">]</s=
pan> <span class=3D"o">=3D=3D</span> <span class=3D"n">HL_NORMAL</span><spa=
n class=3D"p">)</span> <span class=3D"p">{</span></div><ins class=3D"line">=
          <span class=3D"k">if</span> <span class=3D"p">(</span><span class=
=3D"n">current_color</span> <span class=3D"o">!=3D</span> <span class=3D"o"=
>-</span><span class=3D"mi">1</span><span class=3D"p">)</span> <span class=
=3D"p">{</span></ins><div class=3D"line">            <span class=3D"n">abAp=
pend</span><span class=3D"p">(</span><span class=3D"n">ab</span><span class=
=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\x1b</span><sp=
an class=3D"s">[39m"</span><span class=3D"p">,</span> <span class=3D"mi">5<=
/span><span class=3D"p">);</span></div><ins class=3D"line">            <spa=
n class=3D"n">current_color</span> <span class=3D"o">=3D</span> <span class=
=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">;</span></ins><=
ins class=3D"line">          <span class=3D"p">}</span></ins><div class=3D"=
line">          <span class=3D"n">abAppend</span><span class=3D"p">(</span>=
<span class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"o">&am=
p;</span><span class=3D"n">c</span><span class=3D"p">[</span><span class=3D=
"n">j</span><span class=3D"p">],</span> <span class=3D"mi">1</span><span cl=
ass=3D"p">);</span></div><div class=3D"line">        <span class=3D"p">}</s=
pan> <span class=3D"k">else</span> <span class=3D"p">{</span></div><div cla=
ss=3D"line">          <span class=3D"kt">int</span> <span class=3D"n">color=
</span> <span class=3D"o">=3D</span> <span class=3D"n">editorSyntaxToColor<=
/span><span class=3D"p">(</span><span class=3D"n">hl</span><span class=3D"p=
">[</span><span class=3D"n">j</span><span class=3D"p">]);</span></div><ins =
class=3D"line">          <span class=3D"k">if</span> <span class=3D"p">(</s=
pan><span class=3D"n">color</span> <span class=3D"o">!=3D</span> <span clas=
s=3D"n">current_color</span><span class=3D"p">)</span> <span class=3D"p">{<=
/span></ins><ins class=3D"line">            <span class=3D"n">current_color=
</span> <span class=3D"o">=3D</span> <span class=3D"n">color</span><span cl=
ass=3D"p">;</span></ins><div class=3D"line">            <span class=3D"kt">=
char</span> <span class=3D"n">buf</span><span class=3D"p">[</span><span cla=
ss=3D"mi">16</span><span class=3D"p">];</span></div><div class=3D"line">   =
         <span class=3D"kt">int</span> <span class=3D"n">clen</span> <span =
class=3D"o">=3D</span> <span class=3D"n">snprintf</span><span class=3D"p">(=
</span><span class=3D"n">buf</span><span class=3D"p">,</span> <span class=
=3D"k">sizeof</span><span class=3D"p">(</span><span class=3D"n">buf</span><=
span class=3D"p">),</span> <span class=3D"s">"</span><span class=3D"se">\x1=
b</span><span class=3D"s">[%dm"</span><span class=3D"p">,</span> <span clas=
s=3D"n">color</span><span class=3D"p">);</span></div><div class=3D"line">  =
          <span class=3D"n">abAppend</span><span class=3D"p">(</span><span =
class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"n">buf</span=
><span class=3D"p">,</span> <span class=3D"n">clen</span><span class=3D"p">=
);</span></div><ins class=3D"line">          <span class=3D"p">}</span></in=
s><div class=3D"line">          <span class=3D"n">abAppend</span><span clas=
s=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</span> <span=
 class=3D"o">&amp;</span><span class=3D"n">c</span><span class=3D"p">[</spa=
n><span class=3D"n">j</span><span class=3D"p">],</span> <span class=3D"mi">=
1</span><span class=3D"p">);</span></div><div class=3D"line">        <span =
class=3D"p">}</span></div><div class=3D"line">      <span class=3D"p">}</sp=
an></div><div class=3D"line">      <span class=3D"n">abAppend</span><span c=
lass=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</span> <s=
pan class=3D"s">"</span><span class=3D"se">\x1b</span><span class=3D"s">[39=
m"</span><span class=3D"p">,</span> <span class=3D"mi">5</span><span class=
=3D"p">);</span></div><div class=3D"line">    <span class=3D"p">}</span></d=
iv><div class=3D"line"></div><div class=3D"line">    <span class=3D"n">abAp=
pend</span><span class=3D"p">(</span><span class=3D"n">ab</span><span class=
=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\x1b</span><sp=
an class=3D"s">[K"</span><span class=3D"p">,</span> <span class=3D"mi">3</s=
pan><span class=3D"p">);</span></div><div class=3D"line">    <span class=3D=
"n">abAppend</span><span class=3D"p">(</span><span class=3D"n">ab</span><sp=
an class=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\r\n</=
span><span class=3D"s">"</span><span class=3D"p">,</span> <span class=3D"mi=
">2</span><span class=3D"p">);</span></div><div class=3D"line">  <span clas=
s=3D"p">}</span></div><div class=3D"line"><span class=3D"p">}</span></div><=
div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void=
</span> <span class=3D"nf">editorDrawStatusBar</span><span class=3D"p">(</s=
pan><span class=3D"k">struct</span> <span class=3D"n">abuf</span> <span cla=
ss=3D"o">*</span><span class=3D"n">ab</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=
=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void</span> <=
span class=3D"nf">editorDrawMessageBar</span><span class=3D"p">(</span><spa=
n class=3D"k">struct</span> <span class=3D"n">abuf</span> <span class=3D"o"=
>*</span><span class=3D"n">ab</span><span class=3D"p">)</span> <span class=
=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"lin=
e"></div><div class=3D"line folded"><span class=3D"kt">void</span> <span cl=
ass=3D"nf">editorRefreshScreen</span><span class=3D"p">()</span> <span clas=
s=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"li=
ne"></div><div class=3D"line folded"><span class=3D"kt">void</span> <span c=
lass=3D"nf">editorSetStatusMessage</span><span class=3D"p">(</span><span cl=
ass=3D"k">const</span> <span class=3D"kt">char</span> <span class=3D"o">*</=
span><span class=3D"n">fmt</span><span class=3D"p">,</span> <span class=3D"=
p">...)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</sp=
an></div><div class=3D"line"></div><div class=3D"line folded"><span class=
=3D"cm">/*** input ***/</span></div><div class=3D"line folded"><span class=
=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p><code>current_color</code> is <code>-1</code> when we want the default t=
ext color, otherwise it is
set to the value that <code>editorSyntaxToColor()</code> last returned. Whe=
n the color
changes, we print out the escape sequence for that color and set
<code>current_color</code> to the new color. When we go from highlighted te=
xt back to
<code>HL_NORMAL</code> text, we print out the <code>&lt;esc&gt;[39m</code> =
escape sequence and set
<code>current_color</code> to <code>-1</code>.</p>

<p>That concludes our refactoring of the syntax highlighting system.</p>
<h2 id=3D"colorful-search-results"><a href=3D"https://viewsourcecode.org/sn=
aptoken/kilo/07.syntaxHighlighting.html#colorful-search-results">Colorful s=
earch results</a></h2>

<p>Before we start highlighting strings and keywords and all that, let=E2=
=80=99s use our
highlighting system to highlight search results. We=E2=80=99ll start by add=
ing
<code>HL_MATCH</code> to the <code>editorHighlight</code> enum, and mapping=
 it to the color blue
(<code>34</code>) in <code>editorSyntaxToColor()</code>.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/hl-match/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 150</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/hl-match">hl-match</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line"><span class=3D"c=
m">/*** defines ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne"><span class=3D"cp">#define KILO_VERSION "0.0.1"</span></div><div class=
=3D"line"><span class=3D"cp">#define KILO_TAB_STOP 8</span></div><div class=
=3D"line"><span class=3D"cp">#define KILO_QUIT_TIMES 3</span></div><div cla=
ss=3D"line"></div><div class=3D"line"><span class=3D"cp">#define CTRL_KEY(k=
) ((k) &amp; 0x1f)</span></div><div class=3D"line"></div><div class=3D"line=
 folded"><span class=3D"k">enum</span> <span class=3D"n">editorKey</span> <=
span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">};</span></div><div c=
lass=3D"line"></div><div class=3D"line"><span class=3D"k">enum</span> <span=
 class=3D"n">editorHighlight</span> <span class=3D"p">{</span></div><div cl=
ass=3D"line">  <span class=3D"n">HL_NORMAL</span> <span class=3D"o">=3D</sp=
an> <span class=3D"mi">0</span><span class=3D"p">,</span></div><ins class=
=3D"line">  <span class=3D"n">HL_NUMBER</span><span class=3D"p">,</span></i=
ns><ins class=3D"line">  <span class=3D"n">HL_MATCH</span></ins><div class=
=3D"line"><span class=3D"p">};</span></div><div class=3D"line"></div><div c=
lass=3D"line folded"><span class=3D"cm">/*** data ***/</span></div><div cla=
ss=3D"line folded"><span class=3D"cm">/*** prototypes ***/</span></div><div=
 class=3D"line folded"><span class=3D"cm">/*** terminal ***/</span></div><d=
iv class=3D"line"><span class=3D"cm">/*** syntax highlighting ***/</span></=
div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt"=
>void</span> <span class=3D"nf">editorUpdateSyntax</span><span class=3D"p">=
(</span><span class=3D"n">erow</span> <span class=3D"o">*</span><span class=
=3D"n">row</span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=
=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div class=
=3D"line"><span class=3D"kt">int</span> <span class=3D"nf">editorSyntaxToCo=
lor</span><span class=3D"p">(</span><span class=3D"kt">int</span> <span cla=
ss=3D"n">hl</span><span class=3D"p">)</span> <span class=3D"p">{</span></di=
v><div class=3D"line">  <span class=3D"k">switch</span> <span class=3D"p">(=
</span><span class=3D"n">hl</span><span class=3D"p">)</span> <span class=3D=
"p">{</span></div><div class=3D"line">    <span class=3D"k">case</span> <sp=
an class=3D"n">HL_NUMBER</span><span class=3D"p">:</span> <span class=3D"k"=
>return</span> <span class=3D"mi">31</span><span class=3D"p">;</span></div>=
<ins class=3D"line">    <span class=3D"k">case</span> <span class=3D"n">HL_=
MATCH</span><span class=3D"p">:</span> <span class=3D"k">return</span> <spa=
n class=3D"mi">34</span><span class=3D"p">;</span></ins><div class=3D"line"=
>    <span class=3D"nl">default:</span> <span class=3D"k">return</span> <sp=
an class=3D"mi">37</span><span class=3D"p">;</span></div><div class=3D"line=
">  <span class=3D"p">}</span></div><div class=3D"line"><span class=3D"p">}=
</span></div><div class=3D"line"></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** row operations ***/</span></div><div class=3D"line folded"><=
span class=3D"cm">/*** editor operations ***/</span></div><div class=3D"lin=
e folded"><span class=3D"cm">/*** file i/o ***/</span></div><div class=3D"l=
ine folded"><span class=3D"cm">/*** find ***/</span></div><div class=3D"lin=
e folded"><span class=3D"cm">/*** append buffer ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** output ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** input ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** init ***/</span></div></code></pre=
>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>Now all we have to do is <code>memset()</code> the matched substring to =
<code>HL_MATCH</code> in our
search code.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/search-highlighting/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 151</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/search-highlighting">search-highlighting</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><span =
class=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><spa=
n class=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line=
 folded"><span class=3D"cm">/*** row operations ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** editor operations ***/</span></div=
><div class=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span></d=
iv><div class=3D"line"><span class=3D"cm">/*** find ***/</span></div><div c=
lass=3D"line"></div><div class=3D"line"><span class=3D"kt">void</span> <spa=
n class=3D"nf">editorFindCallback</span><span class=3D"p">(</span><span cla=
ss=3D"kt">char</span> <span class=3D"o">*</span><span class=3D"n">query</sp=
an><span class=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D"=
n">key</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><di=
v class=3D"line">  <span class=3D"k">static</span> <span class=3D"kt">int</=
span> <span class=3D"n">last_match</span> <span class=3D"o">=3D</span> <spa=
n class=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">;</span>=
</div><div class=3D"line">  <span class=3D"k">static</span> <span class=3D"=
kt">int</span> <span class=3D"n">direction</span> <span class=3D"o">=3D</sp=
an> <span class=3D"mi">1</span><span class=3D"p">;</span></div><div class=
=3D"line"></div><div class=3D"line">  <span class=3D"k">if</span> <span cla=
ss=3D"p">(</span><span class=3D"n">key</span> <span class=3D"o">=3D=3D</spa=
n> <span class=3D"sc">'\r'</span> <span class=3D"o">||</span> <span class=
=3D"n">key</span> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'\x1b'=
</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div clas=
s=3D"line">    <span class=3D"n">last_match</span> <span class=3D"o">=3D</s=
pan> <span class=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p"=
>;</span></div><div class=3D"line">    <span class=3D"n">direction</span> <=
span class=3D"o">=3D</span> <span class=3D"mi">1</span><span class=3D"p">;<=
/span></div><div class=3D"line">    <span class=3D"k">return</span><span cl=
ass=3D"p">;</span></div><div class=3D"line">  <span class=3D"p">}</span> <s=
pan class=3D"k">else</span> <span class=3D"k">if</span> <span class=3D"p">(=
</span><span class=3D"n">key</span> <span class=3D"o">=3D=3D</span> <span c=
lass=3D"n">ARROW_RIGHT</span> <span class=3D"o">||</span> <span class=3D"n"=
>key</span> <span class=3D"o">=3D=3D</span> <span class=3D"n">ARROW_DOWN</s=
pan><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=
=3D"line">    <span class=3D"n">direction</span> <span class=3D"o">=3D</spa=
n> <span class=3D"mi">1</span><span class=3D"p">;</span></div><div class=3D=
"line">  <span class=3D"p">}</span> <span class=3D"k">else</span> <span cla=
ss=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">key</span> <=
span class=3D"o">=3D=3D</span> <span class=3D"n">ARROW_LEFT</span> <span cl=
ass=3D"o">||</span> <span class=3D"n">key</span> <span class=3D"o">=3D=3D</=
span> <span class=3D"n">ARROW_UP</span><span class=3D"p">)</span> <span cla=
ss=3D"p">{</span></div><div class=3D"line">    <span class=3D"n">direction<=
/span> <span class=3D"o">=3D</span> <span class=3D"o">-</span><span class=
=3D"mi">1</span><span class=3D"p">;</span></div><div class=3D"line">  <span=
 class=3D"p">}</span> <span class=3D"k">else</span> <span class=3D"p">{</sp=
an></div><div class=3D"line">    <span class=3D"n">last_match</span> <span =
class=3D"o">=3D</span> <span class=3D"o">-</span><span class=3D"mi">1</span=
><span class=3D"p">;</span></div><div class=3D"line">    <span class=3D"n">=
direction</span> <span class=3D"o">=3D</span> <span class=3D"mi">1</span><s=
pan class=3D"p">;</span></div><div class=3D"line">  <span class=3D"p">}</sp=
an></div><div class=3D"line"></div><div class=3D"line">  <span class=3D"k">=
if</span> <span class=3D"p">(</span><span class=3D"n">last_match</span> <sp=
an class=3D"o">=3D=3D</span> <span class=3D"o">-</span><span class=3D"mi">1=
</span><span class=3D"p">)</span> <span class=3D"n">direction</span> <span =
class=3D"o">=3D</span> <span class=3D"mi">1</span><span class=3D"p">;</span=
></div><div class=3D"line">  <span class=3D"kt">int</span> <span class=3D"n=
">current</span> <span class=3D"o">=3D</span> <span class=3D"n">last_match<=
/span><span class=3D"p">;</span></div><div class=3D"line">  <span class=3D"=
kt">int</span> <span class=3D"n">i</span><span class=3D"p">;</span></div><d=
iv class=3D"line">  <span class=3D"k">for</span> <span class=3D"p">(</span>=
<span class=3D"n">i</span> <span class=3D"o">=3D</span> <span class=3D"mi">=
0</span><span class=3D"p">;</span> <span class=3D"n">i</span> <span class=
=3D"o">&lt;</span> <span class=3D"n">E</span><span class=3D"p">.</span><spa=
n class=3D"n">numrows</span><span class=3D"p">;</span> <span class=3D"n">i<=
/span><span class=3D"o">++</span><span class=3D"p">)</span> <span class=3D"=
p">{</span></div><div class=3D"line">    <span class=3D"n">current</span> <=
span class=3D"o">+=3D</span> <span class=3D"n">direction</span><span class=
=3D"p">;</span></div><div class=3D"line">    <span class=3D"k">if</span> <s=
pan class=3D"p">(</span><span class=3D"n">current</span> <span class=3D"o">=
=3D=3D</span> <span class=3D"o">-</span><span class=3D"mi">1</span><span cl=
ass=3D"p">)</span> <span class=3D"n">current</span> <span class=3D"o">=3D</=
span> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n"=
>numrows</span> <span class=3D"o">-</span> <span class=3D"mi">1</span><span=
 class=3D"p">;</span></div><div class=3D"line">    <span class=3D"k">else</=
span> <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"=
n">current</span> <span class=3D"o">=3D=3D</span> <span class=3D"n">E</span=
><span class=3D"p">.</span><span class=3D"n">numrows</span><span class=3D"p=
">)</span> <span class=3D"n">current</span> <span class=3D"o">=3D</span> <s=
pan class=3D"mi">0</span><span class=3D"p">;</span></div><div class=3D"line=
"></div><div class=3D"line">    <span class=3D"n">erow</span> <span class=
=3D"o">*</span><span class=3D"n">row</span> <span class=3D"o">=3D</span> <s=
pan class=3D"o">&amp;</span><span class=3D"n">E</span><span class=3D"p">.</=
span><span class=3D"n">row</span><span class=3D"p">[</span><span class=3D"n=
">current</span><span class=3D"p">];</span></div><div class=3D"line">    <s=
pan class=3D"kt">char</span> <span class=3D"o">*</span><span class=3D"n">ma=
tch</span> <span class=3D"o">=3D</span> <span class=3D"n">strstr</span><spa=
n class=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</=
span><span class=3D"n">render</span><span class=3D"p">,</span> <span class=
=3D"n">query</span><span class=3D"p">);</span></div><div class=3D"line">   =
 <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">ma=
tch</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div c=
lass=3D"line">      <span class=3D"n">last_match</span> <span class=3D"o">=
=3D</span> <span class=3D"n">current</span><span class=3D"p">;</span></div>=
<div class=3D"line">      <span class=3D"n">E</span><span class=3D"p">.</sp=
an><span class=3D"n">cy</span> <span class=3D"o">=3D</span> <span class=3D"=
n">current</span><span class=3D"p">;</span></div><div class=3D"line">      =
<span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">cx</s=
pan> <span class=3D"o">=3D</span> <span class=3D"n">editorRowRxToCx</span><=
span class=3D"p">(</span><span class=3D"n">row</span><span class=3D"p">,</s=
pan> <span class=3D"n">match</span> <span class=3D"o">-</span> <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">render</sp=
an><span class=3D"p">);</span></div><div class=3D"line">      <span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">rowoff</span> <s=
pan class=3D"o">=3D</span> <span class=3D"n">E</span><span class=3D"p">.</s=
pan><span class=3D"n">numrows</span><span class=3D"p">;</span></div><div cl=
ass=3D"line"></div><ins class=3D"line">      <span class=3D"n">memset</span=
><span class=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D"n">=
row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><span cl=
ass=3D"p">[</span><span class=3D"n">match</span> <span class=3D"o">-</span>=
 <span class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n=
">render</span><span class=3D"p">],</span> <span class=3D"n">HL_MATCH</span=
><span class=3D"p">,</span> <span class=3D"n">strlen</span><span class=3D"p=
">(</span><span class=3D"n">query</span><span class=3D"p">));</span></ins><=
div class=3D"line">      <span class=3D"k">break</span><span class=3D"p">;<=
/span></div><div class=3D"line">    <span class=3D"p">}</span></div><div cl=
ass=3D"line">  <span class=3D"p">}</span></div><div class=3D"line"><span cl=
ass=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line folded=
"><span class=3D"kt">void</span> <span class=3D"nf">editorFind</span><span =
class=3D"p">()</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p=
">}</span></div><div class=3D"line"></div><div class=3D"line folded"><span =
class=3D"cm">/*** append buffer ***/</span></div><div class=3D"line folded"=
><span class=3D"cm">/*** output ***/</span></div><div class=3D"line folded"=
><span class=3D"cm">/*** input ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p><code>match - row-&gt;render</code> is the index into <code>render</code=
> of the match, so we use that
as our index into <code>hl</code>.</p>
<h2 id=3D"restore-syntax-highlighting-after-search"><a href=3D"https://view=
sourcecode.org/snaptoken/kilo/07.syntaxHighlighting.html#restore-syntax-hig=
hlighting-after-search">Restore syntax highlighting after search</a></h2>

<p>Currently, search results stay highlighted in blue even after the user i=
s done
using the search feature. We want to restore <code>hl</code> to its previou=
s value after
each search. To do that, we=E2=80=99ll save the original contents of <code>=
hl</code> in a static
variable named <code>saved_hl</code> in <code>editorFindCallback()</code>, =
and restore <code>hl</code> to the
contents of <code>saved_hl</code> at the top of the callback.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/restore-hl/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 152</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/restore-hl">restore-hl</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><span =
class=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><spa=
n class=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line=
 folded"><span class=3D"cm">/*** row operations ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** editor operations ***/</span></div=
><div class=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span></d=
iv><div class=3D"line"><span class=3D"cm">/*** find ***/</span></div><div c=
lass=3D"line"></div><div class=3D"line"><span class=3D"kt">void</span> <spa=
n class=3D"nf">editorFindCallback</span><span class=3D"p">(</span><span cla=
ss=3D"kt">char</span> <span class=3D"o">*</span><span class=3D"n">query</sp=
an><span class=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D"=
n">key</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><di=
v class=3D"line">  <span class=3D"k">static</span> <span class=3D"kt">int</=
span> <span class=3D"n">last_match</span> <span class=3D"o">=3D</span> <spa=
n class=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">;</span>=
</div><div class=3D"line">  <span class=3D"k">static</span> <span class=3D"=
kt">int</span> <span class=3D"n">direction</span> <span class=3D"o">=3D</sp=
an> <span class=3D"mi">1</span><span class=3D"p">;</span></div><div class=
=3D"line"></div><ins class=3D"line">  <span class=3D"k">static</span> <span=
 class=3D"kt">int</span> <span class=3D"n">saved_hl_line</span><span class=
=3D"p">;</span></ins><ins class=3D"line">  <span class=3D"k">static</span> =
<span class=3D"kt">char</span> <span class=3D"o">*</span><span class=3D"n">=
saved_hl</span> <span class=3D"o">=3D</span> <span class=3D"nb">NULL</span>=
<span class=3D"p">;</span></ins><ins class=3D"line"></ins><ins class=3D"lin=
e">  <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n=
">saved_hl</span><span class=3D"p">)</span> <span class=3D"p">{</span></ins=
><ins class=3D"line">    <span class=3D"n">memcpy</span><span class=3D"p">(=
</span><span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n=
">row</span><span class=3D"p">[</span><span class=3D"n">saved_hl_line</span=
><span class=3D"p">].</span><span class=3D"n">hl</span><span class=3D"p">,<=
/span> <span class=3D"n">saved_hl</span><span class=3D"p">,</span> <span cl=
ass=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">row</span><sp=
an class=3D"p">[</span><span class=3D"n">saved_hl_line</span><span class=3D=
"p">].</span><span class=3D"n">rsize</span><span class=3D"p">);</span></ins=
><ins class=3D"line">    <span class=3D"n">free</span><span class=3D"p">(</=
span><span class=3D"n">saved_hl</span><span class=3D"p">);</span></ins><ins=
 class=3D"line">    <span class=3D"n">saved_hl</span> <span class=3D"o">=3D=
</span> <span class=3D"nb">NULL</span><span class=3D"p">;</span></ins><ins =
class=3D"line">  <span class=3D"p">}</span></ins><div class=3D"line"></div>=
<div class=3D"line">  <span class=3D"k">if</span> <span class=3D"p">(</span=
><span class=3D"n">key</span> <span class=3D"o">=3D=3D</span> <span class=
=3D"sc">'\r'</span> <span class=3D"o">||</span> <span class=3D"n">key</span=
> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'\x1b'</span><span cla=
ss=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line">    <=
span class=3D"n">last_match</span> <span class=3D"o">=3D</span> <span class=
=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">;</span></div><=
div class=3D"line">    <span class=3D"n">direction</span> <span class=3D"o"=
>=3D</span> <span class=3D"mi">1</span><span class=3D"p">;</span></div><div=
 class=3D"line">    <span class=3D"k">return</span><span class=3D"p">;</spa=
n></div><div class=3D"line">  <span class=3D"p">}</span> <span class=3D"k">=
else</span> <span class=3D"k">if</span> <span class=3D"p">(</span><span cla=
ss=3D"n">key</span> <span class=3D"o">=3D=3D</span> <span class=3D"n">ARROW=
_RIGHT</span> <span class=3D"o">||</span> <span class=3D"n">key</span> <spa=
n class=3D"o">=3D=3D</span> <span class=3D"n">ARROW_DOWN</span><span class=
=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line">    <sp=
an class=3D"n">direction</span> <span class=3D"o">=3D</span> <span class=3D=
"mi">1</span><span class=3D"p">;</span></div><div class=3D"line">  <span cl=
ass=3D"p">}</span> <span class=3D"k">else</span> <span class=3D"k">if</span=
> <span class=3D"p">(</span><span class=3D"n">key</span> <span class=3D"o">=
=3D=3D</span> <span class=3D"n">ARROW_LEFT</span> <span class=3D"o">||</spa=
n> <span class=3D"n">key</span> <span class=3D"o">=3D=3D</span> <span class=
=3D"n">ARROW_UP</span><span class=3D"p">)</span> <span class=3D"p">{</span>=
</div><div class=3D"line">    <span class=3D"n">direction</span> <span clas=
s=3D"o">=3D</span> <span class=3D"o">-</span><span class=3D"mi">1</span><sp=
an class=3D"p">;</span></div><div class=3D"line">  <span class=3D"p">}</spa=
n> <span class=3D"k">else</span> <span class=3D"p">{</span></div><div class=
=3D"line">    <span class=3D"n">last_match</span> <span class=3D"o">=3D</sp=
an> <span class=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">=
;</span></div><div class=3D"line">    <span class=3D"n">direction</span> <s=
pan class=3D"o">=3D</span> <span class=3D"mi">1</span><span class=3D"p">;</=
span></div><div class=3D"line">  <span class=3D"p">}</span></div><div class=
=3D"line"></div><div class=3D"line">  <span class=3D"k">if</span> <span cla=
ss=3D"p">(</span><span class=3D"n">last_match</span> <span class=3D"o">=3D=
=3D</span> <span class=3D"o">-</span><span class=3D"mi">1</span><span class=
=3D"p">)</span> <span class=3D"n">direction</span> <span class=3D"o">=3D</s=
pan> <span class=3D"mi">1</span><span class=3D"p">;</span></div><div class=
=3D"line">  <span class=3D"kt">int</span> <span class=3D"n">current</span> =
<span class=3D"o">=3D</span> <span class=3D"n">last_match</span><span class=
=3D"p">;</span></div><div class=3D"line">  <span class=3D"kt">int</span> <s=
pan class=3D"n">i</span><span class=3D"p">;</span></div><div class=3D"line"=
>  <span class=3D"k">for</span> <span class=3D"p">(</span><span class=3D"n"=
>i</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span cla=
ss=3D"p">;</span> <span class=3D"n">i</span> <span class=3D"o">&lt;</span> =
<span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">numro=
ws</span><span class=3D"p">;</span> <span class=3D"n">i</span><span class=
=3D"o">++</span><span class=3D"p">)</span> <span class=3D"p">{</span></div>=
<div class=3D"line">    <span class=3D"n">current</span> <span class=3D"o">=
+=3D</span> <span class=3D"n">direction</span><span class=3D"p">;</span></d=
iv><div class=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(<=
/span><span class=3D"n">current</span> <span class=3D"o">=3D=3D</span> <spa=
n class=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">)</span>=
 <span class=3D"n">current</span> <span class=3D"o">=3D</span> <span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">numrows</span> <=
span class=3D"o">-</span> <span class=3D"mi">1</span><span class=3D"p">;</s=
pan></div><div class=3D"line">    <span class=3D"k">else</span> <span class=
=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">current</span>=
 <span class=3D"o">=3D=3D</span> <span class=3D"n">E</span><span class=3D"p=
">.</span><span class=3D"n">numrows</span><span class=3D"p">)</span> <span =
class=3D"n">current</span> <span class=3D"o">=3D</span> <span class=3D"mi">=
0</span><span class=3D"p">;</span></div><div class=3D"line"></div><div clas=
s=3D"line">    <span class=3D"n">erow</span> <span class=3D"o">*</span><spa=
n class=3D"n">row</span> <span class=3D"o">=3D</span> <span class=3D"o">&am=
p;</span><span class=3D"n">E</span><span class=3D"p">.</span><span class=3D=
"n">row</span><span class=3D"p">[</span><span class=3D"n">current</span><sp=
an class=3D"p">];</span></div><div class=3D"line">    <span class=3D"kt">ch=
ar</span> <span class=3D"o">*</span><span class=3D"n">match</span> <span cl=
ass=3D"o">=3D</span> <span class=3D"n">strstr</span><span class=3D"p">(</sp=
an><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D=
"n">render</span><span class=3D"p">,</span> <span class=3D"n">query</span><=
span class=3D"p">);</span></div><div class=3D"line">    <span class=3D"k">i=
f</span> <span class=3D"p">(</span><span class=3D"n">match</span><span clas=
s=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line">      =
<span class=3D"n">last_match</span> <span class=3D"o">=3D</span> <span clas=
s=3D"n">current</span><span class=3D"p">;</span></div><div class=3D"line"> =
     <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">=
cy</span> <span class=3D"o">=3D</span> <span class=3D"n">current</span><spa=
n class=3D"p">;</span></div><div class=3D"line">      <span class=3D"n">E</=
span><span class=3D"p">.</span><span class=3D"n">cx</span> <span class=3D"o=
">=3D</span> <span class=3D"n">editorRowRxToCx</span><span class=3D"p">(</s=
pan><span class=3D"n">row</span><span class=3D"p">,</span> <span class=3D"n=
">match</span> <span class=3D"o">-</span> <span class=3D"n">row</span><span=
 class=3D"o">-&gt;</span><span class=3D"n">render</span><span class=3D"p">)=
;</span></div><div class=3D"line">      <span class=3D"n">E</span><span cla=
ss=3D"p">.</span><span class=3D"n">rowoff</span> <span class=3D"o">=3D</spa=
n> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">nu=
mrows</span><span class=3D"p">;</span></div><div class=3D"line"></div><ins =
class=3D"line">      <span class=3D"n">saved_hl_line</span> <span class=3D"=
o">=3D</span> <span class=3D"n">current</span><span class=3D"p">;</span></i=
ns><ins class=3D"line">      <span class=3D"n">saved_hl</span> <span class=
=3D"o">=3D</span> <span class=3D"n">malloc</span><span class=3D"p">(</span>=
<span class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n"=
>rsize</span><span class=3D"p">);</span></ins><ins class=3D"line">      <sp=
an class=3D"n">memcpy</span><span class=3D"p">(</span><span class=3D"n">sav=
ed_hl</span><span class=3D"p">,</span> <span class=3D"n">row</span><span cl=
ass=3D"o">-&gt;</span><span class=3D"n">hl</span><span class=3D"p">,</span>=
 <span class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n=
">rsize</span><span class=3D"p">);</span></ins><div class=3D"line">      <s=
pan class=3D"n">memset</span><span class=3D"p">(</span><span class=3D"o">&a=
mp;</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span c=
lass=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">match</span=
> <span class=3D"o">-</span> <span class=3D"n">row</span><span class=3D"o">=
-&gt;</span><span class=3D"n">render</span><span class=3D"p">],</span> <spa=
n class=3D"n">HL_MATCH</span><span class=3D"p">,</span> <span class=3D"n">s=
trlen</span><span class=3D"p">(</span><span class=3D"n">query</span><span c=
lass=3D"p">));</span></div><div class=3D"line">      <span class=3D"k">brea=
k</span><span class=3D"p">;</span></div><div class=3D"line">    <span class=
=3D"p">}</span></div><div class=3D"line">  <span class=3D"p">}</span></div>=
<div class=3D"line"><span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line folded"><span class=3D"kt">void</span> <span class=3D=
"nf">editorFind</span><span class=3D"p">()</span> <span class=3D"p">{</span=
> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div =
class=3D"line folded"><span class=3D"cm">/*** append buffer ***/</span></di=
v><div class=3D"line folded"><span class=3D"cm">/*** output ***/</span></di=
v><div class=3D"line folded"><span class=3D"cm">/*** input ***/</span></div=
><div class=3D"line folded"><span class=3D"cm">/*** init ***/</span></div><=
/code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>We use another static variable named <code>saved_hl_line</code> to know =
which line=E2=80=99s <code>hl</code>
needs to be restored. <code>saved_hl</code> is a dynamically allocated arra=
y which points
to <code>NULL</code> when there is nothing to restore. If there is somethin=
g to restore,
we <code>memcpy()</code> it to the saved line=E2=80=99s <code>hl</code> and=
 then deallocate <code>saved_hl</code> and
set it back to <code>NULL</code>.</p>

<p>Notice that the <code>malloc()</code>=E2=80=99d memory is guaranteed to =
be <code>free()</code>=E2=80=99d, because
when the user closes the search prompt by pressing <kbd>Enter</kbd> or
<kbd>Escape</kbd>, <code>editorPrompt()</code> calls our callback, giving a=
 chance for
<code>hl</code> to be restored before <code>editorPrompt()</code> finally r=
eturns. Also notice that
it=E2=80=99s impossible for <code>saved_hl</code> to get <code>malloc()</co=
de>=E2=80=99d before its old value gets
<code>free()</code>=E2=80=99d, because we always <code>free()</code> it at =
the top of the function. And
finally, it=E2=80=99s impossible for the user to edit the file between savi=
ng and
restoring the <code>hl</code>, so we can safely use <code>saved_hl_line</co=
de> as an index into
<code>E.row</code>. (It=E2=80=99s important to think about these things.)</=
p>
<h2 id=3D"colorful-numbers"><a href=3D"https://viewsourcecode.org/snaptoken=
/kilo/07.syntaxHighlighting.html#colorful-numbers">Colorful numbers</a></h2=
>

<p>Alright, let=E2=80=99s start working on highlighting numbers properly. F=
irst, we=E2=80=99ll
change our <code>for</code> loop in <code>editorUpdateSyntax()</code> to a =
<code>while</code> loop, to allow us
to consume multiple characters each iteration. (We=E2=80=99ll only consume =
one
character at a time for numbers, but this will be useful for later.)</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/syntax-while/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 153</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/syntax-while">syntax-while</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><span =
class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span class=
=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line"></div=
><div class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">edit=
orUpdateSyntax</span><span class=3D"p">(</span><span class=3D"n">erow</span=
> <span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p">)=
</span> <span class=3D"p">{</span></div><div class=3D"line">  <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span> =
<span class=3D"o">=3D</span> <span class=3D"n">realloc</span><span class=3D=
"p">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span=
 class=3D"n">hl</span><span class=3D"p">,</span> <span class=3D"n">row</spa=
n><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line">  <span class=3D"n">memset</span>=
<span class=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&g=
t;</span><span class=3D"n">hl</span><span class=3D"p">,</span> <span class=
=3D"n">HL_NORMAL</span><span class=3D"p">,</span> <span class=3D"n">row</sp=
an><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line"></div><ins class=3D"line">  <span=
 class=3D"kt">int</span> <span class=3D"n">i</span> <span class=3D"o">=3D</=
span> <span class=3D"mi">0</span><span class=3D"p">;</span></ins><ins class=
=3D"line">  <span class=3D"k">while</span> <span class=3D"p">(</span><span =
class=3D"n">i</span> <span class=3D"o">&lt;</span> <span class=3D"n">row</s=
pan><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">)</span> <span class=3D"p">{</span></ins><ins class=3D"line">    <sp=
an class=3D"kt">char</span> <span class=3D"n">c</span> <span class=3D"o">=
=3D</span> <span class=3D"n">row</span><span class=3D"o">-&gt;</span><span =
class=3D"n">render</span><span class=3D"p">[</span><span class=3D"n">i</spa=
n><span class=3D"p">];</span></ins><ins class=3D"line"></ins><ins class=3D"=
line">    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=
=3D"n">isdigit</span><span class=3D"p">(</span><span class=3D"n">c</span><s=
pan class=3D"p">))</span> <span class=3D"p">{</span></ins><div class=3D"lin=
e">      <span class=3D"n">row</span><span class=3D"o">-&gt;</span><span cl=
ass=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</span><spa=
n class=3D"p">]</span> <span class=3D"o">=3D</span> <span class=3D"n">HL_NU=
MBER</span><span class=3D"p">;</span></div><div class=3D"line">    <span cl=
ass=3D"p">}</span></div><div class=3D"line"></div><ins class=3D"line">    <=
span class=3D"n">i</span><span class=3D"o">++</span><span class=3D"p">;</sp=
an></ins><div class=3D"line">  <span class=3D"p">}</span></div><div class=
=3D"line"><span class=3D"p">}</span></div><div class=3D"line"></div><div cl=
ass=3D"line folded"><span class=3D"kt">int</span> <span class=3D"n">editorS=
yntaxToColor</span><span class=3D"p">(</span><span class=3D"kt">int</span> =
<span class=3D"n">hl</span><span class=3D"p">)</span> <span class=3D"p">{</=
span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><=
div class=3D"line folded"><span class=3D"cm">/*** row operations ***/</span=
></div><div class=3D"line folded"><span class=3D"cm">/*** editor operations=
 ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** file i=
/o ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** find=
 ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** append=
 buffer ***/</span></div><div class=3D"line folded"><span class=3D"cm">/***=
 output ***/</span></div><div class=3D"line folded"><span class=3D"cm">/***=
 input ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** =
init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>Now let=E2=80=99s define an <code>is_separator()</code> function that ta=
kes a character and
returns true if it=E2=80=99s considered a separator character.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/is-separator/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 154</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/is-separator">is-separator</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><span =
class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span class=
=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line"></div=
><ins class=3D"line"><span class=3D"kt">int</span> <span class=3D"nf">is_se=
parator</span><span class=3D"p">(</span><span class=3D"kt">int</span> <span=
 class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p">{</span><=
/ins><ins class=3D"line">  <span class=3D"k">return</span> <span class=3D"n=
">isspace</span><span class=3D"p">(</span><span class=3D"n">c</span><span c=
lass=3D"p">)</span> <span class=3D"o">||</span> <span class=3D"n">c</span> =
<span class=3D"o">=3D=3D</span> <span class=3D"sc">'\0'</span> <span class=
=3D"o">||</span> <span class=3D"n">strchr</span><span class=3D"p">(</span><=
span class=3D"s">",.()+-/*=3D~%&lt;&gt;[];"</span><span class=3D"p">,</span=
> <span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"o">!=
=3D</span> <span class=3D"nb">NULL</span><span class=3D"p">;</span></ins><i=
ns class=3D"line"><span class=3D"p">}</span></ins><div class=3D"line"></div=
><div class=3D"line folded"><span class=3D"kt">void</span> <span class=3D"n=
f">editorUpdateSyntax</span><span class=3D"p">(</span><span class=3D"n">ero=
w</span> <span class=3D"o">*</span><span class=3D"n">row</span><span class=
=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</s=
pan></div><div class=3D"line"></div><div class=3D"line folded"><span class=
=3D"kt">int</span> <span class=3D"nf">editorSyntaxToColor</span><span class=
=3D"p">(</span><span class=3D"kt">int</span> <span class=3D"n">hl</span><sp=
an class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D=
"p">}</span></div><div class=3D"line"></div><div class=3D"line folded"><spa=
n class=3D"cm">/*** row operations ***/</span></div><div class=3D"line fold=
ed"><span class=3D"cm">/*** editor operations ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span></div><div cla=
ss=3D"line folded"><span class=3D"cm">/*** find ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** append buffer ***/</span></div><di=
v class=3D"line folded"><span class=3D"cm">/*** output ***/</span></div><di=
v class=3D"line folded"><span class=3D"cm">/*** input ***/</span></div><div=
 class=3D"line folded"><span class=3D"cm">/*** init ***/</span></div></code=
></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p><code>strchr()</code> comes from <code>&lt;string.h&gt;</code>. It looks=
 for the first occurrence of a
character in a string, and returns a pointer to the matching character in t=
he
string. If the string doesn=E2=80=99t contain the character, <code>strchr()=
</code> returns <code>NULL</code>.</p>

<p>Right now, numbers are highlighted even if they=E2=80=99re part of an id=
entifier, such
as the <code>32</code> in <code>int32_t</code>. To fix that, we=E2=80=99ll =
require that numbers are preceded
by a separator character, which includes whitespace or punctuation characte=
rs.
We also include the null byte (<code>'\0'</code>), because then we can coun=
t the null byte
at the end of each line as a separator, which will make some of our code
simpler in the future.</p>

<p>Let=E2=80=99s add a <code>prev_sep</code> variable to <code>editorUpdate=
Syntax()</code> that keeps track of
whether the previous character was a separator. Then let=E2=80=99s use it t=
o recognize
and highlight numbers properly.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/prev-sep/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 155</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/prev-sep">prev-sep</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><span =
class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span class=
=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line"></div=
><div class=3D"line folded"><span class=3D"kt">int</span> <span class=3D"nf=
">is_separator</span><span class=3D"p">(</span><span class=3D"kt">int</span=
> <span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p">{<=
/span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div>=
<div class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">edito=
rUpdateSyntax</span><span class=3D"p">(</span><span class=3D"n">erow</span>=
 <span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p">)<=
/span> <span class=3D"p">{</span></div><div class=3D"line">  <span class=3D=
"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span> <sp=
an class=3D"o">=3D</span> <span class=3D"n">realloc</span><span class=3D"p"=
>(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span cl=
ass=3D"n">hl</span><span class=3D"p">,</span> <span class=3D"n">row</span><=
span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=3D"p=
">);</span></div><div class=3D"line">  <span class=3D"n">memset</span><span=
 class=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</s=
pan><span class=3D"n">hl</span><span class=3D"p">,</span> <span class=3D"n"=
>HL_NORMAL</span><span class=3D"p">,</span> <span class=3D"n">row</span><sp=
an class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=3D"p">=
);</span></div><div class=3D"line"></div><ins class=3D"line">  <span class=
=3D"kt">int</span> <span class=3D"n">prev_sep</span> <span class=3D"o">=3D<=
/span> <span class=3D"mi">1</span><span class=3D"p">;</span></ins><div clas=
s=3D"line"></div><div class=3D"line">  <span class=3D"kt">int</span> <span =
class=3D"n">i</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</spa=
n><span class=3D"p">;</span></div><div class=3D"line">  <span class=3D"k">w=
hile</span> <span class=3D"p">(</span><span class=3D"n">i</span> <span clas=
s=3D"o">&lt;</span> <span class=3D"n">row</span><span class=3D"o">-&gt;</sp=
an><span class=3D"n">rsize</span><span class=3D"p">)</span> <span class=3D"=
p">{</span></div><div class=3D"line">    <span class=3D"kt">char</span> <sp=
an class=3D"n">c</span> <span class=3D"o">=3D</span> <span class=3D"n">row<=
/span><span class=3D"o">-&gt;</span><span class=3D"n">render</span><span cl=
ass=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">];</span></di=
v><ins class=3D"line">    <span class=3D"kt">unsigned</span> <span class=3D=
"kt">char</span> <span class=3D"n">prev_hl</span> <span class=3D"o">=3D</sp=
an> <span class=3D"p">(</span><span class=3D"n">i</span> <span class=3D"o">=
&gt;</span> <span class=3D"mi">0</span><span class=3D"p">)</span> <span cla=
ss=3D"o">?</span> <span class=3D"n">row</span><span class=3D"o">-&gt;</span=
><span class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</=
span> <span class=3D"o">-</span> <span class=3D"mi">1</span><span class=3D"=
p">]</span> <span class=3D"o">:</span> <span class=3D"n">HL_NORMAL</span><s=
pan class=3D"p">;</span></ins><div class=3D"line"></div><ins class=3D"line"=
>    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n=
">isdigit</span><span class=3D"p">(</span><span class=3D"n">c</span><span c=
lass=3D"p">)</span> <span class=3D"o">&amp;&amp;</span> <span class=3D"p">(=
</span><span class=3D"n">prev_sep</span> <span class=3D"o">||</span> <span =
class=3D"n">prev_hl</span> <span class=3D"o">=3D=3D</span> <span class=3D"n=
">HL_NUMBER</span><span class=3D"p">))</span> <span class=3D"p">{</span></i=
ns><div class=3D"line">      <span class=3D"n">row</span><span class=3D"o">=
-&gt;</span><span class=3D"n">hl</span><span class=3D"p">[</span><span clas=
s=3D"n">i</span><span class=3D"p">]</span> <span class=3D"o">=3D</span> <sp=
an class=3D"n">HL_NUMBER</span><span class=3D"p">;</span></div><ins class=
=3D"line">      <span class=3D"n">i</span><span class=3D"o">++</span><span =
class=3D"p">;</span></ins><ins class=3D"line">      <span class=3D"n">prev_=
sep</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span cl=
ass=3D"p">;</span></ins><ins class=3D"line">      <span class=3D"k">continu=
e</span><span class=3D"p">;</span></ins><div class=3D"line">    <span class=
=3D"p">}</span></div><div class=3D"line"></div><ins class=3D"line">    <spa=
n class=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <span class=3D"n=
">is_separator</span><span class=3D"p">(</span><span class=3D"n">c</span><s=
pan class=3D"p">);</span></ins><div class=3D"line">    <span class=3D"n">i<=
/span><span class=3D"o">++</span><span class=3D"p">;</span></div><div class=
=3D"line">  <span class=3D"p">}</span></div><div class=3D"line"><span class=
=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line folded"><=
span class=3D"kt">int</span> <span class=3D"n">editorSyntaxToColor</span><s=
pan class=3D"p">(</span><span class=3D"kt">int</span> <span class=3D"n">hl<=
/span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span=
 class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line fol=
ded"><span class=3D"cm">/*** row operations ***/</span></div><div class=3D"=
line folded"><span class=3D"cm">/*** editor operations ***/</span></div><di=
v class=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span></div><=
div class=3D"line folded"><span class=3D"cm">/*** find ***/</span></div><di=
v class=3D"line folded"><span class=3D"cm">/*** append buffer ***/</span></=
div><div class=3D"line folded"><span class=3D"cm">/*** output ***/</span></=
div><div class=3D"line folded"><span class=3D"cm">/*** input ***/</span></d=
iv><div class=3D"line folded"><span class=3D"cm">/*** init ***/</span></div=
></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>We initialize <code>prev_sep</code> to <code>1</code> (meaning true) bec=
ause we consider the
beginning of the line to be a separator. (Otherwise numbers at the very
beginning of the line wouldn=E2=80=99t be highlighted.)</p>

<p><code>prev_hl</code> is set to the highlight type of the previous charac=
ter. To highlight
a digit with <code>HL_NUMBER</code>, we now require the previous character =
to either be a
separator, or to also be highlighted with <code>HL_NUMBER</code>.</p>

<p>When we decide to highlight the current character a certain way (<code>H=
L_NUMBER</code> in
this case), we increment <code>i</code> to =E2=80=9Cconsume=E2=80=9D that c=
haracter, set <code>prev_sep</code> to <code>0</code>
to indicate we are in the middle of highlighting something, and then <code>=
continue</code>
the loop. We will use this pattern for each thing that we highlight.</p>

<p>If we end up not highlighting the current character, then we=E2=80=99ll =
end up at the
bottom of the <code>while</code> loop, where we set <code>prev_sep</code> a=
ccording to whether the
current character is a separator, and we increment <code>i</code> to consum=
e the
character. The <code>memset()</code> we did at the top of the function mean=
s that an
unhighlighted character will have a value of <code>HL_NORMAL</code> in <cod=
e>hl</code>.</p>

<p>Now let=E2=80=99s support highlighting numbers that contain decimal poin=
ts.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/decimal-point/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 156</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/decimal-point">decimal-point</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><span =
class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span class=
=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line"></div=
><div class=3D"line folded"><span class=3D"kt">int</span> <span class=3D"nf=
">is_separator</span><span class=3D"p">(</span><span class=3D"kt">int</span=
> <span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p">{<=
/span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div>=
<div class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">edito=
rUpdateSyntax</span><span class=3D"p">(</span><span class=3D"n">erow</span>=
 <span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p">)<=
/span> <span class=3D"p">{</span></div><div class=3D"line">  <span class=3D=
"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span> <sp=
an class=3D"o">=3D</span> <span class=3D"n">realloc</span><span class=3D"p"=
>(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span cl=
ass=3D"n">hl</span><span class=3D"p">,</span> <span class=3D"n">row</span><=
span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=3D"p=
">);</span></div><div class=3D"line">  <span class=3D"n">memset</span><span=
 class=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</s=
pan><span class=3D"n">hl</span><span class=3D"p">,</span> <span class=3D"n"=
>HL_NORMAL</span><span class=3D"p">,</span> <span class=3D"n">row</span><sp=
an class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=3D"p">=
);</span></div><div class=3D"line"></div><div class=3D"line">  <span class=
=3D"kt">int</span> <span class=3D"n">prev_sep</span> <span class=3D"o">=3D<=
/span> <span class=3D"mi">1</span><span class=3D"p">;</span></div><div clas=
s=3D"line"></div><div class=3D"line">  <span class=3D"kt">int</span> <span =
class=3D"n">i</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</spa=
n><span class=3D"p">;</span></div><div class=3D"line">  <span class=3D"k">w=
hile</span> <span class=3D"p">(</span><span class=3D"n">i</span> <span clas=
s=3D"o">&lt;</span> <span class=3D"n">row</span><span class=3D"o">-&gt;</sp=
an><span class=3D"n">rsize</span><span class=3D"p">)</span> <span class=3D"=
p">{</span></div><div class=3D"line">    <span class=3D"kt">char</span> <sp=
an class=3D"n">c</span> <span class=3D"o">=3D</span> <span class=3D"n">row<=
/span><span class=3D"o">-&gt;</span><span class=3D"n">render</span><span cl=
ass=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">];</span></di=
v><div class=3D"line">    <span class=3D"kt">unsigned</span> <span class=3D=
"kt">char</span> <span class=3D"n">prev_hl</span> <span class=3D"o">=3D</sp=
an> <span class=3D"p">(</span><span class=3D"n">i</span> <span class=3D"o">=
&gt;</span> <span class=3D"mi">0</span><span class=3D"p">)</span> <span cla=
ss=3D"o">?</span> <span class=3D"n">row</span><span class=3D"o">-&gt;</span=
><span class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</=
span> <span class=3D"o">-</span> <span class=3D"mi">1</span><span class=3D"=
p">]</span> <span class=3D"o">:</span> <span class=3D"n">HL_NORMAL</span><s=
pan class=3D"p">;</span></div><div class=3D"line"></div><ins class=3D"line"=
>    <span class=3D"k">if</span> <span class=3D"p">((</span><span class=3D"=
n">isdigit</span><span class=3D"p">(</span><span class=3D"n">c</span><span =
class=3D"p">)</span> <span class=3D"o">&amp;&amp;</span> <span class=3D"p">=
(</span><span class=3D"n">prev_sep</span> <span class=3D"o">||</span> <span=
 class=3D"n">prev_hl</span> <span class=3D"o">=3D=3D</span> <span class=3D"=
n">HL_NUMBER</span><span class=3D"p">))</span> <span class=3D"o">||</span><=
/ins><ins class=3D"line">        <span class=3D"p">(</span><span class=3D"n=
">c</span> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'.'</span> <s=
pan class=3D"o">&amp;&amp;</span> <span class=3D"n">prev_hl</span> <span cl=
ass=3D"o">=3D=3D</span> <span class=3D"n">HL_NUMBER</span><span class=3D"p"=
>))</span> <span class=3D"p">{</span></ins><div class=3D"line">      <span =
class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</s=
pan><span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]=
</span> <span class=3D"o">=3D</span> <span class=3D"n">HL_NUMBER</span><spa=
n class=3D"p">;</span></div><div class=3D"line">      <span class=3D"n">i</=
span><span class=3D"o">++</span><span class=3D"p">;</span></div><div class=
=3D"line">      <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</sp=
an> <span class=3D"mi">0</span><span class=3D"p">;</span></div><div class=
=3D"line">      <span class=3D"k">continue</span><span class=3D"p">;</span>=
</div><div class=3D"line">    <span class=3D"p">}</span></div><div class=3D=
"line"></div><div class=3D"line">    <span class=3D"n">prev_sep</span> <spa=
n class=3D"o">=3D</span> <span class=3D"n">is_separator</span><span class=
=3D"p">(</span><span class=3D"n">c</span><span class=3D"p">);</span></div><=
div class=3D"line">    <span class=3D"n">i</span><span class=3D"o">++</span=
><span class=3D"p">;</span></div><div class=3D"line">  <span class=3D"p">}<=
/span></div><div class=3D"line"><span class=3D"p">}</span></div><div class=
=3D"line"></div><div class=3D"line folded"><span class=3D"kt">int</span> <s=
pan class=3D"n">editorSyntaxToColor</span><span class=3D"p">(</span><span c=
lass=3D"kt">int</span> <span class=3D"n">hl</span><span class=3D"p">)</span=
> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div=
 class=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/*** ro=
w operations ***/</span></div><div class=3D"line folded"><span class=3D"cm"=
>/*** editor operations ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** file i/o ***/</span></div><div class=3D"line folded"><span=
 class=3D"cm">/*** find ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** append buffer ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** output ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** input ***/</span></div><div class=3D"line folded"><=
span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>A <code>.</code> character that comes after a character that we just hig=
hlighted as a
number will now be considered part of the number.</p>
<h2 id=3D"detect-filetype"><a href=3D"https://viewsourcecode.org/snaptoken/=
kilo/07.syntaxHighlighting.html#detect-filetype">Detect filetype</a></h2>

<p>Before we go on to highlight other things, we=E2=80=99re going to add fi=
letype
detection to our editor. This will allow us to have different rules for how=
 to
highlight different types of files. For example, text files shouldn=E2=80=
=99t have any
highlighting, and C files should highlight numbers, strings, C/C++-style
comments, and many different keywords specific to C.</p>

<p>Let=E2=80=99s create an <code>editorSyntax</code> struct that will conta=
in all the syntax
highlighting information for a particular filetype.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/editor-syntax/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 157</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/editor-syntax">editor-syntax</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line"><span class=3D"c=
m">/*** defines ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne"><span class=3D"cp">#define KILO_VERSION "0.0.1"</span></div><div class=
=3D"line"><span class=3D"cp">#define KILO_TAB_STOP 8</span></div><div class=
=3D"line"><span class=3D"cp">#define KILO_QUIT_TIMES 3</span></div><div cla=
ss=3D"line"></div><div class=3D"line"><span class=3D"cp">#define CTRL_KEY(k=
) ((k) &amp; 0x1f)</span></div><div class=3D"line"></div><div class=3D"line=
 folded"><span class=3D"k">enum</span> <span class=3D"n">editorKey</span> <=
span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">};</span></div><div c=
lass=3D"line"></div><div class=3D"line folded"><span class=3D"k">enum</span=
> <span class=3D"n">editorHighlight</span> <span class=3D"p">{</span> =E2=
=80=A6 <span class=3D"p">};</span></div><div class=3D"line"></div><ins clas=
s=3D"line"><span class=3D"cp">#define HL_HIGHLIGHT_NUMBERS (1&lt;&lt;0)</sp=
an></ins><div class=3D"line"></div><div class=3D"line"><span class=3D"cm">/=
*** data ***/</span></div><div class=3D"line"></div><ins class=3D"line"><sp=
an class=3D"k">struct</span> <span class=3D"n">editorSyntax</span> <span cl=
ass=3D"p">{</span></ins><ins class=3D"line">  <span class=3D"kt">char</span=
> <span class=3D"o">*</span><span class=3D"n">filetype</span><span class=3D=
"p">;</span></ins><ins class=3D"line">  <span class=3D"kt">char</span> <spa=
n class=3D"o">**</span><span class=3D"n">filematch</span><span class=3D"p">=
;</span></ins><ins class=3D"line">  <span class=3D"kt">int</span> <span cla=
ss=3D"n">flags</span><span class=3D"p">;</span></ins><ins class=3D"line"><s=
pan class=3D"p">};</span></ins><div class=3D"line"></div><div class=3D"line=
 folded"><span class=3D"k">typedef</span> <span class=3D"k">struct</span> <=
span class=3D"n">erow</span> <span class=3D"p">{</span> =E2=80=A6 <span cla=
ss=3D"p">}</span> <span class=3D"n">erow</span><span class=3D"p">;</span></=
div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"k">=
struct</span> <span class=3D"n">editorConfig</span> <span class=3D"p">{</sp=
an> =E2=80=A6 <span class=3D"p">};</span></div><div class=3D"line"></div><d=
iv class=3D"line"><span class=3D"k">struct</span> <span class=3D"n">editorC=
onfig</span> <span class=3D"n">E</span><span class=3D"p">;</span></div><div=
 class=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/*** pr=
ototypes ***/</span></div><div class=3D"line folded"><span class=3D"cm">/**=
* terminal ***/</span></div><div class=3D"line folded"><span class=3D"cm">/=
*** syntax highlighting ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** row operations ***/</span></div><div class=3D"line folded"=
><span class=3D"cm">/*** editor operations ***/</span></div><div class=3D"l=
ine folded"><span class=3D"cm">/*** file i/o ***/</span></div><div class=3D=
"line folded"><span class=3D"cm">/*** find ***/</span></div><div class=3D"l=
ine folded"><span class=3D"cm">/*** append buffer ***/</span></div><div cla=
ss=3D"line folded"><span class=3D"cm">/*** output ***/</span></div><div cla=
ss=3D"line folded"><span class=3D"cm">/*** input ***/</span></div><div clas=
s=3D"line folded"><span class=3D"cm">/*** init ***/</span></div></code></pr=
e>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>The <code>filetype</code> field is the name of the filetype that will be=
 displayed to the
user in the status bar. <code>filematch</code> is an array of strings, wher=
e each string
contains a pattern to match a filename against. If the filename matches, th=
en
the file will be recognized as having that filetype. Finally, <code>flags</=
code> is a bit
field that will contain flags for whether to highlight numbers and whether =
to
highlight strings for that filetype. For now, we define just the
<code>HL_HIGHLIGHT_NUMBERS</code> flag bit.</p>

<p>Now let=E2=80=99s make an array of built-in <code>editorSyntax</code> st=
ructs, and add one for the
C language to it.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/hldb/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 158</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/hldb">hldb</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line"><span class=3D"=
cm">/*** data ***/</span></div><div class=3D"line"></div><div class=3D"line=
 folded"><span class=3D"k">struct</span> <span class=3D"n">editorSyntax</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">};</span></div><=
div class=3D"line"></div><div class=3D"line folded"><span class=3D"k">typed=
ef</span> <span class=3D"k">struct</span> <span class=3D"n">erow</span> <sp=
an class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span> <span class=3D=
"n">erow</span><span class=3D"p">;</span></div><div class=3D"line"></div><d=
iv class=3D"line folded"><span class=3D"k">struct</span> <span class=3D"n">=
editorConfig</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">=
};</span></div><div class=3D"line"></div><div class=3D"line"><span class=3D=
"k">struct</span> <span class=3D"n">editorConfig</span> <span class=3D"n">E=
</span><span class=3D"p">;</span></div><div class=3D"line"></div><ins class=
=3D"line"><span class=3D"cm">/*** filetypes ***/</span></ins><ins class=3D"=
line"></ins><ins class=3D"line"><span class=3D"kt">char</span> <span class=
=3D"o">*</span><span class=3D"n">C_HL_extensions</span><span class=3D"p">[]=
</span> <span class=3D"o">=3D</span> <span class=3D"p">{</span> <span class=
=3D"s">".c"</span><span class=3D"p">,</span> <span class=3D"s">".h"</span><=
span class=3D"p">,</span> <span class=3D"s">".cpp"</span><span class=3D"p">=
,</span> <span class=3D"nb">NULL</span> <span class=3D"p">};</span></ins><i=
ns class=3D"line"></ins><ins class=3D"line"><span class=3D"k">struct</span>=
 <span class=3D"n">editorSyntax</span> <span class=3D"n">HLDB</span><span c=
lass=3D"p">[]</span> <span class=3D"o">=3D</span> <span class=3D"p">{</span=
></ins><ins class=3D"line">  <span class=3D"p">{</span></ins><ins class=3D"=
line">    <span class=3D"s">"c"</span><span class=3D"p">,</span></ins><ins =
class=3D"line">    <span class=3D"n">C_HL_extensions</span><span class=3D"p=
">,</span></ins><ins class=3D"line">    <span class=3D"n">HL_HIGHLIGHT_NUMB=
ERS</span></ins><ins class=3D"line">  <span class=3D"p">},</span></ins><ins=
 class=3D"line"><span class=3D"p">};</span></ins><ins class=3D"line"></ins>=
<ins class=3D"line"><span class=3D"cp">#define HLDB_ENTRIES (sizeof(HLDB) /=
 sizeof(HLDB[0]))</span></ins><div class=3D"line"></div><div class=3D"line =
folded"><span class=3D"cm">/*** prototypes ***/</span></div><div class=3D"l=
ine folded"><span class=3D"cm">/*** terminal ***/</span></div><div class=3D=
"line folded"><span class=3D"cm">/*** syntax highlighting ***/</span></div>=
<div class=3D"line folded"><span class=3D"cm">/*** row operations ***/</spa=
n></div><div class=3D"line folded"><span class=3D"cm">/*** editor operation=
s ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** file =
i/o ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** fin=
d ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** appen=
d buffer ***/</span></div><div class=3D"line folded"><span class=3D"cm">/**=
* output ***/</span></div><div class=3D"line folded"><span class=3D"cm">/**=
* input ***/</span></div><div class=3D"line folded"><span class=3D"cm">/***=
 init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p><code>HLDB</code> stands for =E2=80=9Chighlight database=E2=80=9D. Our <=
code>editorSyntax</code> struct for the C
language contains the string <code>"c"</code> for the <code>filetype</code>=
 field, the extensions
<code>".c"</code>, <code>".h"</code>, and <code>".cpp"</code> for the <code=
>filematch</code> field (the array must be
terminated with <code>NULL</code>), and the <code>HL_HIGHLIGHT_NUMBERS</cod=
e> flag turned on in the
<code>flags</code> field.</p>

<p>We then define an <code>HLDB_ENTRIES</code> constant to store the length=
 of the <code>HLDB</code>
array.</p>

<p>Now let=E2=80=99s add a pointer to the current <code>editorSyntax</code>=
 struct in our global
editor state, and initialize it to <code>NULL</code>.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/e-syntax/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 159</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/e-syntax">e-syntax</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line"><span class=3D"=
cm">/*** data ***/</span></div><div class=3D"line"></div><div class=3D"line=
 folded"><span class=3D"k">struct</span> <span class=3D"n">editorSyntax</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">};</span></div><=
div class=3D"line"></div><div class=3D"line folded"><span class=3D"k">typed=
ef</span> <span class=3D"k">struct</span> <span class=3D"n">erow</span> <sp=
an class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span> <span class=3D=
"n">erow</span><span class=3D"p">;</span></div><div class=3D"line"></div><d=
iv class=3D"line"><span class=3D"k">struct</span> <span class=3D"n">editorC=
onfig</span> <span class=3D"p">{</span></div><div class=3D"line">  <span cl=
ass=3D"kt">int</span> <span class=3D"n">cx</span><span class=3D"p">,</span>=
 <span class=3D"n">cy</span><span class=3D"p">;</span></div><div class=3D"l=
ine">  <span class=3D"kt">int</span> <span class=3D"n">rx</span><span class=
=3D"p">;</span></div><div class=3D"line">  <span class=3D"kt">int</span> <s=
pan class=3D"n">rowoff</span><span class=3D"p">;</span></div><div class=3D"=
line">  <span class=3D"kt">int</span> <span class=3D"n">coloff</span><span =
class=3D"p">;</span></div><div class=3D"line">  <span class=3D"kt">int</spa=
n> <span class=3D"n">screenrows</span><span class=3D"p">;</span></div><div =
class=3D"line">  <span class=3D"kt">int</span> <span class=3D"n">screencols=
</span><span class=3D"p">;</span></div><div class=3D"line">  <span class=3D=
"kt">int</span> <span class=3D"n">numrows</span><span class=3D"p">;</span><=
/div><div class=3D"line">  <span class=3D"n">erow</span> <span class=3D"o">=
*</span><span class=3D"n">row</span><span class=3D"p">;</span></div><div cl=
ass=3D"line">  <span class=3D"kt">int</span> <span class=3D"n">dirty</span>=
<span class=3D"p">;</span></div><div class=3D"line">  <span class=3D"kt">ch=
ar</span> <span class=3D"o">*</span><span class=3D"n">filename</span><span =
class=3D"p">;</span></div><div class=3D"line">  <span class=3D"kt">char</sp=
an> <span class=3D"n">statusmsg</span><span class=3D"p">[</span><span class=
=3D"mi">80</span><span class=3D"p">];</span></div><div class=3D"line">  <sp=
an class=3D"kt">time_t</span> <span class=3D"n">statusmsg_time</span><span =
class=3D"p">;</span></div><ins class=3D"line">  <span class=3D"k">struct</s=
pan> <span class=3D"n">editorSyntax</span> <span class=3D"o">*</span><span =
class=3D"n">syntax</span><span class=3D"p">;</span></ins><div class=3D"line=
">  <span class=3D"k">struct</span> <span class=3D"n">termios</span> <span =
class=3D"n">orig_termios</span><span class=3D"p">;</span></div><div class=
=3D"line"><span class=3D"p">};</span></div><div class=3D"line"></div><div c=
lass=3D"line"><span class=3D"k">struct</span> <span class=3D"n">editorConfi=
g</span> <span class=3D"n">E</span><span class=3D"p">;</span></div><div cla=
ss=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/*** filety=
pes ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** pro=
totypes ***/</span></div><div class=3D"line folded"><span class=3D"cm">/***=
 terminal ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*=
** syntax highlighting ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** row operations ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** editor operations ***/</span></div><div class=3D"li=
ne folded"><span class=3D"cm">/*** file i/o ***/</span></div><div class=3D"=
line folded"><span class=3D"cm">/*** find ***/</span></div><div class=3D"li=
ne folded"><span class=3D"cm">/*** append buffer ***/</span></div><div clas=
s=3D"line folded"><span class=3D"cm">/*** output ***/</span></div><div clas=
s=3D"line folded"><span class=3D"cm">/*** input ***/</span></div><div class=
=3D"line"><span class=3D"cm">/*** init ***/</span></div><div class=3D"line"=
></div><div class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf=
">initEditor</span><span class=3D"p">()</span> <span class=3D"p">{</span></=
div><div class=3D"line">  <span class=3D"n">E</span><span class=3D"p">.</sp=
an><span class=3D"n">cx</span> <span class=3D"o">=3D</span> <span class=3D"=
mi">0</span><span class=3D"p">;</span></div><div class=3D"line">  <span cla=
ss=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">cy</span> <spa=
n class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</sp=
an></div><div class=3D"line">  <span class=3D"n">E</span><span class=3D"p">=
.</span><span class=3D"n">rx</span> <span class=3D"o">=3D</span> <span clas=
s=3D"mi">0</span><span class=3D"p">;</span></div><div class=3D"line">  <spa=
n class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">rowoff</s=
pan> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D=
"p">;</span></div><div class=3D"line">  <span class=3D"n">E</span><span cla=
ss=3D"p">.</span><span class=3D"n">coloff</span> <span class=3D"o">=3D</spa=
n> <span class=3D"mi">0</span><span class=3D"p">;</span></div><div class=3D=
"line">  <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D=
"n">numrows</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span>=
<span class=3D"p">;</span></div><div class=3D"line">  <span class=3D"n">E</=
span><span class=3D"p">.</span><span class=3D"n">row</span> <span class=3D"=
o">=3D</span> <span class=3D"nb">NULL</span><span class=3D"p">;</span></div=
><div class=3D"line">  <span class=3D"n">E</span><span class=3D"p">.</span>=
<span class=3D"n">dirty</span> <span class=3D"o">=3D</span> <span class=3D"=
mi">0</span><span class=3D"p">;</span></div><div class=3D"line">  <span cla=
ss=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">filename</span=
> <span class=3D"o">=3D</span> <span class=3D"nb">NULL</span><span class=3D=
"p">;</span></div><div class=3D"line">  <span class=3D"n">E</span><span cla=
ss=3D"p">.</span><span class=3D"n">statusmsg</span><span class=3D"p">[</spa=
n><span class=3D"mi">0</span><span class=3D"p">]</span> <span class=3D"o">=
=3D</span> <span class=3D"sc">'\0'</span><span class=3D"p">;</span></div><d=
iv class=3D"line">  <span class=3D"n">E</span><span class=3D"p">.</span><sp=
an class=3D"n">statusmsg_time</span> <span class=3D"o">=3D</span> <span cla=
ss=3D"mi">0</span><span class=3D"p">;</span></div><ins class=3D"line">  <sp=
an class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">syntax</=
span> <span class=3D"o">=3D</span> <span class=3D"nb">NULL</span><span clas=
s=3D"p">;</span></ins><div class=3D"line"></div><div class=3D"line">  <span=
 class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">getWindo=
wSize</span><span class=3D"p">(</span><span class=3D"o">&amp;</span><span c=
lass=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screenrows</=
span><span class=3D"p">,</span> <span class=3D"o">&amp;</span><span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screencols</span=
><span class=3D"p">)</span> <span class=3D"o">=3D=3D</span> <span class=3D"=
o">-</span><span class=3D"mi">1</span><span class=3D"p">)</span> <span clas=
s=3D"n">die</span><span class=3D"p">(</span><span class=3D"s">"getWindowSiz=
e"</span><span class=3D"p">);</span></div><div class=3D"line">  <span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screenrows</span=
> <span class=3D"o">-=3D</span> <span class=3D"mi">2</span><span class=3D"p=
">;</span></div><div class=3D"line"><span class=3D"p">}</span></div><div cl=
ass=3D"line"></div><div class=3D"line folded"><span class=3D"kt">int</span>=
 <span class=3D"nf">main</span><span class=3D"p">(</span><span class=3D"kt"=
>int</span> <span class=3D"n">argc</span><span class=3D"p">,</span> <span c=
lass=3D"kt">char</span> <span class=3D"o">*</span><span class=3D"n">argv</s=
pan><span class=3D"p">[])</span> <span class=3D"p">{</span> =E2=80=A6 <span=
 class=3D"p">}</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>When <code>E.syntax</code> is <code>NULL</code>, that means there is no =
filetype for the current
file, and no syntax highlighting should be done.</p>

<p>Let=E2=80=99s show the current filetype in the status bar. If <code>E.sy=
ntax</code> is <code>NULL</code>,
then we=E2=80=99ll display <code>no ft</code> (=E2=80=9Cno filetype=E2=80=
=9D) instead.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/show-filetype/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 160</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/show-filetype">show-filetype</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><sp=
an class=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><=
span class=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"l=
ine folded"><span class=3D"cm">/*** row operations ***/</span></div><div cl=
ass=3D"line folded"><span class=3D"cm">/*** editor operations ***/</span></=
div><div class=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span>=
</div><div class=3D"line folded"><span class=3D"cm">/*** find ***/</span></=
div><div class=3D"line folded"><span class=3D"cm">/*** append buffer ***/</=
span></div><div class=3D"line"><span class=3D"cm">/*** output ***/</span></=
div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt"=
>void</span> <span class=3D"nf">editorScroll</span><span class=3D"p">()</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><d=
iv class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void<=
/span> <span class=3D"nf">editorDrawRows</span><span class=3D"p">(</span><s=
pan class=3D"k">struct</span> <span class=3D"n">abuf</span> <span class=3D"=
o">*</span><span class=3D"n">ab</span><span class=3D"p">)</span> <span clas=
s=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"li=
ne"></div><div class=3D"line"><span class=3D"kt">void</span> <span class=3D=
"nf">editorDrawStatusBar</span><span class=3D"p">(</span><span class=3D"k">=
struct</span> <span class=3D"n">abuf</span> <span class=3D"o">*</span><span=
 class=3D"n">ab</span><span class=3D"p">)</span> <span class=3D"p">{</span>=
</div><div class=3D"line">  <span class=3D"n">abAppend</span><span class=3D=
"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</span> <span cla=
ss=3D"s">"</span><span class=3D"se">\x1b</span><span class=3D"s">[7m"</span=
><span class=3D"p">,</span> <span class=3D"mi">4</span><span class=3D"p">);=
</span></div><div class=3D"line">  <span class=3D"kt">char</span> <span cla=
ss=3D"n">status</span><span class=3D"p">[</span><span class=3D"mi">80</span=
><span class=3D"p">],</span> <span class=3D"n">rstatus</span><span class=3D=
"p">[</span><span class=3D"mi">80</span><span class=3D"p">];</span></div><d=
iv class=3D"line">  <span class=3D"kt">int</span> <span class=3D"n">len</sp=
an> <span class=3D"o">=3D</span> <span class=3D"n">snprintf</span><span cla=
ss=3D"p">(</span><span class=3D"n">status</span><span class=3D"p">,</span> =
<span class=3D"k">sizeof</span><span class=3D"p">(</span><span class=3D"n">=
status</span><span class=3D"p">),</span> <span class=3D"s">"%.20s - %d line=
s %s"</span><span class=3D"p">,</span></div><div class=3D"line">    <span c=
lass=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">filename</sp=
an> <span class=3D"o">?</span> <span class=3D"n">E</span><span class=3D"p">=
.</span><span class=3D"n">filename</span> <span class=3D"o">:</span> <span =
class=3D"s">"[No Name]"</span><span class=3D"p">,</span> <span class=3D"n">=
E</span><span class=3D"p">.</span><span class=3D"n">numrows</span><span cla=
ss=3D"p">,</span></div><div class=3D"line">    <span class=3D"n">E</span><s=
pan class=3D"p">.</span><span class=3D"n">dirty</span> <span class=3D"o">?<=
/span> <span class=3D"s">"(modified)"</span> <span class=3D"o">:</span> <sp=
an class=3D"s">""</span><span class=3D"p">);</span></div><ins class=3D"line=
">  <span class=3D"kt">int</span> <span class=3D"n">rlen</span> <span class=
=3D"o">=3D</span> <span class=3D"n">snprintf</span><span class=3D"p">(</spa=
n><span class=3D"n">rstatus</span><span class=3D"p">,</span> <span class=3D=
"k">sizeof</span><span class=3D"p">(</span><span class=3D"n">rstatus</span>=
<span class=3D"p">),</span> <span class=3D"s">"%s | %d/%d"</span><span clas=
s=3D"p">,</span></ins><ins class=3D"line">    <span class=3D"n">E</span><sp=
an class=3D"p">.</span><span class=3D"n">syntax</span> <span class=3D"o">?<=
/span> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n=
">syntax</span><span class=3D"o">-&gt;</span><span class=3D"n">filetype</sp=
an> <span class=3D"o">:</span> <span class=3D"s">"no ft"</span><span class=
=3D"p">,</span> <span class=3D"n">E</span><span class=3D"p">.</span><span c=
lass=3D"n">cy</span> <span class=3D"o">+</span> <span class=3D"mi">1</span>=
<span class=3D"p">,</span> <span class=3D"n">E</span><span class=3D"p">.</s=
pan><span class=3D"n">numrows</span><span class=3D"p">);</span></ins><div c=
lass=3D"line">  <span class=3D"k">if</span> <span class=3D"p">(</span><span=
 class=3D"n">len</span> <span class=3D"o">&gt;</span> <span class=3D"n">E</=
span><span class=3D"p">.</span><span class=3D"n">screencols</span><span cla=
ss=3D"p">)</span> <span class=3D"n">len</span> <span class=3D"o">=3D</span>=
 <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">scre=
encols</span><span class=3D"p">;</span></div><div class=3D"line">  <span cl=
ass=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"n">ab</sp=
an><span class=3D"p">,</span> <span class=3D"n">status</span><span class=3D=
"p">,</span> <span class=3D"n">len</span><span class=3D"p">);</span></div><=
div class=3D"line">  <span class=3D"k">while</span> <span class=3D"p">(</sp=
an><span class=3D"n">len</span> <span class=3D"o">&lt;</span> <span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screencols</span=
><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"l=
ine">    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screencols</span=
> <span class=3D"o">-</span> <span class=3D"n">len</span> <span class=3D"o"=
>=3D=3D</span> <span class=3D"n">rlen</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span></div><div class=3D"line">      <span class=3D"n">abA=
ppend</span><span class=3D"p">(</span><span class=3D"n">ab</span><span clas=
s=3D"p">,</span> <span class=3D"n">rstatus</span><span class=3D"p">,</span>=
 <span class=3D"n">rlen</span><span class=3D"p">);</span></div><div class=
=3D"line">      <span class=3D"k">break</span><span class=3D"p">;</span></d=
iv><div class=3D"line">    <span class=3D"p">}</span> <span class=3D"k">els=
e</span> <span class=3D"p">{</span></div><div class=3D"line">      <span cl=
ass=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"n">ab</sp=
an><span class=3D"p">,</span> <span class=3D"s">" "</span><span class=3D"p"=
>,</span> <span class=3D"mi">1</span><span class=3D"p">);</span></div><div =
class=3D"line">      <span class=3D"n">len</span><span class=3D"o">++</span=
><span class=3D"p">;</span></div><div class=3D"line">    <span class=3D"p">=
}</span></div><div class=3D"line">  <span class=3D"p">}</span></div><div cl=
ass=3D"line">  <span class=3D"n">abAppend</span><span class=3D"p">(</span><=
span class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s">"</s=
pan><span class=3D"se">\x1b</span><span class=3D"s">[m"</span><span class=
=3D"p">,</span> <span class=3D"mi">3</span><span class=3D"p">);</span></div=
><div class=3D"line">  <span class=3D"n">abAppend</span><span class=3D"p">(=
</span><span class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D=
"s">"</span><span class=3D"se">\r\n</span><span class=3D"s">"</span><span c=
lass=3D"p">,</span> <span class=3D"mi">2</span><span class=3D"p">);</span><=
/div><div class=3D"line"><span class=3D"p">}</span></div><div class=3D"line=
"></div><div class=3D"line folded"><span class=3D"kt">void</span> <span cla=
ss=3D"nf">editorDrawMessageBar</span><span class=3D"p">(</span><span class=
=3D"k">struct</span> <span class=3D"n">abuf</span> <span class=3D"o">*</spa=
n><span class=3D"n">ab</span><span class=3D"p">)</span> <span class=3D"p">{=
</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div=
><div class=3D"line folded"><span class=3D"kt">void</span> <span class=3D"n=
f">editorRefreshScreen</span><span class=3D"p">()</span> <span class=3D"p">=
{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></di=
v><div class=3D"line folded"><span class=3D"kt">void</span> <span class=3D"=
nf">editorSetStatusMessage</span><span class=3D"p">(</span><span class=3D"k=
">const</span> <span class=3D"kt">char</span> <span class=3D"o">*</span><sp=
an class=3D"n">fmt</span><span class=3D"p">,</span> <span class=3D"p">...)<=
/span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div=
><div class=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/*=
** input ***/</span></div><div class=3D"line folded"><span class=3D"cm">/**=
* init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>Now let=E2=80=99s change <code>editorUpdateSyntax()</code> to take the c=
urrent <code>E.syntax</code> value
into account.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/use-filetype/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 161</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/use-filetype">use-filetype</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><sp=
an class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line"></=
div><div class=3D"line folded"><span class=3D"kt">int</span> <span class=3D=
"nf">is_separator</span><span class=3D"p">(</span><span class=3D"kt">int</s=
pan> <span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p"=
>{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">ed=
itorUpdateSyntax</span><span class=3D"p">(</span><span class=3D"n">erow</sp=
an> <span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p"=
>)</span> <span class=3D"p">{</span></div><div class=3D"line">  <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span> =
<span class=3D"o">=3D</span> <span class=3D"n">realloc</span><span class=3D=
"p">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span=
 class=3D"n">hl</span><span class=3D"p">,</span> <span class=3D"n">row</spa=
n><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line">  <span class=3D"n">memset</span>=
<span class=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&g=
t;</span><span class=3D"n">hl</span><span class=3D"p">,</span> <span class=
=3D"n">HL_NORMAL</span><span class=3D"p">,</span> <span class=3D"n">row</sp=
an><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line"></div><ins class=3D"line">  <span=
 class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">E</span>=
<span class=3D"p">.</span><span class=3D"n">syntax</span> <span class=3D"o"=
>=3D=3D</span> <span class=3D"nb">NULL</span><span class=3D"p">)</span> <sp=
an class=3D"k">return</span><span class=3D"p">;</span></ins><div class=3D"l=
ine"></div><div class=3D"line">  <span class=3D"kt">int</span> <span class=
=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <span class=3D"mi">1</s=
pan><span class=3D"p">;</span></div><div class=3D"line"></div><div class=3D=
"line">  <span class=3D"kt">int</span> <span class=3D"n">i</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span></=
div><div class=3D"line">  <span class=3D"k">while</span> <span class=3D"p">=
(</span><span class=3D"n">i</span> <span class=3D"o">&lt;</span> <span clas=
s=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">rsize</sp=
an><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D=
"line">    <span class=3D"kt">char</span> <span class=3D"n">c</span> <span =
class=3D"o">=3D</span> <span class=3D"n">row</span><span class=3D"o">-&gt;<=
/span><span class=3D"n">render</span><span class=3D"p">[</span><span class=
=3D"n">i</span><span class=3D"p">];</span></div><div class=3D"line">    <sp=
an class=3D"kt">unsigned</span> <span class=3D"kt">char</span> <span class=
=3D"n">prev_hl</span> <span class=3D"o">=3D</span> <span class=3D"p">(</spa=
n><span class=3D"n">i</span> <span class=3D"o">&gt;</span> <span class=3D"m=
i">0</span><span class=3D"p">)</span> <span class=3D"o">?</span> <span clas=
s=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span>=
<span class=3D"p">[</span><span class=3D"n">i</span> <span class=3D"o">-</s=
pan> <span class=3D"mi">1</span><span class=3D"p">]</span> <span class=3D"o=
">:</span> <span class=3D"n">HL_NORMAL</span><span class=3D"p">;</span></di=
v><div class=3D"line"></div><ins class=3D"line">    <span class=3D"k">if</s=
pan> <span class=3D"p">(</span><span class=3D"n">E</span><span class=3D"p">=
.</span><span class=3D"n">syntax</span><span class=3D"o">-&gt;</span><span =
class=3D"n">flags</span> <span class=3D"o">&amp;</span> <span class=3D"n">H=
L_HIGHLIGHT_NUMBERS</span><span class=3D"p">)</span> <span class=3D"p">{</s=
pan></ins><div class=3D"line">      <span class=3D"k">if</span> <span class=
=3D"p">((</span><span class=3D"n">isdigit</span><span class=3D"p">(</span><=
span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"o">&amp;=
&amp;</span> <span class=3D"p">(</span><span class=3D"n">prev_sep</span> <s=
pan class=3D"o">||</span> <span class=3D"n">prev_hl</span> <span class=3D"o=
">=3D=3D</span> <span class=3D"n">HL_NUMBER</span><span class=3D"p">))</spa=
n> <span class=3D"o">||</span></div><div class=3D"line">          <span cla=
ss=3D"p">(</span><span class=3D"n">c</span> <span class=3D"o">=3D=3D</span>=
 <span class=3D"sc">'.'</span> <span class=3D"o">&amp;&amp;</span> <span cl=
ass=3D"n">prev_hl</span> <span class=3D"o">=3D=3D</span> <span class=3D"n">=
HL_NUMBER</span><span class=3D"p">))</span> <span class=3D"p">{</span></div=
><div class=3D"line">        <span class=3D"n">row</span><span class=3D"o">=
-&gt;</span><span class=3D"n">hl</span><span class=3D"p">[</span><span clas=
s=3D"n">i</span><span class=3D"p">]</span> <span class=3D"o">=3D</span> <sp=
an class=3D"n">HL_NUMBER</span><span class=3D"p">;</span></div><div class=
=3D"line">        <span class=3D"n">i</span><span class=3D"o">++</span><spa=
n class=3D"p">;</span></div><div class=3D"line">        <span class=3D"n">p=
rev_sep</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><spa=
n class=3D"p">;</span></div><div class=3D"line">        <span class=3D"k">c=
ontinue</span><span class=3D"p">;</span></div><div class=3D"line">      <sp=
an class=3D"p">}</span></div><ins class=3D"line">    <span class=3D"p">}</s=
pan></ins><div class=3D"line"></div><div class=3D"line">    <span class=3D"=
n">prev_sep</span> <span class=3D"o">=3D</span> <span class=3D"n">is_separa=
tor</span><span class=3D"p">(</span><span class=3D"n">c</span><span class=
=3D"p">);</span></div><div class=3D"line">    <span class=3D"n">i</span><sp=
an class=3D"o">++</span><span class=3D"p">;</span></div><div class=3D"line"=
>  <span class=3D"p">}</span></div><div class=3D"line"><span class=3D"p">}<=
/span></div><div class=3D"line"></div><div class=3D"line folded"><span clas=
s=3D"kt">int</span> <span class=3D"nf">editorSyntaxToColor</span><span clas=
s=3D"p">(</span><span class=3D"kt">int</span> <span class=3D"n">hl</span><s=
pan class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=
=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line folded"><=
span class=3D"cm">/*** row operations ***/</span></div><div class=3D"line f=
olded"><span class=3D"cm">/*** editor operations ***/</span></div><div clas=
s=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span></div><div cl=
ass=3D"line folded"><span class=3D"cm">/*** find ***/</span></div><div clas=
s=3D"line folded"><span class=3D"cm">/*** append buffer ***/</span></div><d=
iv class=3D"line folded"><span class=3D"cm">/*** output ***/</span></div><d=
iv class=3D"line folded"><span class=3D"cm">/*** input ***/</span></div><di=
v class=3D"line folded"><span class=3D"cm">/*** init ***/</span></div></cod=
e></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>If no filetype is set, we <code>return</code> immediately after <code>me=
mset()</code>ting the entire
line to <code>HL_NORMAL</code>. We also wrap the number-highlighting code i=
n an <code>if</code>
statement that checks to see if numbers should be highlighted for the curre=
nt
filetype.</p>

<p>Now we=E2=80=99ll create an <code>editorSelectSyntaxHighlight()</code> f=
unction that tries to
match the current filename to one of the <code>filematch</code> fields in t=
he <code>HLDB</code>. If
one matches, it=E2=80=99ll set <code>E.syntax</code> to that filetype.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/select-syntax/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 162</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/select-syntax">select-syntax</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><sp=
an class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line"></=
div><div class=3D"line folded"><span class=3D"kt">int</span> <span class=3D=
"nf">is_separator</span><span class=3D"p">(</span><span class=3D"kt">int</s=
pan> <span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p"=
>{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line folded"><span class=3D"kt">void</span> <span class=3D=
"nf">editorUpdateSyntax</span><span class=3D"p">(</span><span class=3D"n">e=
row</span> <span class=3D"o">*</span><span class=3D"n">row</span><span clas=
s=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</=
span></div><div class=3D"line"></div><div class=3D"line folded"><span class=
=3D"kt">int</span> <span class=3D"nf">editorSyntaxToColor</span><span class=
=3D"p">(</span><span class=3D"kt">int</span> <span class=3D"n">hl</span><sp=
an class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D=
"p">}</span></div><div class=3D"line"></div><ins class=3D"line"><span class=
=3D"kt">void</span> <span class=3D"nf">editorSelectSyntaxHighlight</span><s=
pan class=3D"p">()</span> <span class=3D"p">{</span></ins><ins class=3D"lin=
e">  <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">=
syntax</span> <span class=3D"o">=3D</span> <span class=3D"nb">NULL</span><s=
pan class=3D"p">;</span></ins><ins class=3D"line">  <span class=3D"k">if</s=
pan> <span class=3D"p">(</span><span class=3D"n">E</span><span class=3D"p">=
.</span><span class=3D"n">filename</span> <span class=3D"o">=3D=3D</span> <=
span class=3D"nb">NULL</span><span class=3D"p">)</span> <span class=3D"k">r=
eturn</span><span class=3D"p">;</span></ins><ins class=3D"line"></ins><ins =
class=3D"line">  <span class=3D"kt">char</span> <span class=3D"o">*</span><=
span class=3D"n">ext</span> <span class=3D"o">=3D</span> <span class=3D"n">=
strrchr</span><span class=3D"p">(</span><span class=3D"n">E</span><span cla=
ss=3D"p">.</span><span class=3D"n">filename</span><span class=3D"p">,</span=
> <span class=3D"sc">'.'</span><span class=3D"p">);</span></ins><ins class=
=3D"line"></ins><ins class=3D"line">  <span class=3D"k">for</span> <span cl=
ass=3D"p">(</span><span class=3D"kt">unsigned</span> <span class=3D"kt">int=
</span> <span class=3D"n">j</span> <span class=3D"o">=3D</span> <span class=
=3D"mi">0</span><span class=3D"p">;</span> <span class=3D"n">j</span> <span=
 class=3D"o">&lt;</span> <span class=3D"n">HLDB_ENTRIES</span><span class=
=3D"p">;</span> <span class=3D"n">j</span><span class=3D"o">++</span><span =
class=3D"p">)</span> <span class=3D"p">{</span></ins><ins class=3D"line">  =
  <span class=3D"k">struct</span> <span class=3D"n">editorSyntax</span> <sp=
an class=3D"o">*</span><span class=3D"n">s</span> <span class=3D"o">=3D</sp=
an> <span class=3D"o">&amp;</span><span class=3D"n">HLDB</span><span class=
=3D"p">[</span><span class=3D"n">j</span><span class=3D"p">];</span></ins><=
ins class=3D"line">    <span class=3D"kt">unsigned</span> <span class=3D"kt=
">int</span> <span class=3D"n">i</span> <span class=3D"o">=3D</span> <span =
class=3D"mi">0</span><span class=3D"p">;</span></ins><ins class=3D"line">  =
  <span class=3D"k">while</span> <span class=3D"p">(</span><span class=3D"n=
">s</span><span class=3D"o">-&gt;</span><span class=3D"n">filematch</span><=
span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">])</sp=
an> <span class=3D"p">{</span></ins><ins class=3D"line">      <span class=
=3D"kt">int</span> <span class=3D"n">is_ext</span> <span class=3D"o">=3D</s=
pan> <span class=3D"p">(</span><span class=3D"n">s</span><span class=3D"o">=
-&gt;</span><span class=3D"n">filematch</span><span class=3D"p">[</span><sp=
an class=3D"n">i</span><span class=3D"p">][</span><span class=3D"mi">0</spa=
n><span class=3D"p">]</span> <span class=3D"o">=3D=3D</span> <span class=3D=
"sc">'.'</span><span class=3D"p">);</span></ins><ins class=3D"line">      <=
span class=3D"k">if</span> <span class=3D"p">((</span><span class=3D"n">is_=
ext</span> <span class=3D"o">&amp;&amp;</span> <span class=3D"n">ext</span>=
 <span class=3D"o">&amp;&amp;</span> <span class=3D"o">!</span><span class=
=3D"n">strcmp</span><span class=3D"p">(</span><span class=3D"n">ext</span><=
span class=3D"p">,</span> <span class=3D"n">s</span><span class=3D"o">-&gt;=
</span><span class=3D"n">filematch</span><span class=3D"p">[</span><span cl=
ass=3D"n">i</span><span class=3D"p">]))</span> <span class=3D"o">||</span><=
/ins><ins class=3D"line">          <span class=3D"p">(</span><span class=3D=
"o">!</span><span class=3D"n">is_ext</span> <span class=3D"o">&amp;&amp;</s=
pan> <span class=3D"n">strstr</span><span class=3D"p">(</span><span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">filename</span><=
span class=3D"p">,</span> <span class=3D"n">s</span><span class=3D"o">-&gt;=
</span><span class=3D"n">filematch</span><span class=3D"p">[</span><span cl=
ass=3D"n">i</span><span class=3D"p">])))</span> <span class=3D"p">{</span><=
/ins><ins class=3D"line">        <span class=3D"n">E</span><span class=3D"p=
">.</span><span class=3D"n">syntax</span> <span class=3D"o">=3D</span> <spa=
n class=3D"n">s</span><span class=3D"p">;</span></ins><ins class=3D"line"> =
       <span class=3D"k">return</span><span class=3D"p">;</span></ins><ins =
class=3D"line">      <span class=3D"p">}</span></ins><ins class=3D"line">  =
    <span class=3D"n">i</span><span class=3D"o">++</span><span class=3D"p">=
;</span></ins><ins class=3D"line">    <span class=3D"p">}</span></ins><ins =
class=3D"line">  <span class=3D"p">}</span></ins><ins class=3D"line"><span =
class=3D"p">}</span></ins><div class=3D"line"></div><div class=3D"line fold=
ed"><span class=3D"cm">/*** row operations ***/</span></div><div class=3D"l=
ine folded"><span class=3D"cm">/*** editor operations ***/</span></div><div=
 class=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span></div><d=
iv class=3D"line folded"><span class=3D"cm">/*** find ***/</span></div><div=
 class=3D"line folded"><span class=3D"cm">/*** append buffer ***/</span></d=
iv><div class=3D"line folded"><span class=3D"cm">/*** output ***/</span></d=
iv><div class=3D"line folded"><span class=3D"cm">/*** input ***/</span></di=
v><div class=3D"line folded"><span class=3D"cm">/*** init ***/</span></div>=
</code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p><code>strrchr()</code> and <code>strcmp()</code> come from <code>&lt;str=
ing.h&gt;</code>. <code>strrchr()</code> returns a
pointer to the last occurrence of a character in a string, and <code>strcmp=
()</code>
returns <code>0</code> if two given strings are equal.</p>

<p>First we set <code>E.syntax</code> to <code>NULL</code>, so that if noth=
ing matches or if there is no
filename, then there is no filetype.</p>

<p>Then we get a pointer to the extension part of the filename by using
<code>strrchr()</code> to find the last occurrence of the <code>.</code> ch=
aracter. If there is no
extension, then <code>ext</code> will be <code>NULL</code>.</p>

<p>Finally, we loop through each <code>editorSyntax</code> struct in the <c=
ode>HLDB</code> array, and
for each one of those, we loop through each pattern in its <code>filematch<=
/code> array.
If the pattern starts with a <code>.</code>, then it=E2=80=99s a file exten=
sion pattern, and we
use <code>strcmp()</code> to see if the filename ends with that extension. =
If it=E2=80=99s not a
file extension pattern, then we just check to see if the pattern exists
anywhere in the filename, using <code>strstr()</code>. If the filename matc=
hed according
to those rules, then we set <code>E.syntax</code> to the current <code>edit=
orSyntax</code> struct,
and <code>return</code>.</p>

<p>We want to call <code>editorSelectSyntaxHighlight()</code> wherever <cod=
e>E.filename</code> changes.
This is in <code>editorOpen()</code> and <code>editorSave()</code>.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/detect-filetype/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 163</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/detect-filetype">detect-filetype</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><sp=
an class=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><=
span class=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"l=
ine folded"><span class=3D"cm">/*** row operations ***/</span></div><div cl=
ass=3D"line folded"><span class=3D"cm">/*** editor operations ***/</span></=
div><div class=3D"line"><span class=3D"cm">/*** file i/o ***/</span></div><=
div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">char=
</span> <span class=3D"o">*</span><span class=3D"nf">editorRowsToString</sp=
an><span class=3D"p">(</span><span class=3D"kt">int</span> <span class=3D"o=
">*</span><span class=3D"n">buflen</span><span class=3D"p">)</span> <span c=
lass=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D=
"line"></div><div class=3D"line"><span class=3D"kt">void</span> <span class=
=3D"nf">editorOpen</span><span class=3D"p">(</span><span class=3D"kt">char<=
/span> <span class=3D"o">*</span><span class=3D"n">filename</span><span cla=
ss=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line">  <sp=
an class=3D"n">free</span><span class=3D"p">(</span><span class=3D"n">E</sp=
an><span class=3D"p">.</span><span class=3D"n">filename</span><span class=
=3D"p">);</span></div><div class=3D"line">  <span class=3D"n">E</span><span=
 class=3D"p">.</span><span class=3D"n">filename</span> <span class=3D"o">=
=3D</span> <span class=3D"n">strdup</span><span class=3D"p">(</span><span c=
lass=3D"n">filename</span><span class=3D"p">);</span></div><div class=3D"li=
ne"></div><ins class=3D"line">  <span class=3D"n">editorSelectSyntaxHighlig=
ht</span><span class=3D"p">();</span></ins><div class=3D"line"></div><div c=
lass=3D"line">  <span class=3D"kt">FILE</span> <span class=3D"o">*</span><s=
pan class=3D"n">fp</span> <span class=3D"o">=3D</span> <span class=3D"n">fo=
pen</span><span class=3D"p">(</span><span class=3D"n">filename</span><span =
class=3D"p">,</span> <span class=3D"s">"r"</span><span class=3D"p">);</span=
></div><div class=3D"line">  <span class=3D"k">if</span> <span class=3D"p">=
(</span><span class=3D"o">!</span><span class=3D"n">fp</span><span class=3D=
"p">)</span> <span class=3D"n">die</span><span class=3D"p">(</span><span cl=
ass=3D"s">"fopen"</span><span class=3D"p">);</span></div><div class=3D"line=
"></div><div class=3D"line">  <span class=3D"kt">char</span> <span class=3D=
"o">*</span><span class=3D"n">line</span> <span class=3D"o">=3D</span> <spa=
n class=3D"nb">NULL</span><span class=3D"p">;</span></div><div class=3D"lin=
e">  <span class=3D"kt">size_t</span> <span class=3D"n">linecap</span> <spa=
n class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</sp=
an></div><div class=3D"line">  <span class=3D"kt">ssize_t</span> <span clas=
s=3D"n">linelen</span><span class=3D"p">;</span></div><div class=3D"line"> =
 <span class=3D"k">while</span> <span class=3D"p">((</span><span class=3D"n=
">linelen</span> <span class=3D"o">=3D</span> <span class=3D"n">getline</sp=
an><span class=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D"n=
">line</span><span class=3D"p">,</span> <span class=3D"o">&amp;</span><span=
 class=3D"n">linecap</span><span class=3D"p">,</span> <span class=3D"n">fp<=
/span><span class=3D"p">))</span> <span class=3D"o">!=3D</span> <span class=
=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">)</span> <span =
class=3D"p">{</span></div><div class=3D"line">    <span class=3D"k">while</=
span> <span class=3D"p">(</span><span class=3D"n">linelen</span> <span clas=
s=3D"o">&gt;</span> <span class=3D"mi">0</span> <span class=3D"o">&amp;&amp=
;</span> <span class=3D"p">(</span><span class=3D"n">line</span><span class=
=3D"p">[</span><span class=3D"n">linelen</span> <span class=3D"o">-</span> =
<span class=3D"mi">1</span><span class=3D"p">]</span> <span class=3D"o">=3D=
=3D</span> <span class=3D"sc">'\n'</span> <span class=3D"o">||</span></div>=
<div class=3D"line">                           <span class=3D"n">line</span=
><span class=3D"p">[</span><span class=3D"n">linelen</span> <span class=3D"=
o">-</span> <span class=3D"mi">1</span><span class=3D"p">]</span> <span cla=
ss=3D"o">=3D=3D</span> <span class=3D"sc">'\r'</span><span class=3D"p">))</=
span></div><div class=3D"line">      <span class=3D"n">linelen</span><span =
class=3D"o">--</span><span class=3D"p">;</span></div><div class=3D"line">  =
  <span class=3D"n">editorInsertRow</span><span class=3D"p">(</span><span c=
lass=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">numrows</spa=
n><span class=3D"p">,</span> <span class=3D"n">line</span><span class=3D"p"=
>,</span> <span class=3D"n">linelen</span><span class=3D"p">);</span></div>=
<div class=3D"line">  <span class=3D"p">}</span></div><div class=3D"line"> =
 <span class=3D"n">free</span><span class=3D"p">(</span><span class=3D"n">l=
ine</span><span class=3D"p">);</span></div><div class=3D"line">  <span clas=
s=3D"n">fclose</span><span class=3D"p">(</span><span class=3D"n">fp</span><=
span class=3D"p">);</span></div><div class=3D"line">  <span class=3D"n">E</=
span><span class=3D"p">.</span><span class=3D"n">dirty</span> <span class=
=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span></di=
v><div class=3D"line"><span class=3D"p">}</span></div><div class=3D"line"><=
/div><div class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">=
editorSave</span><span class=3D"p">()</span> <span class=3D"p">{</span></di=
v><div class=3D"line">  <span class=3D"k">if</span> <span class=3D"p">(</sp=
an><span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">fi=
lename</span> <span class=3D"o">=3D=3D</span> <span class=3D"nb">NULL</span=
><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"l=
ine">    <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D=
"n">filename</span> <span class=3D"o">=3D</span> <span class=3D"n">editorPr=
ompt</span><span class=3D"p">(</span><span class=3D"s">"Save as: %s (ESC to=
 cancel)"</span><span class=3D"p">,</span> <span class=3D"nb">NULL</span><s=
pan class=3D"p">);</span></div><div class=3D"line">    <span class=3D"k">if=
</span> <span class=3D"p">(</span><span class=3D"n">E</span><span class=3D"=
p">.</span><span class=3D"n">filename</span> <span class=3D"o">=3D=3D</span=
> <span class=3D"nb">NULL</span><span class=3D"p">)</span> <span class=3D"p=
">{</span></div><div class=3D"line">      <span class=3D"n">editorSetStatus=
Message</span><span class=3D"p">(</span><span class=3D"s">"Save aborted"</s=
pan><span class=3D"p">);</span></div><div class=3D"line">      <span class=
=3D"k">return</span><span class=3D"p">;</span></div><div class=3D"line">   =
 <span class=3D"p">}</span></div><ins class=3D"line">    <span class=3D"n">=
editorSelectSyntaxHighlight</span><span class=3D"p">();</span></ins><div cl=
ass=3D"line">  <span class=3D"p">}</span></div><div class=3D"line"></div><d=
iv class=3D"line">  <span class=3D"kt">int</span> <span class=3D"n">len</sp=
an><span class=3D"p">;</span></div><div class=3D"line">  <span class=3D"kt"=
>char</span> <span class=3D"o">*</span><span class=3D"n">buf</span> <span c=
lass=3D"o">=3D</span> <span class=3D"n">editorRowsToString</span><span clas=
s=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D"n">len</span><=
span class=3D"p">);</span></div><div class=3D"line"></div><div class=3D"lin=
e">  <span class=3D"kt">int</span> <span class=3D"n">fd</span> <span class=
=3D"o">=3D</span> <span class=3D"n">open</span><span class=3D"p">(</span><s=
pan class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">filenam=
e</span><span class=3D"p">,</span> <span class=3D"n">O_RDWR</span> <span cl=
ass=3D"o">|</span> <span class=3D"n">O_CREAT</span><span class=3D"p">,</spa=
n> <span class=3D"mo">0644</span><span class=3D"p">);</span></div><div clas=
s=3D"line">  <span class=3D"k">if</span> <span class=3D"p">(</span><span cl=
ass=3D"n">fd</span> <span class=3D"o">!=3D</span> <span class=3D"o">-</span=
><span class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"p">{<=
/span></div><div class=3D"line">    <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"n">ftruncate</span><span class=3D"p">(</span>=
<span class=3D"n">fd</span><span class=3D"p">,</span> <span class=3D"n">len=
</span><span class=3D"p">)</span> <span class=3D"o">!=3D</span> <span class=
=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">)</span> <span =
class=3D"p">{</span></div><div class=3D"line">      <span class=3D"k">if</s=
pan> <span class=3D"p">(</span><span class=3D"n">write</span><span class=3D=
"p">(</span><span class=3D"n">fd</span><span class=3D"p">,</span> <span cla=
ss=3D"n">buf</span><span class=3D"p">,</span> <span class=3D"n">len</span><=
span class=3D"p">)</span> <span class=3D"o">=3D=3D</span> <span class=3D"n"=
>len</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div =
class=3D"line">        <span class=3D"n">close</span><span class=3D"p">(</s=
pan><span class=3D"n">fd</span><span class=3D"p">);</span></div><div class=
=3D"line">        <span class=3D"n">free</span><span class=3D"p">(</span><s=
pan class=3D"n">buf</span><span class=3D"p">);</span></div><div class=3D"li=
ne">        <span class=3D"n">E</span><span class=3D"p">.</span><span class=
=3D"n">dirty</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span=
><span class=3D"p">;</span></div><div class=3D"line">        <span class=3D=
"n">editorSetStatusMessage</span><span class=3D"p">(</span><span class=3D"s=
">"%d bytes written to disk"</span><span class=3D"p">,</span> <span class=
=3D"n">len</span><span class=3D"p">);</span></div><div class=3D"line">     =
   <span class=3D"k">return</span><span class=3D"p">;</span></div><div clas=
s=3D"line">      <span class=3D"p">}</span></div><div class=3D"line">    <s=
pan class=3D"p">}</span></div><div class=3D"line">    <span class=3D"n">clo=
se</span><span class=3D"p">(</span><span class=3D"n">fd</span><span class=
=3D"p">);</span></div><div class=3D"line">  <span class=3D"p">}</span></div=
><div class=3D"line"></div><div class=3D"line">  <span class=3D"n">free</sp=
an><span class=3D"p">(</span><span class=3D"n">buf</span><span class=3D"p">=
);</span></div><div class=3D"line">  <span class=3D"n">editorSetStatusMessa=
ge</span><span class=3D"p">(</span><span class=3D"s">"Can't save! I/O error=
: %s"</span><span class=3D"p">,</span> <span class=3D"n">strerror</span><sp=
an class=3D"p">(</span><span class=3D"n">errno</span><span class=3D"p">));<=
/span></div><div class=3D"line"><span class=3D"p">}</span></div><div class=
=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/*** find ***=
/</span></div><div class=3D"line folded"><span class=3D"cm">/*** append buf=
fer ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** out=
put ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** inp=
ut ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** init=
 ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>At this point, when you open a C file in the editor, you should see numb=
ers
getting highlighted, and you should see <code>c</code> in the status bar wh=
ere we display
the filetype. When you start up the editor with no arguments and save the f=
ile
with a filename that ends in <code>.c</code>, you should see the filetype i=
n the status
bar change satisfyingly from <code>no ft</code> to <code>c</code>. However,=
 any numbers you might
have in the file will not be highlighted! Very unsatisfying!</p>

<p>Let=E2=80=99s rehighlight the entire file after setting <code>E.syntax</=
code> in
<code>editorSelectSyntaxHighlight()</code>.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/rehighlight/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 164</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/rehighlight">rehighlight</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><sp=
an class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line"></=
div><div class=3D"line folded"><span class=3D"kt">int</span> <span class=3D=
"nf">is_separator</span><span class=3D"p">(</span><span class=3D"kt">int</s=
pan> <span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p"=
>{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line folded"><span class=3D"kt">void</span> <span class=3D=
"nf">editorUpdateSyntax</span><span class=3D"p">(</span><span class=3D"n">e=
row</span> <span class=3D"o">*</span><span class=3D"n">row</span><span clas=
s=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</=
span></div><div class=3D"line"></div><div class=3D"line folded"><span class=
=3D"kt">int</span> <span class=3D"nf">editorSyntaxToColor</span><span class=
=3D"p">(</span><span class=3D"kt">int</span> <span class=3D"n">hl</span><sp=
an class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D=
"p">}</span></div><div class=3D"line"></div><div class=3D"line"><span class=
=3D"kt">void</span> <span class=3D"nf">editorSelectSyntaxHighlight</span><s=
pan class=3D"p">()</span> <span class=3D"p">{</span></div><div class=3D"lin=
e">  <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">=
syntax</span> <span class=3D"o">=3D</span> <span class=3D"nb">NULL</span><s=
pan class=3D"p">;</span></div><div class=3D"line">  <span class=3D"k">if</s=
pan> <span class=3D"p">(</span><span class=3D"n">E</span><span class=3D"p">=
.</span><span class=3D"n">filename</span> <span class=3D"o">=3D=3D</span> <=
span class=3D"nb">NULL</span><span class=3D"p">)</span> <span class=3D"k">r=
eturn</span><span class=3D"p">;</span></div><div class=3D"line"></div><div =
class=3D"line">  <span class=3D"kt">char</span> <span class=3D"o">*</span><=
span class=3D"n">ext</span> <span class=3D"o">=3D</span> <span class=3D"n">=
strrchr</span><span class=3D"p">(</span><span class=3D"n">E</span><span cla=
ss=3D"p">.</span><span class=3D"n">filename</span><span class=3D"p">,</span=
> <span class=3D"sc">'.'</span><span class=3D"p">);</span></div><div class=
=3D"line"></div><div class=3D"line">  <span class=3D"k">for</span> <span cl=
ass=3D"p">(</span><span class=3D"kt">unsigned</span> <span class=3D"kt">int=
</span> <span class=3D"n">j</span> <span class=3D"o">=3D</span> <span class=
=3D"mi">0</span><span class=3D"p">;</span> <span class=3D"n">j</span> <span=
 class=3D"o">&lt;</span> <span class=3D"n">HLDB_ENTRIES</span><span class=
=3D"p">;</span> <span class=3D"n">j</span><span class=3D"o">++</span><span =
class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line">  =
  <span class=3D"k">struct</span> <span class=3D"n">editorSyntax</span> <sp=
an class=3D"o">*</span><span class=3D"n">s</span> <span class=3D"o">=3D</sp=
an> <span class=3D"o">&amp;</span><span class=3D"n">HLDB</span><span class=
=3D"p">[</span><span class=3D"n">j</span><span class=3D"p">];</span></div><=
div class=3D"line">    <span class=3D"kt">unsigned</span> <span class=3D"kt=
">int</span> <span class=3D"n">i</span> <span class=3D"o">=3D</span> <span =
class=3D"mi">0</span><span class=3D"p">;</span></div><div class=3D"line">  =
  <span class=3D"k">while</span> <span class=3D"p">(</span><span class=3D"n=
">s</span><span class=3D"o">-&gt;</span><span class=3D"n">filematch</span><=
span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">])</sp=
an> <span class=3D"p">{</span></div><div class=3D"line">      <span class=
=3D"kt">int</span> <span class=3D"n">is_ext</span> <span class=3D"o">=3D</s=
pan> <span class=3D"p">(</span><span class=3D"n">s</span><span class=3D"o">=
-&gt;</span><span class=3D"n">filematch</span><span class=3D"p">[</span><sp=
an class=3D"n">i</span><span class=3D"p">][</span><span class=3D"mi">0</spa=
n><span class=3D"p">]</span> <span class=3D"o">=3D=3D</span> <span class=3D=
"sc">'.'</span><span class=3D"p">);</span></div><div class=3D"line">      <=
span class=3D"k">if</span> <span class=3D"p">((</span><span class=3D"n">is_=
ext</span> <span class=3D"o">&amp;&amp;</span> <span class=3D"n">ext</span>=
 <span class=3D"o">&amp;&amp;</span> <span class=3D"o">!</span><span class=
=3D"n">strcmp</span><span class=3D"p">(</span><span class=3D"n">ext</span><=
span class=3D"p">,</span> <span class=3D"n">s</span><span class=3D"o">-&gt;=
</span><span class=3D"n">filematch</span><span class=3D"p">[</span><span cl=
ass=3D"n">i</span><span class=3D"p">]))</span> <span class=3D"o">||</span><=
/div><div class=3D"line">          <span class=3D"p">(</span><span class=3D=
"o">!</span><span class=3D"n">is_ext</span> <span class=3D"o">&amp;&amp;</s=
pan> <span class=3D"n">strstr</span><span class=3D"p">(</span><span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">filename</span><=
span class=3D"p">,</span> <span class=3D"n">s</span><span class=3D"o">-&gt;=
</span><span class=3D"n">filematch</span><span class=3D"p">[</span><span cl=
ass=3D"n">i</span><span class=3D"p">])))</span> <span class=3D"p">{</span><=
/div><div class=3D"line">        <span class=3D"n">E</span><span class=3D"p=
">.</span><span class=3D"n">syntax</span> <span class=3D"o">=3D</span> <spa=
n class=3D"n">s</span><span class=3D"p">;</span></div><div class=3D"line"><=
/div><ins class=3D"line">        <span class=3D"kt">int</span> <span class=
=3D"n">filerow</span><span class=3D"p">;</span></ins><ins class=3D"line">  =
      <span class=3D"k">for</span> <span class=3D"p">(</span><span class=3D=
"n">filerow</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span>=
<span class=3D"p">;</span> <span class=3D"n">filerow</span> <span class=3D"=
o">&lt;</span> <span class=3D"n">E</span><span class=3D"p">.</span><span cl=
ass=3D"n">numrows</span><span class=3D"p">;</span> <span class=3D"n">filero=
w</span><span class=3D"o">++</span><span class=3D"p">)</span> <span class=
=3D"p">{</span></ins><ins class=3D"line">          <span class=3D"n">editor=
UpdateSyntax</span><span class=3D"p">(</span><span class=3D"o">&amp;</span>=
<span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">row</=
span><span class=3D"p">[</span><span class=3D"n">filerow</span><span class=
=3D"p">]);</span></ins><ins class=3D"line">        <span class=3D"p">}</spa=
n></ins><div class=3D"line"></div><div class=3D"line">        <span class=
=3D"k">return</span><span class=3D"p">;</span></div><div class=3D"line">   =
   <span class=3D"p">}</span></div><div class=3D"line">      <span class=3D=
"n">i</span><span class=3D"o">++</span><span class=3D"p">;</span></div><div=
 class=3D"line">    <span class=3D"p">}</span></div><div class=3D"line">  <=
span class=3D"p">}</span></div><div class=3D"line"><span class=3D"p">}</spa=
n></div><div class=3D"line"></div><div class=3D"line folded"><span class=3D=
"cm">/*** row operations ***/</span></div><div class=3D"line folded"><span =
class=3D"cm">/*** editor operations ***/</span></div><div class=3D"line fol=
ded"><span class=3D"cm">/*** file i/o ***/</span></div><div class=3D"line f=
olded"><span class=3D"cm">/*** find ***/</span></div><div class=3D"line fol=
ded"><span class=3D"cm">/*** append buffer ***/</span></div><div class=3D"l=
ine folded"><span class=3D"cm">/*** output ***/</span></div><div class=3D"l=
ine folded"><span class=3D"cm">/*** input ***/</span></div><div class=3D"li=
ne folded"><span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>We simply loop through each row in the file, and call <code>editorUpdate=
Syntax()</code> on
it. Now the highlighting immediately changes when the filetype changes.</p>
<h2 id=3D"colorful-strings"><a href=3D"https://viewsourcecode.org/snaptoken=
/kilo/07.syntaxHighlighting.html#colorful-strings">Colorful strings</a></h2=
>

<p>With all that out of the way, we can finally get to highlighting more th=
ings!
Let=E2=80=99s start with strings.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/hl-string/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 165</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/hl-string">hl-string</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line"><span class=3D"c=
m">/*** defines ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne"><span class=3D"cp">#define KILO_VERSION "0.0.1"</span></div><div class=
=3D"line"><span class=3D"cp">#define KILO_TAB_STOP 8</span></div><div class=
=3D"line"><span class=3D"cp">#define KILO_QUIT_TIMES 3</span></div><div cla=
ss=3D"line"></div><div class=3D"line"><span class=3D"cp">#define CTRL_KEY(k=
) ((k) &amp; 0x1f)</span></div><div class=3D"line"></div><div class=3D"line=
 folded"><span class=3D"k">enum</span> <span class=3D"n">editorKey</span> <=
span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">};</span></div><div c=
lass=3D"line"></div><div class=3D"line"><span class=3D"k">enum</span> <span=
 class=3D"n">editorHighlight</span> <span class=3D"p">{</span></div><div cl=
ass=3D"line">  <span class=3D"n">HL_NORMAL</span> <span class=3D"o">=3D</sp=
an> <span class=3D"mi">0</span><span class=3D"p">,</span></div><ins class=
=3D"line">  <span class=3D"n">HL_STRING</span><span class=3D"p">,</span></i=
ns><div class=3D"line">  <span class=3D"n">HL_NUMBER</span><span class=3D"p=
">,</span></div><div class=3D"line">  <span class=3D"n">HL_MATCH</span></di=
v><div class=3D"line"><span class=3D"p">};</span></div><div class=3D"line">=
</div><div class=3D"line"><span class=3D"cp">#define HL_HIGHLIGHT_NUMBERS (=
1&lt;&lt;0)</span></div><div class=3D"line"></div><div class=3D"line folded=
"><span class=3D"cm">/*** data ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folde=
d"><span class=3D"cm">/*** prototypes ***/</span></div><div class=3D"line f=
olded"><span class=3D"cm">/*** terminal ***/</span></div><div class=3D"line=
"><span class=3D"cm">/*** syntax highlighting ***/</span></div><div class=
=3D"line"></div><div class=3D"line folded"><span class=3D"kt">int</span> <s=
pan class=3D"nf">is_separator</span><span class=3D"p">(</span><span class=
=3D"kt">int</span> <span class=3D"n">c</span><span class=3D"p">)</span> <sp=
an class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div clas=
s=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void</span> =
<span class=3D"nf">editorUpdateSyntax</span><span class=3D"p">(</span><span=
 class=3D"n">erow</span> <span class=3D"o">*</span><span class=3D"n">row</s=
pan><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span c=
lass=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line"><spa=
n class=3D"kt">int</span> <span class=3D"nf">editorSyntaxToColor</span><spa=
n class=3D"p">(</span><span class=3D"kt">int</span> <span class=3D"n">hl</s=
pan><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=
=3D"line">  <span class=3D"k">switch</span> <span class=3D"p">(</span><span=
 class=3D"n">hl</span><span class=3D"p">)</span> <span class=3D"p">{</span>=
</div><ins class=3D"line">    <span class=3D"k">case</span> <span class=3D"=
n">HL_STRING</span><span class=3D"p">:</span> <span class=3D"k">return</spa=
n> <span class=3D"mi">35</span><span class=3D"p">;</span></ins><div class=
=3D"line">    <span class=3D"k">case</span> <span class=3D"n">HL_NUMBER</sp=
an><span class=3D"p">:</span> <span class=3D"k">return</span> <span class=
=3D"mi">31</span><span class=3D"p">;</span></div><div class=3D"line">    <s=
pan class=3D"k">case</span> <span class=3D"n">HL_MATCH</span><span class=3D=
"p">:</span> <span class=3D"k">return</span> <span class=3D"mi">34</span><s=
pan class=3D"p">;</span></div><div class=3D"line">    <span class=3D"nl">de=
fault:</span> <span class=3D"k">return</span> <span class=3D"mi">37</span><=
span class=3D"p">;</span></div><div class=3D"line">  <span class=3D"p">}</s=
pan></div><div class=3D"line"><span class=3D"p">}</span></div><div class=3D=
"line"></div><div class=3D"line folded"><span class=3D"kt">void</span> <spa=
n class=3D"nf">editorSelectSyntaxHighlight</span><span class=3D"p">()</span=
> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div=
 class=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/*** ro=
w operations ***/</span></div><div class=3D"line folded"><span class=3D"cm"=
>/*** editor operations ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** file i/o ***/</span></div><div class=3D"line folded"><span=
 class=3D"cm">/*** find ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** append buffer ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** output ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** input ***/</span></div><div class=3D"line folded"><=
span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>We=E2=80=99re coloring strings magenta (<code>35</code>).</p>

<p>Now let=E2=80=99s add an <code>HL_HIGHLIGHT_STRINGS</code> bit flag to t=
he <code>flags</code> field of the
<code>editorSyntax</code> struct, and turn on the flag when highlighting C =
files.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/string-flag/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 166</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/string-flag">string-flag</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line"><span class=3D"c=
m">/*** defines ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne"><span class=3D"cp">#define KILO_VERSION "0.0.1"</span></div><div class=
=3D"line"><span class=3D"cp">#define KILO_TAB_STOP 8</span></div><div class=
=3D"line"><span class=3D"cp">#define KILO_QUIT_TIMES 3</span></div><div cla=
ss=3D"line"></div><div class=3D"line"><span class=3D"cp">#define CTRL_KEY(k=
) ((k) &amp; 0x1f)</span></div><div class=3D"line"></div><div class=3D"line=
 folded"><span class=3D"k">enum</span> <span class=3D"n">editorKey</span> <=
span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">};</span></div><div c=
lass=3D"line"></div><div class=3D"line folded"><span class=3D"k">enum</span=
> <span class=3D"n">editorHighlight</span> <span class=3D"p">{</span> =E2=
=80=A6 <span class=3D"p">};</span></div><div class=3D"line"></div><div clas=
s=3D"line"><span class=3D"cp">#define HL_HIGHLIGHT_NUMBERS (1&lt;&lt;0)</sp=
an></div><ins class=3D"line"><span class=3D"cp">#define HL_HIGHLIGHT_STRING=
S (1&lt;&lt;1)</span></ins><div class=3D"line"></div><div class=3D"line fol=
ded"><span class=3D"cm">/*** data ***/</span></div><div class=3D"line"><spa=
n class=3D"cm">/*** filetypes ***/</span></div><div class=3D"line"></div><d=
iv class=3D"line"><span class=3D"kt">char</span> <span class=3D"o">*</span>=
<span class=3D"n">C_HL_extensions</span><span class=3D"p">[]</span> <span c=
lass=3D"o">=3D</span> <span class=3D"p">{</span> <span class=3D"s">".c"</sp=
an><span class=3D"p">,</span> <span class=3D"s">".h"</span><span class=3D"p=
">,</span> <span class=3D"s">".cpp"</span><span class=3D"p">,</span> <span =
class=3D"nb">NULL</span> <span class=3D"p">};</span></div><div class=3D"lin=
e"></div><div class=3D"line"><span class=3D"k">struct</span> <span class=3D=
"n">editorSyntax</span> <span class=3D"n">HLDB</span><span class=3D"p">[]</=
span> <span class=3D"o">=3D</span> <span class=3D"p">{</span></div><div cla=
ss=3D"line">  <span class=3D"p">{</span></div><div class=3D"line">    <span=
 class=3D"s">"c"</span><span class=3D"p">,</span></div><div class=3D"line">=
    <span class=3D"n">C_HL_extensions</span><span class=3D"p">,</span></div=
><ins class=3D"line">    <span class=3D"n">HL_HIGHLIGHT_NUMBERS</span> <spa=
n class=3D"o">|</span> <span class=3D"n">HL_HIGHLIGHT_STRINGS</span></ins><=
div class=3D"line">  <span class=3D"p">},</span></div><div class=3D"line"><=
span class=3D"p">};</span></div><div class=3D"line"></div><div class=3D"lin=
e"><span class=3D"cp">#define HLDB_ENTRIES (sizeof(HLDB) / sizeof(HLDB[0]))=
</span></div><div class=3D"line"></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><span=
 class=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><sp=
an class=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"lin=
e folded"><span class=3D"cm">/*** row operations ***/</span></div><div clas=
s=3D"line folded"><span class=3D"cm">/*** editor operations ***/</span></di=
v><div class=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span></=
div><div class=3D"line folded"><span class=3D"cm">/*** find ***/</span></di=
v><div class=3D"line folded"><span class=3D"cm">/*** append buffer ***/</sp=
an></div><div class=3D"line folded"><span class=3D"cm">/*** output ***/</sp=
an></div><div class=3D"line folded"><span class=3D"cm">/*** input ***/</spa=
n></div><div class=3D"line folded"><span class=3D"cm">/*** init ***/</span>=
</div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>Now for the actual highlighting code. We will use an <code>in_string</co=
de> variable to
keep track of whether we are currently inside a string. If we are, then we=
=E2=80=99ll
keep highlighting the current character as a string until we hit the closin=
g
quote.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/syntax-strings/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 167</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/syntax-strings">syntax-strings</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><sp=
an class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line"></=
div><div class=3D"line folded"><span class=3D"kt">int</span> <span class=3D=
"nf">is_separator</span><span class=3D"p">(</span><span class=3D"kt">int</s=
pan> <span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p"=
>{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">ed=
itorUpdateSyntax</span><span class=3D"p">(</span><span class=3D"n">erow</sp=
an> <span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p"=
>)</span> <span class=3D"p">{</span></div><div class=3D"line">  <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span> =
<span class=3D"o">=3D</span> <span class=3D"n">realloc</span><span class=3D=
"p">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span=
 class=3D"n">hl</span><span class=3D"p">,</span> <span class=3D"n">row</spa=
n><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line">  <span class=3D"n">memset</span>=
<span class=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&g=
t;</span><span class=3D"n">hl</span><span class=3D"p">,</span> <span class=
=3D"n">HL_NORMAL</span><span class=3D"p">,</span> <span class=3D"n">row</sp=
an><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line"></div><div class=3D"line">  <span=
 class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">E</span>=
<span class=3D"p">.</span><span class=3D"n">syntax</span> <span class=3D"o"=
>=3D=3D</span> <span class=3D"nb">NULL</span><span class=3D"p">)</span> <sp=
an class=3D"k">return</span><span class=3D"p">;</span></div><div class=3D"l=
ine"></div><div class=3D"line">  <span class=3D"kt">int</span> <span class=
=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <span class=3D"mi">1</s=
pan><span class=3D"p">;</span></div><ins class=3D"line">  <span class=3D"kt=
">int</span> <span class=3D"n">in_string</span> <span class=3D"o">=3D</span=
> <span class=3D"mi">0</span><span class=3D"p">;</span></ins><div class=3D"=
line"></div><div class=3D"line">  <span class=3D"kt">int</span> <span class=
=3D"n">i</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><sp=
an class=3D"p">;</span></div><div class=3D"line">  <span class=3D"k">while<=
/span> <span class=3D"p">(</span><span class=3D"n">i</span> <span class=3D"=
o">&lt;</span> <span class=3D"n">row</span><span class=3D"o">-&gt;</span><s=
pan class=3D"n">rsize</span><span class=3D"p">)</span> <span class=3D"p">{<=
/span></div><div class=3D"line">    <span class=3D"kt">char</span> <span cl=
ass=3D"n">c</span> <span class=3D"o">=3D</span> <span class=3D"n">row</span=
><span class=3D"o">-&gt;</span><span class=3D"n">render</span><span class=
=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">];</span></div><=
div class=3D"line">    <span class=3D"kt">unsigned</span> <span class=3D"kt=
">char</span> <span class=3D"n">prev_hl</span> <span class=3D"o">=3D</span>=
 <span class=3D"p">(</span><span class=3D"n">i</span> <span class=3D"o">&gt=
;</span> <span class=3D"mi">0</span><span class=3D"p">)</span> <span class=
=3D"o">?</span> <span class=3D"n">row</span><span class=3D"o">-&gt;</span><=
span class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</sp=
an> <span class=3D"o">-</span> <span class=3D"mi">1</span><span class=3D"p"=
>]</span> <span class=3D"o">:</span> <span class=3D"n">HL_NORMAL</span><spa=
n class=3D"p">;</span></div><div class=3D"line"></div><ins class=3D"line"> =
   <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">=
E</span><span class=3D"p">.</span><span class=3D"n">syntax</span><span clas=
s=3D"o">-&gt;</span><span class=3D"n">flags</span> <span class=3D"o">&amp;<=
/span> <span class=3D"n">HL_HIGHLIGHT_STRINGS</span><span class=3D"p">)</sp=
an> <span class=3D"p">{</span></ins><ins class=3D"line">      <span class=
=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">in_string</spa=
n><span class=3D"p">)</span> <span class=3D"p">{</span></ins><ins class=3D"=
line">        <span class=3D"n">row</span><span class=3D"o">-&gt;</span><sp=
an class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</span=
><span class=3D"p">]</span> <span class=3D"o">=3D</span> <span class=3D"n">=
HL_STRING</span><span class=3D"p">;</span></ins><ins class=3D"line">       =
 <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">c<=
/span> <span class=3D"o">=3D=3D</span> <span class=3D"n">in_string</span><s=
pan class=3D"p">)</span> <span class=3D"n">in_string</span> <span class=3D"=
o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span></ins><i=
ns class=3D"line">        <span class=3D"n">i</span><span class=3D"o">++</s=
pan><span class=3D"p">;</span></ins><ins class=3D"line">        <span class=
=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <span class=3D"mi">1</s=
pan><span class=3D"p">;</span></ins><ins class=3D"line">        <span class=
=3D"k">continue</span><span class=3D"p">;</span></ins><ins class=3D"line"> =
     <span class=3D"p">}</span> <span class=3D"k">else</span> <span class=
=3D"p">{</span></ins><ins class=3D"line">        <span class=3D"k">if</span=
> <span class=3D"p">(</span><span class=3D"n">c</span> <span class=3D"o">=
=3D=3D</span> <span class=3D"sc">'"'</span> <span class=3D"o">||</span> <sp=
an class=3D"n">c</span> <span class=3D"o">=3D=3D</span> <span class=3D"sc">=
'\''</span><span class=3D"p">)</span> <span class=3D"p">{</span></ins><ins =
class=3D"line">          <span class=3D"n">in_string</span> <span class=3D"=
o">=3D</span> <span class=3D"n">c</span><span class=3D"p">;</span></ins><in=
s class=3D"line">          <span class=3D"n">row</span><span class=3D"o">-&=
gt;</span><span class=3D"n">hl</span><span class=3D"p">[</span><span class=
=3D"n">i</span><span class=3D"p">]</span> <span class=3D"o">=3D</span> <spa=
n class=3D"n">HL_STRING</span><span class=3D"p">;</span></ins><ins class=3D=
"line">          <span class=3D"n">i</span><span class=3D"o">++</span><span=
 class=3D"p">;</span></ins><ins class=3D"line">          <span class=3D"k">=
continue</span><span class=3D"p">;</span></ins><ins class=3D"line">        =
<span class=3D"p">}</span></ins><ins class=3D"line">      <span class=3D"p"=
>}</span></ins><ins class=3D"line">    <span class=3D"p">}</span></ins><div=
 class=3D"line"></div><div class=3D"line">    <span class=3D"k">if</span> <=
span class=3D"p">(</span><span class=3D"n">E</span><span class=3D"p">.</spa=
n><span class=3D"n">syntax</span><span class=3D"o">-&gt;</span><span class=
=3D"n">flags</span> <span class=3D"o">&amp;</span> <span class=3D"n">HL_HIG=
HLIGHT_NUMBERS</span><span class=3D"p">)</span> <span class=3D"p">{</span><=
/div><div class=3D"line">      <span class=3D"k">if</span> <span class=3D"p=
">((</span><span class=3D"n">isdigit</span><span class=3D"p">(</span><span =
class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"o">&amp;&amp;=
</span> <span class=3D"p">(</span><span class=3D"n">prev_sep</span> <span c=
lass=3D"o">||</span> <span class=3D"n">prev_hl</span> <span class=3D"o">=3D=
=3D</span> <span class=3D"n">HL_NUMBER</span><span class=3D"p">))</span> <s=
pan class=3D"o">||</span></div><div class=3D"line">          <span class=3D=
"p">(</span><span class=3D"n">c</span> <span class=3D"o">=3D=3D</span> <spa=
n class=3D"sc">'.'</span> <span class=3D"o">&amp;&amp;</span> <span class=
=3D"n">prev_hl</span> <span class=3D"o">=3D=3D</span> <span class=3D"n">HL_=
NUMBER</span><span class=3D"p">))</span> <span class=3D"p">{</span></div><d=
iv class=3D"line">        <span class=3D"n">row</span><span class=3D"o">-&g=
t;</span><span class=3D"n">hl</span><span class=3D"p">[</span><span class=
=3D"n">i</span><span class=3D"p">]</span> <span class=3D"o">=3D</span> <spa=
n class=3D"n">HL_NUMBER</span><span class=3D"p">;</span></div><div class=3D=
"line">        <span class=3D"n">i</span><span class=3D"o">++</span><span c=
lass=3D"p">;</span></div><div class=3D"line">        <span class=3D"n">prev=
_sep</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span c=
lass=3D"p">;</span></div><div class=3D"line">        <span class=3D"k">cont=
inue</span><span class=3D"p">;</span></div><div class=3D"line">      <span =
class=3D"p">}</span></div><div class=3D"line">    <span class=3D"p">}</span=
></div><div class=3D"line"></div><div class=3D"line">    <span class=3D"n">=
prev_sep</span> <span class=3D"o">=3D</span> <span class=3D"n">is_separator=
</span><span class=3D"p">(</span><span class=3D"n">c</span><span class=3D"p=
">);</span></div><div class=3D"line">    <span class=3D"n">i</span><span cl=
ass=3D"o">++</span><span class=3D"p">;</span></div><div class=3D"line">  <s=
pan class=3D"p">}</span></div><div class=3D"line"><span class=3D"p">}</span=
></div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"=
kt">int</span> <span class=3D"nf">editorSyntaxToColor</span><span class=3D"=
p">(</span><span class=3D"kt">int</span> <span class=3D"n">hl</span><span c=
lass=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">=
}</span></div><div class=3D"line"></div><div class=3D"line folded"><span cl=
ass=3D"kt">void</span> <span class=3D"nf">editorSelectSyntaxHighlight</span=
><span class=3D"p">()</span> <span class=3D"p">{</span> =E2=80=A6 <span cla=
ss=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line folded"=
><span class=3D"cm">/*** row operations ***/</span></div><div class=3D"line=
 folded"><span class=3D"cm">/*** editor operations ***/</span></div><div cl=
ass=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span></div><div =
class=3D"line folded"><span class=3D"cm">/*** find ***/</span></div><div cl=
ass=3D"line folded"><span class=3D"cm">/*** append buffer ***/</span></div>=
<div class=3D"line folded"><span class=3D"cm">/*** output ***/</span></div>=
<div class=3D"line folded"><span class=3D"cm">/*** input ***/</span></div><=
div class=3D"line folded"><span class=3D"cm">/*** init ***/</span></div></c=
ode></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>As you can see, we highlight both double-quoted strings and single-quote=
d
strings (sorry Lispers/Rustaceans). We actually store either a double-quote
(<code>"</code>) or a single-quote (<code>'</code>) character as the value =
of <code>in_string</code>, so that we
know which one closes the string.</p>

<p>So, going through the code from top to bottom: If <code>in_string</code>=
 is set, then we
know the current character can be highlighted with <code>HL_STRING</code>. =
Then we check
if the current character is the closing quote (<code>c =3D=3D in_string</co=
de>), and if so, we
reset <code>in_string</code> to <code>0</code>. Then, since we highlighted =
the current character, we
have to consume it by incrementing <code>i</code> and <code>continue</code>=
ing out of the current
loop iteration. We also set <code>prev_sep</code> to <code>1</code> so that=
 if we=E2=80=99re done
highlighting the string, the closing quote is considered a separator.</p>

<p>If we=E2=80=99re not currently in a string, then we have to check if we=
=E2=80=99re at the
beginning of one by checking for a double- or single-quote. If we are, we s=
tore
the quote in <code>in_string</code>, highlight it with <code>HL_STRING</cod=
e>, and consume it.</p>

<p>We should probably take escaped quotes into account when highlighting st=
rings.
If the sequence <code>\'</code> or <code>\"</code> occurs in a string, then=
 the escaped quote doesn=E2=80=99t
close the string in the vast majority of languages.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/string-escapes/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 168</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/string-escapes">string-escapes</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><sp=
an class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line"></=
div><div class=3D"line folded"><span class=3D"kt">int</span> <span class=3D=
"nf">is_separator</span><span class=3D"p">(</span><span class=3D"kt">int</s=
pan> <span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p"=
>{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">ed=
itorUpdateSyntax</span><span class=3D"p">(</span><span class=3D"n">erow</sp=
an> <span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p"=
>)</span> <span class=3D"p">{</span></div><div class=3D"line">  <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span> =
<span class=3D"o">=3D</span> <span class=3D"n">realloc</span><span class=3D=
"p">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span=
 class=3D"n">hl</span><span class=3D"p">,</span> <span class=3D"n">row</spa=
n><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line">  <span class=3D"n">memset</span>=
<span class=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&g=
t;</span><span class=3D"n">hl</span><span class=3D"p">,</span> <span class=
=3D"n">HL_NORMAL</span><span class=3D"p">,</span> <span class=3D"n">row</sp=
an><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line"></div><div class=3D"line">  <span=
 class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">E</span>=
<span class=3D"p">.</span><span class=3D"n">syntax</span> <span class=3D"o"=
>=3D=3D</span> <span class=3D"nb">NULL</span><span class=3D"p">)</span> <sp=
an class=3D"k">return</span><span class=3D"p">;</span></div><div class=3D"l=
ine"></div><div class=3D"line">  <span class=3D"kt">int</span> <span class=
=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <span class=3D"mi">1</s=
pan><span class=3D"p">;</span></div><div class=3D"line">  <span class=3D"kt=
">int</span> <span class=3D"n">in_string</span> <span class=3D"o">=3D</span=
> <span class=3D"mi">0</span><span class=3D"p">;</span></div><div class=3D"=
line"></div><div class=3D"line">  <span class=3D"kt">int</span> <span class=
=3D"n">i</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><sp=
an class=3D"p">;</span></div><div class=3D"line">  <span class=3D"k">while<=
/span> <span class=3D"p">(</span><span class=3D"n">i</span> <span class=3D"=
o">&lt;</span> <span class=3D"n">row</span><span class=3D"o">-&gt;</span><s=
pan class=3D"n">rsize</span><span class=3D"p">)</span> <span class=3D"p">{<=
/span></div><div class=3D"line">    <span class=3D"kt">char</span> <span cl=
ass=3D"n">c</span> <span class=3D"o">=3D</span> <span class=3D"n">row</span=
><span class=3D"o">-&gt;</span><span class=3D"n">render</span><span class=
=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">];</span></div><=
div class=3D"line">    <span class=3D"kt">unsigned</span> <span class=3D"kt=
">char</span> <span class=3D"n">prev_hl</span> <span class=3D"o">=3D</span>=
 <span class=3D"p">(</span><span class=3D"n">i</span> <span class=3D"o">&gt=
;</span> <span class=3D"mi">0</span><span class=3D"p">)</span> <span class=
=3D"o">?</span> <span class=3D"n">row</span><span class=3D"o">-&gt;</span><=
span class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</sp=
an> <span class=3D"o">-</span> <span class=3D"mi">1</span><span class=3D"p"=
>]</span> <span class=3D"o">:</span> <span class=3D"n">HL_NORMAL</span><spa=
n class=3D"p">;</span></div><div class=3D"line"></div><div class=3D"line"> =
   <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">=
E</span><span class=3D"p">.</span><span class=3D"n">syntax</span><span clas=
s=3D"o">-&gt;</span><span class=3D"n">flags</span> <span class=3D"o">&amp;<=
/span> <span class=3D"n">HL_HIGHLIGHT_STRINGS</span><span class=3D"p">)</sp=
an> <span class=3D"p">{</span></div><div class=3D"line">      <span class=
=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">in_string</spa=
n><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"=
line">        <span class=3D"n">row</span><span class=3D"o">-&gt;</span><sp=
an class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</span=
><span class=3D"p">]</span> <span class=3D"o">=3D</span> <span class=3D"n">=
HL_STRING</span><span class=3D"p">;</span></div><ins class=3D"line">       =
 <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">c<=
/span> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'\\'</span> <span=
 class=3D"o">&amp;&amp;</span> <span class=3D"n">i</span> <span class=3D"o"=
>+</span> <span class=3D"mi">1</span> <span class=3D"o">&lt;</span> <span c=
lass=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">rsize<=
/span><span class=3D"p">)</span> <span class=3D"p">{</span></ins><ins class=
=3D"line">          <span class=3D"n">row</span><span class=3D"o">-&gt;</sp=
an><span class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i=
</span> <span class=3D"o">+</span> <span class=3D"mi">1</span><span class=
=3D"p">]</span> <span class=3D"o">=3D</span> <span class=3D"n">HL_STRING</s=
pan><span class=3D"p">;</span></ins><ins class=3D"line">          <span cla=
ss=3D"n">i</span> <span class=3D"o">+=3D</span> <span class=3D"mi">2</span>=
<span class=3D"p">;</span></ins><ins class=3D"line">          <span class=
=3D"k">continue</span><span class=3D"p">;</span></ins><ins class=3D"line"> =
       <span class=3D"p">}</span></ins><div class=3D"line">        <span cl=
ass=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">c</span> <s=
pan class=3D"o">=3D=3D</span> <span class=3D"n">in_string</span><span class=
=3D"p">)</span> <span class=3D"n">in_string</span> <span class=3D"o">=3D</s=
pan> <span class=3D"mi">0</span><span class=3D"p">;</span></div><div class=
=3D"line">        <span class=3D"n">i</span><span class=3D"o">++</span><spa=
n class=3D"p">;</span></div><div class=3D"line">        <span class=3D"n">p=
rev_sep</span> <span class=3D"o">=3D</span> <span class=3D"mi">1</span><spa=
n class=3D"p">;</span></div><div class=3D"line">        <span class=3D"k">c=
ontinue</span><span class=3D"p">;</span></div><div class=3D"line">      <sp=
an class=3D"p">}</span> <span class=3D"k">else</span> <span class=3D"p">{</=
span></div><div class=3D"line">        <span class=3D"k">if</span> <span cl=
ass=3D"p">(</span><span class=3D"n">c</span> <span class=3D"o">=3D=3D</span=
> <span class=3D"sc">'"'</span> <span class=3D"o">||</span> <span class=3D"=
n">c</span> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'\''</span><=
span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"lin=
e">          <span class=3D"n">in_string</span> <span class=3D"o">=3D</span=
> <span class=3D"n">c</span><span class=3D"p">;</span></div><div class=3D"l=
ine">          <span class=3D"n">row</span><span class=3D"o">-&gt;</span><s=
pan class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</spa=
n><span class=3D"p">]</span> <span class=3D"o">=3D</span> <span class=3D"n"=
>HL_STRING</span><span class=3D"p">;</span></div><div class=3D"line">      =
    <span class=3D"n">i</span><span class=3D"o">++</span><span class=3D"p">=
;</span></div><div class=3D"line">          <span class=3D"k">continue</spa=
n><span class=3D"p">;</span></div><div class=3D"line">        <span class=
=3D"p">}</span></div><div class=3D"line">      <span class=3D"p">}</span></=
div><div class=3D"line">    <span class=3D"p">}</span></div><div class=3D"l=
ine"></div><div class=3D"line">    <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"n">E</span><span class=3D"p">.</span><span cl=
ass=3D"n">syntax</span><span class=3D"o">-&gt;</span><span class=3D"n">flag=
s</span> <span class=3D"o">&amp;</span> <span class=3D"n">HL_HIGHLIGHT_NUMB=
ERS</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div c=
lass=3D"line">      <span class=3D"k">if</span> <span class=3D"p">((</span>=
<span class=3D"n">isdigit</span><span class=3D"p">(</span><span class=3D"n"=
>c</span><span class=3D"p">)</span> <span class=3D"o">&amp;&amp;</span> <sp=
an class=3D"p">(</span><span class=3D"n">prev_sep</span> <span class=3D"o">=
||</span> <span class=3D"n">prev_hl</span> <span class=3D"o">=3D=3D</span> =
<span class=3D"n">HL_NUMBER</span><span class=3D"p">))</span> <span class=
=3D"o">||</span></div><div class=3D"line">          <span class=3D"p">(</sp=
an><span class=3D"n">c</span> <span class=3D"o">=3D=3D</span> <span class=
=3D"sc">'.'</span> <span class=3D"o">&amp;&amp;</span> <span class=3D"n">pr=
ev_hl</span> <span class=3D"o">=3D=3D</span> <span class=3D"n">HL_NUMBER</s=
pan><span class=3D"p">))</span> <span class=3D"p">{</span></div><div class=
=3D"line">        <span class=3D"n">row</span><span class=3D"o">-&gt;</span=
><span class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</=
span><span class=3D"p">]</span> <span class=3D"o">=3D</span> <span class=3D=
"n">HL_NUMBER</span><span class=3D"p">;</span></div><div class=3D"line">   =
     <span class=3D"n">i</span><span class=3D"o">++</span><span class=3D"p"=
>;</span></div><div class=3D"line">        <span class=3D"n">prev_sep</span=
> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p"=
>;</span></div><div class=3D"line">        <span class=3D"k">continue</span=
><span class=3D"p">;</span></div><div class=3D"line">      <span class=3D"p=
">}</span></div><div class=3D"line">    <span class=3D"p">}</span></div><di=
v class=3D"line"></div><div class=3D"line">    <span class=3D"n">prev_sep</=
span> <span class=3D"o">=3D</span> <span class=3D"n">is_separator</span><sp=
an class=3D"p">(</span><span class=3D"n">c</span><span class=3D"p">);</span=
></div><div class=3D"line">    <span class=3D"n">i</span><span class=3D"o">=
++</span><span class=3D"p">;</span></div><div class=3D"line">  <span class=
=3D"p">}</span></div><div class=3D"line"><span class=3D"p">}</span></div><d=
iv class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">int</=
span> <span class=3D"nf">editorSyntaxToColor</span><span class=3D"p">(</spa=
n><span class=3D"kt">int</span> <span class=3D"n">hl</span><span class=3D"p=
">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span><=
/div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt=
">void</span> <span class=3D"nf">editorSelectSyntaxHighlight</span><span cl=
ass=3D"p">()</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">=
}</span></div><div class=3D"line"></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** row operations ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** editor operations ***/</span></div><div class=3D"li=
ne folded"><span class=3D"cm">/*** file i/o ***/</span></div><div class=3D"=
line folded"><span class=3D"cm">/*** find ***/</span></div><div class=3D"li=
ne folded"><span class=3D"cm">/*** append buffer ***/</span></div><div clas=
s=3D"line folded"><span class=3D"cm">/*** output ***/</span></div><div clas=
s=3D"line folded"><span class=3D"cm">/*** input ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** init ***/</span></div></code></pre=
>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>If we=E2=80=99re in a string and the current character is a backslash (<=
code>\</code>), <em>and</em>
there=E2=80=99s at least one more character in that line that comes after t=
he
backslash, then we highlight the character that comes after the backslash w=
ith
<code>HL_STRING</code> and consume it. We increment <code>i</code> by <code=
>2</code> to consume both characters
at once.</p>
<h2 id=3D"colorful-single-line-comments"><a href=3D"https://viewsourcecode.=
org/snaptoken/kilo/07.syntaxHighlighting.html#colorful-single-line-comments=
">Colorful single-line comments</a></h2>

<p>Next let=E2=80=99s highlight single-line comments. (We=E2=80=99ll leave =
multi-line comments
until the end, because they=E2=80=99re complicated.)</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/hl-comment/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 169</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/hl-comment">hl-comment</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line"><span class=3D"c=
m">/*** defines ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne"><span class=3D"cp">#define KILO_VERSION "0.0.1"</span></div><div class=
=3D"line"><span class=3D"cp">#define KILO_TAB_STOP 8</span></div><div class=
=3D"line"><span class=3D"cp">#define KILO_QUIT_TIMES 3</span></div><div cla=
ss=3D"line"></div><div class=3D"line"><span class=3D"cp">#define CTRL_KEY(k=
) ((k) &amp; 0x1f)</span></div><div class=3D"line"></div><div class=3D"line=
 folded"><span class=3D"k">enum</span> <span class=3D"n">editorKey</span> <=
span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">};</span></div><div c=
lass=3D"line"></div><div class=3D"line"><span class=3D"k">enum</span> <span=
 class=3D"n">editorHighlight</span> <span class=3D"p">{</span></div><div cl=
ass=3D"line">  <span class=3D"n">HL_NORMAL</span> <span class=3D"o">=3D</sp=
an> <span class=3D"mi">0</span><span class=3D"p">,</span></div><ins class=
=3D"line">  <span class=3D"n">HL_COMMENT</span><span class=3D"p">,</span></=
ins><div class=3D"line">  <span class=3D"n">HL_STRING</span><span class=3D"=
p">,</span></div><div class=3D"line">  <span class=3D"n">HL_NUMBER</span><s=
pan class=3D"p">,</span></div><div class=3D"line">  <span class=3D"n">HL_MA=
TCH</span></div><div class=3D"line"><span class=3D"p">};</span></div><div c=
lass=3D"line"></div><div class=3D"line"><span class=3D"cp">#define HL_HIGHL=
IGHT_NUMBERS (1&lt;&lt;0)</span></div><div class=3D"line"><span class=3D"cp=
">#define HL_HIGHLIGHT_STRINGS (1&lt;&lt;1)</span></div><div class=3D"line"=
></div><div class=3D"line folded"><span class=3D"cm">/*** data ***/</span><=
/div><div class=3D"line folded"><span class=3D"cm">/*** filetypes ***/</spa=
n></div><div class=3D"line folded"><span class=3D"cm">/*** prototypes ***/<=
/span></div><div class=3D"line folded"><span class=3D"cm">/*** terminal ***=
/</span></div><div class=3D"line"><span class=3D"cm">/*** syntax highlighti=
ng ***/</span></div><div class=3D"line"></div><div class=3D"line folded"><s=
pan class=3D"kt">int</span> <span class=3D"nf">is_separator</span><span cla=
ss=3D"p">(</span><span class=3D"kt">int</span> <span class=3D"n">c</span><s=
pan class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=
=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line folded"><=
span class=3D"kt">void</span> <span class=3D"nf">editorUpdateSyntax</span><=
span class=3D"p">(</span><span class=3D"n">erow</span> <span class=3D"o">*<=
/span><span class=3D"n">row</span><span class=3D"p">)</span> <span class=3D=
"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line">=
</div><div class=3D"line"><span class=3D"kt">int</span> <span class=3D"nf">=
editorSyntaxToColor</span><span class=3D"p">(</span><span class=3D"kt">int<=
/span> <span class=3D"n">hl</span><span class=3D"p">)</span> <span class=3D=
"p">{</span></div><div class=3D"line">  <span class=3D"k">switch</span> <sp=
an class=3D"p">(</span><span class=3D"n">hl</span><span class=3D"p">)</span=
> <span class=3D"p">{</span></div><ins class=3D"line">    <span class=3D"k"=
>case</span> <span class=3D"n">HL_COMMENT</span><span class=3D"p">:</span> =
<span class=3D"k">return</span> <span class=3D"mi">36</span><span class=3D"=
p">;</span></ins><div class=3D"line">    <span class=3D"k">case</span> <spa=
n class=3D"n">HL_STRING</span><span class=3D"p">:</span> <span class=3D"k">=
return</span> <span class=3D"mi">35</span><span class=3D"p">;</span></div><=
div class=3D"line">    <span class=3D"k">case</span> <span class=3D"n">HL_N=
UMBER</span><span class=3D"p">:</span> <span class=3D"k">return</span> <spa=
n class=3D"mi">31</span><span class=3D"p">;</span></div><div class=3D"line"=
>    <span class=3D"k">case</span> <span class=3D"n">HL_MATCH</span><span c=
lass=3D"p">:</span> <span class=3D"k">return</span> <span class=3D"mi">34</=
span><span class=3D"p">;</span></div><div class=3D"line">    <span class=3D=
"nl">default:</span> <span class=3D"k">return</span> <span class=3D"mi">37<=
/span><span class=3D"p">;</span></div><div class=3D"line">  <span class=3D"=
p">}</span></div><div class=3D"line"><span class=3D"p">}</span></div><div c=
lass=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void</spa=
n> <span class=3D"nf">editorSelectSyntaxHighlight</span><span class=3D"p">(=
)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></d=
iv><div class=3D"line"></div><div class=3D"line folded"><span class=3D"cm">=
/*** row operations ***/</span></div><div class=3D"line folded"><span class=
=3D"cm">/*** editor operations ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** file i/o ***/</span></div><div class=3D"line folded=
"><span class=3D"cm">/*** find ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** append buffer ***/</span></div><div class=3D"line f=
olded"><span class=3D"cm">/*** output ***/</span></div><div class=3D"line f=
olded"><span class=3D"cm">/*** input ***/</span></div><div class=3D"line fo=
lded"><span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>Comments will be highlighted in cyan (<code>36</code>).</p>

<p>We=E2=80=99ll let each language specify its own single-line comment patt=
ern, as they
differ a lot between languages. Let=E2=80=99s add a <code>singleline_commen=
t_start</code> string
to the <code>editorSyntax</code> struct, and set it to <code>"//"</code> fo=
r the C filetype.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/scs/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 170</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/scs">scs</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line"><span class=3D"=
cm">/*** data ***/</span></div><div class=3D"line"></div><div class=3D"line=
"><span class=3D"k">struct</span> <span class=3D"n">editorSyntax</span> <sp=
an class=3D"p">{</span></div><div class=3D"line">  <span class=3D"kt">char<=
/span> <span class=3D"o">*</span><span class=3D"n">filetype</span><span cla=
ss=3D"p">;</span></div><div class=3D"line">  <span class=3D"kt">char</span>=
 <span class=3D"o">**</span><span class=3D"n">filematch</span><span class=
=3D"p">;</span></div><ins class=3D"line">  <span class=3D"kt">char</span> <=
span class=3D"o">*</span><span class=3D"n">singleline_comment_start</span><=
span class=3D"p">;</span></ins><div class=3D"line">  <span class=3D"kt">int=
</span> <span class=3D"n">flags</span><span class=3D"p">;</span></div><div =
class=3D"line"><span class=3D"p">};</span></div><div class=3D"line"></div><=
div class=3D"line folded"><span class=3D"k">typedef</span> <span class=3D"k=
">struct</span> <span class=3D"n">erow</span> <span class=3D"p">{</span> =
=E2=80=A6 <span class=3D"p">}</span> <span class=3D"n">erow</span><span cla=
ss=3D"p">;</span></div><div class=3D"line"></div><div class=3D"line folded"=
><span class=3D"k">struct</span> <span class=3D"n">editorConfig</span> <spa=
n class=3D"p">{</span> =E2=80=A6 <span class=3D"p">};</span></div><div clas=
s=3D"line"></div><div class=3D"line"><span class=3D"k">struct</span> <span =
class=3D"n">editorConfig</span> <span class=3D"n">E</span><span class=3D"p"=
>;</span></div><div class=3D"line"></div><div class=3D"line"><span class=3D=
"cm">/*** filetypes ***/</span></div><div class=3D"line"></div><div class=
=3D"line"><span class=3D"kt">char</span> <span class=3D"o">*</span><span cl=
ass=3D"n">C_HL_extensions</span><span class=3D"p">[]</span> <span class=3D"=
o">=3D</span> <span class=3D"p">{</span> <span class=3D"s">".c"</span><span=
 class=3D"p">,</span> <span class=3D"s">".h"</span><span class=3D"p">,</spa=
n> <span class=3D"s">".cpp"</span><span class=3D"p">,</span> <span class=3D=
"nb">NULL</span> <span class=3D"p">};</span></div><div class=3D"line"></div=
><div class=3D"line"><span class=3D"k">struct</span> <span class=3D"n">edit=
orSyntax</span> <span class=3D"n">HLDB</span><span class=3D"p">[]</span> <s=
pan class=3D"o">=3D</span> <span class=3D"p">{</span></div><div class=3D"li=
ne">  <span class=3D"p">{</span></div><div class=3D"line">    <span class=
=3D"s">"c"</span><span class=3D"p">,</span></div><div class=3D"line">    <s=
pan class=3D"n">C_HL_extensions</span><span class=3D"p">,</span></div><ins =
class=3D"line">    <span class=3D"s">"//"</span><span class=3D"p">,</span><=
/ins><div class=3D"line">    <span class=3D"n">HL_HIGHLIGHT_NUMBERS</span> =
<span class=3D"o">|</span> <span class=3D"n">HL_HIGHLIGHT_STRINGS</span></d=
iv><div class=3D"line">  <span class=3D"p">},</span></div><div class=3D"lin=
e"><span class=3D"p">};</span></div><div class=3D"line"></div><div class=3D=
"line"><span class=3D"cp">#define HLDB_ENTRIES (sizeof(HLDB) / sizeof(HLDB[=
0]))</span></div><div class=3D"line"></div><div class=3D"line folded"><span=
 class=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><=
span class=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"=
><span class=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D=
"line folded"><span class=3D"cm">/*** row operations ***/</span></div><div =
class=3D"line folded"><span class=3D"cm">/*** editor operations ***/</span>=
</div><div class=3D"line folded"><span class=3D"cm">/*** file i/o ***/</spa=
n></div><div class=3D"line folded"><span class=3D"cm">/*** find ***/</span>=
</div><div class=3D"line folded"><span class=3D"cm">/*** append buffer ***/=
</span></div><div class=3D"line folded"><span class=3D"cm">/*** output ***/=
</span></div><div class=3D"line folded"><span class=3D"cm">/*** input ***/<=
/span></div><div class=3D"line folded"><span class=3D"cm">/*** init ***/</s=
pan></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>Okay, now for the highlighting code.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/syntax-comments/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 171</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/syntax-comments">syntax-comments</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><sp=
an class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line"></=
div><div class=3D"line folded"><span class=3D"kt">int</span> <span class=3D=
"nf">is_separator</span><span class=3D"p">(</span><span class=3D"kt">int</s=
pan> <span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p"=
>{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">ed=
itorUpdateSyntax</span><span class=3D"p">(</span><span class=3D"n">erow</sp=
an> <span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p"=
>)</span> <span class=3D"p">{</span></div><div class=3D"line">  <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span> =
<span class=3D"o">=3D</span> <span class=3D"n">realloc</span><span class=3D=
"p">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span=
 class=3D"n">hl</span><span class=3D"p">,</span> <span class=3D"n">row</spa=
n><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line">  <span class=3D"n">memset</span>=
<span class=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&g=
t;</span><span class=3D"n">hl</span><span class=3D"p">,</span> <span class=
=3D"n">HL_NORMAL</span><span class=3D"p">,</span> <span class=3D"n">row</sp=
an><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line"></div><div class=3D"line">  <span=
 class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">E</span>=
<span class=3D"p">.</span><span class=3D"n">syntax</span> <span class=3D"o"=
>=3D=3D</span> <span class=3D"nb">NULL</span><span class=3D"p">)</span> <sp=
an class=3D"k">return</span><span class=3D"p">;</span></div><div class=3D"l=
ine"></div><ins class=3D"line">  <span class=3D"kt">char</span> <span class=
=3D"o">*</span><span class=3D"n">scs</span> <span class=3D"o">=3D</span> <s=
pan class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">syntax<=
/span><span class=3D"o">-&gt;</span><span class=3D"n">singleline_comment_st=
art</span><span class=3D"p">;</span></ins><ins class=3D"line">  <span class=
=3D"kt">int</span> <span class=3D"n">scs_len</span> <span class=3D"o">=3D</=
span> <span class=3D"n">scs</span> <span class=3D"o">?</span> <span class=
=3D"n">strlen</span><span class=3D"p">(</span><span class=3D"n">scs</span><=
span class=3D"p">)</span> <span class=3D"o">:</span> <span class=3D"mi">0</=
span><span class=3D"p">;</span></ins><div class=3D"line"></div><div class=
=3D"line">  <span class=3D"kt">int</span> <span class=3D"n">prev_sep</span>=
 <span class=3D"o">=3D</span> <span class=3D"mi">1</span><span class=3D"p">=
;</span></div><div class=3D"line">  <span class=3D"kt">int</span> <span cla=
ss=3D"n">in_string</span> <span class=3D"o">=3D</span> <span class=3D"mi">0=
</span><span class=3D"p">;</span></div><div class=3D"line"></div><div class=
=3D"line">  <span class=3D"kt">int</span> <span class=3D"n">i</span> <span =
class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span=
></div><div class=3D"line">  <span class=3D"k">while</span> <span class=3D"=
p">(</span><span class=3D"n">i</span> <span class=3D"o">&lt;</span> <span c=
lass=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">rsize<=
/span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=
=3D"line">    <span class=3D"kt">char</span> <span class=3D"n">c</span> <sp=
an class=3D"o">=3D</span> <span class=3D"n">row</span><span class=3D"o">-&g=
t;</span><span class=3D"n">render</span><span class=3D"p">[</span><span cla=
ss=3D"n">i</span><span class=3D"p">];</span></div><div class=3D"line">    <=
span class=3D"kt">unsigned</span> <span class=3D"kt">char</span> <span clas=
s=3D"n">prev_hl</span> <span class=3D"o">=3D</span> <span class=3D"p">(</sp=
an><span class=3D"n">i</span> <span class=3D"o">&gt;</span> <span class=3D"=
mi">0</span><span class=3D"p">)</span> <span class=3D"o">?</span> <span cla=
ss=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span=
><span class=3D"p">[</span><span class=3D"n">i</span> <span class=3D"o">-</=
span> <span class=3D"mi">1</span><span class=3D"p">]</span> <span class=3D"=
o">:</span> <span class=3D"n">HL_NORMAL</span><span class=3D"p">;</span></d=
iv><div class=3D"line"></div><ins class=3D"line">    <span class=3D"k">if</=
span> <span class=3D"p">(</span><span class=3D"n">scs_len</span> <span clas=
s=3D"o">&amp;&amp;</span> <span class=3D"o">!</span><span class=3D"n">in_st=
ring</span><span class=3D"p">)</span> <span class=3D"p">{</span></ins><ins =
class=3D"line">      <span class=3D"k">if</span> <span class=3D"p">(</span>=
<span class=3D"o">!</span><span class=3D"n">strncmp</span><span class=3D"p"=
>(</span><span class=3D"o">&amp;</span><span class=3D"n">row</span><span cl=
ass=3D"o">-&gt;</span><span class=3D"n">render</span><span class=3D"p">[</s=
pan><span class=3D"n">i</span><span class=3D"p">],</span> <span class=3D"n"=
>scs</span><span class=3D"p">,</span> <span class=3D"n">scs_len</span><span=
 class=3D"p">))</span> <span class=3D"p">{</span></ins><ins class=3D"line">=
        <span class=3D"n">memset</span><span class=3D"p">(</span><span clas=
s=3D"o">&amp;</span><span class=3D"n">row</span><span class=3D"o">-&gt;</sp=
an><span class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i=
</span><span class=3D"p">],</span> <span class=3D"n">HL_COMMENT</span><span=
 class=3D"p">,</span> <span class=3D"n">row</span><span class=3D"o">-&gt;</=
span><span class=3D"n">rsize</span> <span class=3D"o">-</span> <span class=
=3D"n">i</span><span class=3D"p">);</span></ins><ins class=3D"line">       =
 <span class=3D"k">break</span><span class=3D"p">;</span></ins><ins class=
=3D"line">      <span class=3D"p">}</span></ins><ins class=3D"line">    <sp=
an class=3D"p">}</span></ins><div class=3D"line"></div><div class=3D"line">=
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n"=
>E</span><span class=3D"p">.</span><span class=3D"n">syntax</span><span cla=
ss=3D"o">-&gt;</span><span class=3D"n">flags</span> <span class=3D"o">&amp;=
</span> <span class=3D"n">HL_HIGHLIGHT_STRINGS</span><span class=3D"p">)</s=
pan> <span class=3D"p">{</span></div><div class=3D"line">      <span class=
=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">in_string</spa=
n><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"=
line">        <span class=3D"n">row</span><span class=3D"o">-&gt;</span><sp=
an class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</span=
><span class=3D"p">]</span> <span class=3D"o">=3D</span> <span class=3D"n">=
HL_STRING</span><span class=3D"p">;</span></div><div class=3D"line">       =
 <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">c<=
/span> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'\\'</span> <span=
 class=3D"o">&amp;&amp;</span> <span class=3D"n">i</span> <span class=3D"o"=
>+</span> <span class=3D"mi">1</span> <span class=3D"o">&lt;</span> <span c=
lass=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">rsize<=
/span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=
=3D"line">          <span class=3D"n">row</span><span class=3D"o">-&gt;</sp=
an><span class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i=
</span> <span class=3D"o">+</span> <span class=3D"mi">1</span><span class=
=3D"p">]</span> <span class=3D"o">=3D</span> <span class=3D"n">HL_STRING</s=
pan><span class=3D"p">;</span></div><div class=3D"line">          <span cla=
ss=3D"n">i</span> <span class=3D"o">+=3D</span> <span class=3D"mi">2</span>=
<span class=3D"p">;</span></div><div class=3D"line">          <span class=
=3D"k">continue</span><span class=3D"p">;</span></div><div class=3D"line"> =
       <span class=3D"p">}</span></div><div class=3D"line">        <span cl=
ass=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">c</span> <s=
pan class=3D"o">=3D=3D</span> <span class=3D"n">in_string</span><span class=
=3D"p">)</span> <span class=3D"n">in_string</span> <span class=3D"o">=3D</s=
pan> <span class=3D"mi">0</span><span class=3D"p">;</span></div><div class=
=3D"line">        <span class=3D"n">i</span><span class=3D"o">++</span><spa=
n class=3D"p">;</span></div><div class=3D"line">        <span class=3D"n">p=
rev_sep</span> <span class=3D"o">=3D</span> <span class=3D"mi">1</span><spa=
n class=3D"p">;</span></div><div class=3D"line">        <span class=3D"k">c=
ontinue</span><span class=3D"p">;</span></div><div class=3D"line">      <sp=
an class=3D"p">}</span> <span class=3D"k">else</span> <span class=3D"p">{</=
span></div><div class=3D"line">        <span class=3D"k">if</span> <span cl=
ass=3D"p">(</span><span class=3D"n">c</span> <span class=3D"o">=3D=3D</span=
> <span class=3D"sc">'"'</span> <span class=3D"o">||</span> <span class=3D"=
n">c</span> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'\''</span><=
span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"lin=
e">          <span class=3D"n">in_string</span> <span class=3D"o">=3D</span=
> <span class=3D"n">c</span><span class=3D"p">;</span></div><div class=3D"l=
ine">          <span class=3D"n">row</span><span class=3D"o">-&gt;</span><s=
pan class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</spa=
n><span class=3D"p">]</span> <span class=3D"o">=3D</span> <span class=3D"n"=
>HL_STRING</span><span class=3D"p">;</span></div><div class=3D"line">      =
    <span class=3D"n">i</span><span class=3D"o">++</span><span class=3D"p">=
;</span></div><div class=3D"line">          <span class=3D"k">continue</spa=
n><span class=3D"p">;</span></div><div class=3D"line">        <span class=
=3D"p">}</span></div><div class=3D"line">      <span class=3D"p">}</span></=
div><div class=3D"line">    <span class=3D"p">}</span></div><div class=3D"l=
ine"></div><div class=3D"line">    <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"n">E</span><span class=3D"p">.</span><span cl=
ass=3D"n">syntax</span><span class=3D"o">-&gt;</span><span class=3D"n">flag=
s</span> <span class=3D"o">&amp;</span> <span class=3D"n">HL_HIGHLIGHT_NUMB=
ERS</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div c=
lass=3D"line">      <span class=3D"k">if</span> <span class=3D"p">((</span>=
<span class=3D"n">isdigit</span><span class=3D"p">(</span><span class=3D"n"=
>c</span><span class=3D"p">)</span> <span class=3D"o">&amp;&amp;</span> <sp=
an class=3D"p">(</span><span class=3D"n">prev_sep</span> <span class=3D"o">=
||</span> <span class=3D"n">prev_hl</span> <span class=3D"o">=3D=3D</span> =
<span class=3D"n">HL_NUMBER</span><span class=3D"p">))</span> <span class=
=3D"o">||</span></div><div class=3D"line">          <span class=3D"p">(</sp=
an><span class=3D"n">c</span> <span class=3D"o">=3D=3D</span> <span class=
=3D"sc">'.'</span> <span class=3D"o">&amp;&amp;</span> <span class=3D"n">pr=
ev_hl</span> <span class=3D"o">=3D=3D</span> <span class=3D"n">HL_NUMBER</s=
pan><span class=3D"p">))</span> <span class=3D"p">{</span></div><div class=
=3D"line">        <span class=3D"n">row</span><span class=3D"o">-&gt;</span=
><span class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</=
span><span class=3D"p">]</span> <span class=3D"o">=3D</span> <span class=3D=
"n">HL_NUMBER</span><span class=3D"p">;</span></div><div class=3D"line">   =
     <span class=3D"n">i</span><span class=3D"o">++</span><span class=3D"p"=
>;</span></div><div class=3D"line">        <span class=3D"n">prev_sep</span=
> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p"=
>;</span></div><div class=3D"line">        <span class=3D"k">continue</span=
><span class=3D"p">;</span></div><div class=3D"line">      <span class=3D"p=
">}</span></div><div class=3D"line">    <span class=3D"p">}</span></div><di=
v class=3D"line"></div><div class=3D"line">    <span class=3D"n">prev_sep</=
span> <span class=3D"o">=3D</span> <span class=3D"n">is_separator</span><sp=
an class=3D"p">(</span><span class=3D"n">c</span><span class=3D"p">);</span=
></div><div class=3D"line">    <span class=3D"n">i</span><span class=3D"o">=
++</span><span class=3D"p">;</span></div><div class=3D"line">  <span class=
=3D"p">}</span></div><div class=3D"line"><span class=3D"p">}</span></div><d=
iv class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">int</=
span> <span class=3D"nf">editorSyntaxToColor</span><span class=3D"p">(</spa=
n><span class=3D"kt">int</span> <span class=3D"n">hl</span><span class=3D"p=
">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span><=
/div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt=
">void</span> <span class=3D"nf">editorSelectSyntaxHighlight</span><span cl=
ass=3D"p">()</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">=
}</span></div><div class=3D"line"></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** row operations ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** editor operations ***/</span></div><div class=3D"li=
ne folded"><span class=3D"cm">/*** file i/o ***/</span></div><div class=3D"=
line folded"><span class=3D"cm">/*** find ***/</span></div><div class=3D"li=
ne folded"><span class=3D"cm">/*** append buffer ***/</span></div><div clas=
s=3D"line folded"><span class=3D"cm">/*** output ***/</span></div><div clas=
s=3D"line folded"><span class=3D"cm">/*** input ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** init ***/</span></div></code></pre=
>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p><code>strncmp()</code> comes from <code>&lt;string.h&gt;</code>.</p>

<p>If you don=E2=80=99t want single-line comment highlighting for a particu=
lar filetype,
you should be able to set <code>singleline_comment_start</code> either to <=
code>NULL</code> or to the
empty string (<code>""</code>). We make <code>scs</code> an alias for
<code>E.syntax-&gt;singleline_comment_start</code> for easier typing (and r=
eadability,
perhaps?). We then set <code>scs_len</code> to the length of the string, or=
 <code>0</code> if the
string is <code>NULL</code>. This lets us use <code>scs_len</code> as a boo=
lean to know whether we
should highlight single-line comments.</p>

<p>So we wrap our comment highlighting code in an <code>if</code> statement=
 that checks
<code>scs_len</code> and also makes sure we=E2=80=99re not in a string, sin=
ce we=E2=80=99re placing this
code above the string highlighting code (order matters a lot in this
function).</p>

<p>If those checks passed, then we use <code>strncmp()</code> to check if t=
his character is
the start of a single-line comment. If so, then we simply <code>memset()</c=
ode> the whole
rest of the line with <code>HL_COMMENT</code> and <code>break</code> out of=
 the syntax highlighting
loop. Just like that, we=E2=80=99re done highlighting the line.</p>
<h2 id=3D"colorful-keywords"><a href=3D"https://viewsourcecode.org/snaptoke=
n/kilo/07.syntaxHighlighting.html#colorful-keywords">Colorful keywords</a><=
/h2>

<p>Now let=E2=80=99s turn to highlighting keywords. We=E2=80=99re going to =
allow languages to
specify two types of keywords that will be highlighted in different colors.=
 (In
C, we=E2=80=99ll highlight actual keywords in one color and common type nam=
es in the
other color.)</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/hl-keywords/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 172</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/hl-keywords">hl-keywords</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line"><span class=3D"c=
m">/*** defines ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne"><span class=3D"cp">#define KILO_VERSION "0.0.1"</span></div><div class=
=3D"line"><span class=3D"cp">#define KILO_TAB_STOP 8</span></div><div class=
=3D"line"><span class=3D"cp">#define KILO_QUIT_TIMES 3</span></div><div cla=
ss=3D"line"></div><div class=3D"line"><span class=3D"cp">#define CTRL_KEY(k=
) ((k) &amp; 0x1f)</span></div><div class=3D"line"></div><div class=3D"line=
 folded"><span class=3D"k">enum</span> <span class=3D"n">editorKey</span> <=
span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">};</span></div><div c=
lass=3D"line"></div><div class=3D"line"><span class=3D"k">enum</span> <span=
 class=3D"n">editorHighlight</span> <span class=3D"p">{</span></div><div cl=
ass=3D"line">  <span class=3D"n">HL_NORMAL</span> <span class=3D"o">=3D</sp=
an> <span class=3D"mi">0</span><span class=3D"p">,</span></div><div class=
=3D"line">  <span class=3D"n">HL_COMMENT</span><span class=3D"p">,</span></=
div><ins class=3D"line">  <span class=3D"n">HL_KEYWORD1</span><span class=
=3D"p">,</span></ins><ins class=3D"line">  <span class=3D"n">HL_KEYWORD2</s=
pan><span class=3D"p">,</span></ins><div class=3D"line">  <span class=3D"n"=
>HL_STRING</span><span class=3D"p">,</span></div><div class=3D"line">  <spa=
n class=3D"n">HL_NUMBER</span><span class=3D"p">,</span></div><div class=3D=
"line">  <span class=3D"n">HL_MATCH</span></div><div class=3D"line"><span c=
lass=3D"p">};</span></div><div class=3D"line"></div><div class=3D"line"><sp=
an class=3D"cp">#define HL_HIGHLIGHT_NUMBERS (1&lt;&lt;0)</span></div><div =
class=3D"line"><span class=3D"cp">#define HL_HIGHLIGHT_STRINGS (1&lt;&lt;1)=
</span></div><div class=3D"line"></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span class=
=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><spa=
n class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span cla=
ss=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line"></d=
iv><div class=3D"line folded"><span class=3D"kt">int</span> <span class=3D"=
nf">is_separator</span><span class=3D"p">(</span><span class=3D"kt">int</sp=
an> <span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p">=
{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></di=
v><div class=3D"line folded"><span class=3D"kt">void</span> <span class=3D"=
nf">editorUpdateSyntax</span><span class=3D"p">(</span><span class=3D"n">er=
ow</span> <span class=3D"o">*</span><span class=3D"n">row</span><span class=
=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</s=
pan></div><div class=3D"line"></div><div class=3D"line"><span class=3D"kt">=
int</span> <span class=3D"nf">editorSyntaxToColor</span><span class=3D"p">(=
</span><span class=3D"kt">int</span> <span class=3D"n">hl</span><span class=
=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line">  <span=
 class=3D"k">switch</span> <span class=3D"p">(</span><span class=3D"n">hl</=
span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=
=3D"line">    <span class=3D"k">case</span> <span class=3D"n">HL_COMMENT</s=
pan><span class=3D"p">:</span> <span class=3D"k">return</span> <span class=
=3D"mi">36</span><span class=3D"p">;</span></div><ins class=3D"line">    <s=
pan class=3D"k">case</span> <span class=3D"n">HL_KEYWORD1</span><span class=
=3D"p">:</span> <span class=3D"k">return</span> <span class=3D"mi">33</span=
><span class=3D"p">;</span></ins><ins class=3D"line">    <span class=3D"k">=
case</span> <span class=3D"n">HL_KEYWORD2</span><span class=3D"p">:</span> =
<span class=3D"k">return</span> <span class=3D"mi">32</span><span class=3D"=
p">;</span></ins><div class=3D"line">    <span class=3D"k">case</span> <spa=
n class=3D"n">HL_STRING</span><span class=3D"p">:</span> <span class=3D"k">=
return</span> <span class=3D"mi">35</span><span class=3D"p">;</span></div><=
div class=3D"line">    <span class=3D"k">case</span> <span class=3D"n">HL_N=
UMBER</span><span class=3D"p">:</span> <span class=3D"k">return</span> <spa=
n class=3D"mi">31</span><span class=3D"p">;</span></div><div class=3D"line"=
>    <span class=3D"k">case</span> <span class=3D"n">HL_MATCH</span><span c=
lass=3D"p">:</span> <span class=3D"k">return</span> <span class=3D"mi">34</=
span><span class=3D"p">;</span></div><div class=3D"line">    <span class=3D=
"nl">default:</span> <span class=3D"k">return</span> <span class=3D"mi">37<=
/span><span class=3D"p">;</span></div><div class=3D"line">  <span class=3D"=
p">}</span></div><div class=3D"line"><span class=3D"p">}</span></div><div c=
lass=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void</spa=
n> <span class=3D"nf">editorSelectSyntaxHighlight</span><span class=3D"p">(=
)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></d=
iv><div class=3D"line"></div><div class=3D"line folded"><span class=3D"cm">=
/*** row operations ***/</span></div><div class=3D"line folded"><span class=
=3D"cm">/*** editor operations ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** file i/o ***/</span></div><div class=3D"line folded=
"><span class=3D"cm">/*** find ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** append buffer ***/</span></div><div class=3D"line f=
olded"><span class=3D"cm">/*** output ***/</span></div><div class=3D"line f=
olded"><span class=3D"cm">/*** input ***/</span></div><div class=3D"line fo=
lded"><span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>The two colors we=E2=80=99ll use for keywords are yellow (<code>33</code=
>) and green (<code>32</code>).</p>

<p>Let=E2=80=99s add a <code>keywords</code> array to the <code>editorSynta=
x</code> struct. This will be a
<code>NULL</code>-terminated array of strings, each string containing a key=
word. To
differentiate between the two types of keywords, we=E2=80=99ll terminate th=
e second
type of keywords with a pipe (<code>|</code>) character (also known as a ve=
rtical bar).</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/c-keywords/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 173</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/c-keywords">c-keywords</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line"><span class=3D"=
cm">/*** data ***/</span></div><div class=3D"line"></div><div class=3D"line=
"><span class=3D"k">struct</span> <span class=3D"n">editorSyntax</span> <sp=
an class=3D"p">{</span></div><div class=3D"line">  <span class=3D"kt">char<=
/span> <span class=3D"o">*</span><span class=3D"n">filetype</span><span cla=
ss=3D"p">;</span></div><div class=3D"line">  <span class=3D"kt">char</span>=
 <span class=3D"o">**</span><span class=3D"n">filematch</span><span class=
=3D"p">;</span></div><ins class=3D"line">  <span class=3D"kt">char</span> <=
span class=3D"o">**</span><span class=3D"n">keywords</span><span class=3D"p=
">;</span></ins><div class=3D"line">  <span class=3D"kt">char</span> <span =
class=3D"o">*</span><span class=3D"n">singleline_comment_start</span><span =
class=3D"p">;</span></div><div class=3D"line">  <span class=3D"kt">int</spa=
n> <span class=3D"n">flags</span><span class=3D"p">;</span></div><div class=
=3D"line"><span class=3D"p">};</span></div><div class=3D"line"></div><div c=
lass=3D"line folded"><span class=3D"k">typedef</span> <span class=3D"k">str=
uct</span> <span class=3D"n">erow</span> <span class=3D"p">{</span> =E2=80=
=A6 <span class=3D"p">}</span> <span class=3D"n">erow</span><span class=3D"=
p">;</span></div><div class=3D"line"></div><div class=3D"line folded"><span=
 class=3D"k">struct</span> <span class=3D"n">editorConfig</span> <span clas=
s=3D"p">{</span> =E2=80=A6 <span class=3D"p">};</span></div><div class=3D"l=
ine"></div><div class=3D"line"><span class=3D"k">struct</span> <span class=
=3D"n">editorConfig</span> <span class=3D"n">E</span><span class=3D"p">;</s=
pan></div><div class=3D"line"></div><div class=3D"line"><span class=3D"cm">=
/*** filetypes ***/</span></div><div class=3D"line"></div><div class=3D"lin=
e"><span class=3D"kt">char</span> <span class=3D"o">*</span><span class=3D"=
n">C_HL_extensions</span><span class=3D"p">[]</span> <span class=3D"o">=3D<=
/span> <span class=3D"p">{</span> <span class=3D"s">".c"</span><span class=
=3D"p">,</span> <span class=3D"s">".h"</span><span class=3D"p">,</span> <sp=
an class=3D"s">".cpp"</span><span class=3D"p">,</span> <span class=3D"nb">N=
ULL</span> <span class=3D"p">};</span></div><ins class=3D"line"><span class=
=3D"kt">char</span> <span class=3D"o">*</span><span class=3D"n">C_HL_keywor=
ds</span><span class=3D"p">[]</span> <span class=3D"o">=3D</span> <span cla=
ss=3D"p">{</span></ins><ins class=3D"line">  <span class=3D"s">"switch"</sp=
an><span class=3D"p">,</span> <span class=3D"s">"if"</span><span class=3D"p=
">,</span> <span class=3D"s">"while"</span><span class=3D"p">,</span> <span=
 class=3D"s">"for"</span><span class=3D"p">,</span> <span class=3D"s">"brea=
k"</span><span class=3D"p">,</span> <span class=3D"s">"continue"</span><spa=
n class=3D"p">,</span> <span class=3D"s">"return"</span><span class=3D"p">,=
</span> <span class=3D"s">"else"</span><span class=3D"p">,</span></ins><ins=
 class=3D"line">  <span class=3D"s">"struct"</span><span class=3D"p">,</spa=
n> <span class=3D"s">"union"</span><span class=3D"p">,</span> <span class=
=3D"s">"typedef"</span><span class=3D"p">,</span> <span class=3D"s">"static=
"</span><span class=3D"p">,</span> <span class=3D"s">"enum"</span><span cla=
ss=3D"p">,</span> <span class=3D"s">"class"</span><span class=3D"p">,</span=
> <span class=3D"s">"case"</span><span class=3D"p">,</span></ins><ins class=
=3D"line"></ins><ins class=3D"line">  <span class=3D"s">"int|"</span><span =
class=3D"p">,</span> <span class=3D"s">"long|"</span><span class=3D"p">,</s=
pan> <span class=3D"s">"double|"</span><span class=3D"p">,</span> <span cla=
ss=3D"s">"float|"</span><span class=3D"p">,</span> <span class=3D"s">"char|=
"</span><span class=3D"p">,</span> <span class=3D"s">"unsigned|"</span><spa=
n class=3D"p">,</span> <span class=3D"s">"signed|"</span><span class=3D"p">=
,</span></ins><ins class=3D"line">  <span class=3D"s">"void|"</span><span c=
lass=3D"p">,</span> <span class=3D"nb">NULL</span></ins><ins class=3D"line"=
><span class=3D"p">};</span></ins><div class=3D"line"></div><div class=3D"l=
ine"><span class=3D"k">struct</span> <span class=3D"n">editorSyntax</span> =
<span class=3D"n">HLDB</span><span class=3D"p">[]</span> <span class=3D"o">=
=3D</span> <span class=3D"p">{</span></div><div class=3D"line">  <span clas=
s=3D"p">{</span></div><div class=3D"line">    <span class=3D"s">"c"</span><=
span class=3D"p">,</span></div><div class=3D"line">    <span class=3D"n">C_=
HL_extensions</span><span class=3D"p">,</span></div><ins class=3D"line">   =
 <span class=3D"n">C_HL_keywords</span><span class=3D"p">,</span></ins><div=
 class=3D"line">    <span class=3D"s">"//"</span><span class=3D"p">,</span>=
</div><div class=3D"line">    <span class=3D"n">HL_HIGHLIGHT_NUMBERS</span>=
 <span class=3D"o">|</span> <span class=3D"n">HL_HIGHLIGHT_STRINGS</span></=
div><div class=3D"line">  <span class=3D"p">},</span></div><div class=3D"li=
ne"><span class=3D"p">};</span></div><div class=3D"line"></div><div class=
=3D"line"><span class=3D"cp">#define HLDB_ENTRIES (sizeof(HLDB) / sizeof(HL=
DB[0]))</span></div><div class=3D"line"></div><div class=3D"line folded"><s=
pan class=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded=
"><span class=3D"cm">/*** terminal ***/</span></div><div class=3D"line fold=
ed"><span class=3D"cm">/*** syntax highlighting ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** row operations ***/</span></div><d=
iv class=3D"line folded"><span class=3D"cm">/*** editor operations ***/</sp=
an></div><div class=3D"line folded"><span class=3D"cm">/*** file i/o ***/</=
span></div><div class=3D"line folded"><span class=3D"cm">/*** find ***/</sp=
an></div><div class=3D"line folded"><span class=3D"cm">/*** append buffer *=
**/</span></div><div class=3D"line folded"><span class=3D"cm">/*** output *=
**/</span></div><div class=3D"line folded"><span class=3D"cm">/*** input **=
*/</span></div><div class=3D"line folded"><span class=3D"cm">/*** init ***/=
</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>As mentioned earlier, we=E2=80=99ll highlight common C types as secondar=
y keywords, so
we end each one with a <code>|</code> character.</p>

<p>Now let=E2=80=99s highlight them.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/syntax-keywords/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 174</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/syntax-keywords">syntax-keywords</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><sp=
an class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line"></=
div><div class=3D"line folded"><span class=3D"kt">int</span> <span class=3D=
"nf">is_separator</span><span class=3D"p">(</span><span class=3D"kt">int</s=
pan> <span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p"=
>{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">ed=
itorUpdateSyntax</span><span class=3D"p">(</span><span class=3D"n">erow</sp=
an> <span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p"=
>)</span> <span class=3D"p">{</span></div><div class=3D"line">  <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span> =
<span class=3D"o">=3D</span> <span class=3D"n">realloc</span><span class=3D=
"p">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span=
 class=3D"n">hl</span><span class=3D"p">,</span> <span class=3D"n">row</spa=
n><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line">  <span class=3D"n">memset</span>=
<span class=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&g=
t;</span><span class=3D"n">hl</span><span class=3D"p">,</span> <span class=
=3D"n">HL_NORMAL</span><span class=3D"p">,</span> <span class=3D"n">row</sp=
an><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line"></div><div class=3D"line">  <span=
 class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">E</span>=
<span class=3D"p">.</span><span class=3D"n">syntax</span> <span class=3D"o"=
>=3D=3D</span> <span class=3D"nb">NULL</span><span class=3D"p">)</span> <sp=
an class=3D"k">return</span><span class=3D"p">;</span></div><div class=3D"l=
ine"></div><ins class=3D"line">  <span class=3D"kt">char</span> <span class=
=3D"o">**</span><span class=3D"n">keywords</span> <span class=3D"o">=3D</sp=
an> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">s=
yntax</span><span class=3D"o">-&gt;</span><span class=3D"n">keywords</span>=
<span class=3D"p">;</span></ins><div class=3D"line"></div><div class=3D"lin=
e">  <span class=3D"kt">char</span> <span class=3D"o">*</span><span class=
=3D"n">scs</span> <span class=3D"o">=3D</span> <span class=3D"n">E</span><s=
pan class=3D"p">.</span><span class=3D"n">syntax</span><span class=3D"o">-&=
gt;</span><span class=3D"n">singleline_comment_start</span><span class=3D"p=
">;</span></div><div class=3D"line">  <span class=3D"kt">int</span> <span c=
lass=3D"n">scs_len</span> <span class=3D"o">=3D</span> <span class=3D"n">sc=
s</span> <span class=3D"o">?</span> <span class=3D"n">strlen</span><span cl=
ass=3D"p">(</span><span class=3D"n">scs</span><span class=3D"p">)</span> <s=
pan class=3D"o">:</span> <span class=3D"mi">0</span><span class=3D"p">;</sp=
an></div><div class=3D"line"></div><div class=3D"line">  <span class=3D"kt"=
>int</span> <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</span> =
<span class=3D"mi">1</span><span class=3D"p">;</span></div><div class=3D"li=
ne">  <span class=3D"kt">int</span> <span class=3D"n">in_string</span> <spa=
n class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</sp=
an></div><div class=3D"line"></div><div class=3D"line">  <span class=3D"kt"=
>int</span> <span class=3D"n">i</span> <span class=3D"o">=3D</span> <span c=
lass=3D"mi">0</span><span class=3D"p">;</span></div><div class=3D"line">  <=
span class=3D"k">while</span> <span class=3D"p">(</span><span class=3D"n">i=
</span> <span class=3D"o">&lt;</span> <span class=3D"n">row</span><span cla=
ss=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=3D"p">)</spa=
n> <span class=3D"p">{</span></div><div class=3D"line">    <span class=3D"k=
t">char</span> <span class=3D"n">c</span> <span class=3D"o">=3D</span> <spa=
n class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">ren=
der</span><span class=3D"p">[</span><span class=3D"n">i</span><span class=
=3D"p">];</span></div><div class=3D"line">    <span class=3D"kt">unsigned</=
span> <span class=3D"kt">char</span> <span class=3D"n">prev_hl</span> <span=
 class=3D"o">=3D</span> <span class=3D"p">(</span><span class=3D"n">i</span=
> <span class=3D"o">&gt;</span> <span class=3D"mi">0</span><span class=3D"p=
">)</span> <span class=3D"o">?</span> <span class=3D"n">row</span><span cla=
ss=3D"o">-&gt;</span><span class=3D"n">hl</span><span class=3D"p">[</span><=
span class=3D"n">i</span> <span class=3D"o">-</span> <span class=3D"mi">1</=
span><span class=3D"p">]</span> <span class=3D"o">:</span> <span class=3D"n=
">HL_NORMAL</span><span class=3D"p">;</span></div><div class=3D"line"></div=
><div class=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(</s=
pan><span class=3D"n">scs_len</span> <span class=3D"o">&amp;&amp;</span> <s=
pan class=3D"o">!</span><span class=3D"n">in_string</span><span class=3D"p"=
>)</span> <span class=3D"p">{</span></div><div class=3D"line">      <span c=
lass=3D"k">if</span> <span class=3D"p">(</span><span class=3D"o">!</span><s=
pan class=3D"n">strncmp</span><span class=3D"p">(</span><span class=3D"o">&=
amp;</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span =
class=3D"n">render</span><span class=3D"p">[</span><span class=3D"n">i</spa=
n><span class=3D"p">],</span> <span class=3D"n">scs</span><span class=3D"p"=
>,</span> <span class=3D"n">scs_len</span><span class=3D"p">))</span> <span=
 class=3D"p">{</span></div><div class=3D"line">        <span class=3D"n">me=
mset</span><span class=3D"p">(</span><span class=3D"o">&amp;</span><span cl=
ass=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</spa=
n><span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">],<=
/span> <span class=3D"n">HL_COMMENT</span><span class=3D"p">,</span> <span =
class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">rsize=
</span> <span class=3D"o">-</span> <span class=3D"n">i</span><span class=3D=
"p">);</span></div><div class=3D"line">        <span class=3D"k">break</spa=
n><span class=3D"p">;</span></div><div class=3D"line">      <span class=3D"=
p">}</span></div><div class=3D"line">    <span class=3D"p">}</span></div><d=
iv class=3D"line"></div><div class=3D"line">    <span class=3D"k">if</span>=
 <span class=3D"p">(</span><span class=3D"n">E</span><span class=3D"p">.</s=
pan><span class=3D"n">syntax</span><span class=3D"o">-&gt;</span><span clas=
s=3D"n">flags</span> <span class=3D"o">&amp;</span> <span class=3D"n">HL_HI=
GHLIGHT_STRINGS</span><span class=3D"p">)</span> <span class=3D"p">{</span>=
</div><div class=3D"line">      <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"n">in_string</span><span class=3D"p">)</span> <sp=
an class=3D"p">{</span></div><div class=3D"line">        <span class=3D"n">=
row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><span cl=
ass=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</span> <spa=
n class=3D"o">=3D</span> <span class=3D"n">HL_STRING</span><span class=3D"p=
">;</span></div><div class=3D"line">        <span class=3D"k">if</span> <sp=
an class=3D"p">(</span><span class=3D"n">c</span> <span class=3D"o">=3D=3D<=
/span> <span class=3D"sc">'\\'</span> <span class=3D"o">&amp;&amp;</span> <=
span class=3D"n">i</span> <span class=3D"o">+</span> <span class=3D"mi">1</=
span> <span class=3D"o">&lt;</span> <span class=3D"n">row</span><span class=
=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=3D"p">)</span>=
 <span class=3D"p">{</span></div><div class=3D"line">          <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><=
span class=3D"p">[</span><span class=3D"n">i</span> <span class=3D"o">+</sp=
an> <span class=3D"mi">1</span><span class=3D"p">]</span> <span class=3D"o"=
>=3D</span> <span class=3D"n">HL_STRING</span><span class=3D"p">;</span></d=
iv><div class=3D"line">          <span class=3D"n">i</span> <span class=3D"=
o">+=3D</span> <span class=3D"mi">2</span><span class=3D"p">;</span></div><=
div class=3D"line">          <span class=3D"k">continue</span><span class=
=3D"p">;</span></div><div class=3D"line">        <span class=3D"p">}</span>=
</div><div class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"n">c</span> <span class=3D"o">=3D=3D</span> <=
span class=3D"n">in_string</span><span class=3D"p">)</span> <span class=3D"=
n">in_string</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span=
><span class=3D"p">;</span></div><div class=3D"line">        <span class=3D=
"n">i</span><span class=3D"o">++</span><span class=3D"p">;</span></div><div=
 class=3D"line">        <span class=3D"n">prev_sep</span> <span class=3D"o"=
>=3D</span> <span class=3D"mi">1</span><span class=3D"p">;</span></div><div=
 class=3D"line">        <span class=3D"k">continue</span><span class=3D"p">=
;</span></div><div class=3D"line">      <span class=3D"p">}</span> <span cl=
ass=3D"k">else</span> <span class=3D"p">{</span></div><div class=3D"line"> =
       <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D=
"n">c</span> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'"'</span> =
<span class=3D"o">||</span> <span class=3D"n">c</span> <span class=3D"o">=
=3D=3D</span> <span class=3D"sc">'\''</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span></div><div class=3D"line">          <span class=3D"n"=
>in_string</span> <span class=3D"o">=3D</span> <span class=3D"n">c</span><s=
pan class=3D"p">;</span></div><div class=3D"line">          <span class=3D"=
n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><span=
 class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</span> <=
span class=3D"o">=3D</span> <span class=3D"n">HL_STRING</span><span class=
=3D"p">;</span></div><div class=3D"line">          <span class=3D"n">i</spa=
n><span class=3D"o">++</span><span class=3D"p">;</span></div><div class=3D"=
line">          <span class=3D"k">continue</span><span class=3D"p">;</span>=
</div><div class=3D"line">        <span class=3D"p">}</span></div><div clas=
s=3D"line">      <span class=3D"p">}</span></div><div class=3D"line">    <s=
pan class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line"=
>    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n=
">E</span><span class=3D"p">.</span><span class=3D"n">syntax</span><span cl=
ass=3D"o">-&gt;</span><span class=3D"n">flags</span> <span class=3D"o">&amp=
;</span> <span class=3D"n">HL_HIGHLIGHT_NUMBERS</span><span class=3D"p">)</=
span> <span class=3D"p">{</span></div><div class=3D"line">      <span class=
=3D"k">if</span> <span class=3D"p">((</span><span class=3D"n">isdigit</span=
><span class=3D"p">(</span><span class=3D"n">c</span><span class=3D"p">)</s=
pan> <span class=3D"o">&amp;&amp;</span> <span class=3D"p">(</span><span cl=
ass=3D"n">prev_sep</span> <span class=3D"o">||</span> <span class=3D"n">pre=
v_hl</span> <span class=3D"o">=3D=3D</span> <span class=3D"n">HL_NUMBER</sp=
an><span class=3D"p">))</span> <span class=3D"o">||</span></div><div class=
=3D"line">          <span class=3D"p">(</span><span class=3D"n">c</span> <s=
pan class=3D"o">=3D=3D</span> <span class=3D"sc">'.'</span> <span class=3D"=
o">&amp;&amp;</span> <span class=3D"n">prev_hl</span> <span class=3D"o">=3D=
=3D</span> <span class=3D"n">HL_NUMBER</span><span class=3D"p">))</span> <s=
pan class=3D"p">{</span></div><div class=3D"line">        <span class=3D"n"=
>row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><span c=
lass=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</span> <sp=
an class=3D"o">=3D</span> <span class=3D"n">HL_NUMBER</span><span class=3D"=
p">;</span></div><div class=3D"line">        <span class=3D"n">i</span><spa=
n class=3D"o">++</span><span class=3D"p">;</span></div><div class=3D"line">=
        <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <spa=
n class=3D"mi">0</span><span class=3D"p">;</span></div><div class=3D"line">=
        <span class=3D"k">continue</span><span class=3D"p">;</span></div><d=
iv class=3D"line">      <span class=3D"p">}</span></div><div class=3D"line"=
>    <span class=3D"p">}</span></div><div class=3D"line"></div><ins class=
=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(</span><span c=
lass=3D"n">prev_sep</span><span class=3D"p">)</span> <span class=3D"p">{</s=
pan></ins><ins class=3D"line">      <span class=3D"kt">int</span> <span cla=
ss=3D"n">j</span><span class=3D"p">;</span></ins><ins class=3D"line">      =
<span class=3D"k">for</span> <span class=3D"p">(</span><span class=3D"n">j<=
/span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=
=3D"p">;</span> <span class=3D"n">keywords</span><span class=3D"p">[</span>=
<span class=3D"n">j</span><span class=3D"p">];</span> <span class=3D"n">j</=
span><span class=3D"o">++</span><span class=3D"p">)</span> <span class=3D"p=
">{</span></ins><ins class=3D"line">        <span class=3D"kt">int</span> <=
span class=3D"n">klen</span> <span class=3D"o">=3D</span> <span class=3D"n"=
>strlen</span><span class=3D"p">(</span><span class=3D"n">keywords</span><s=
pan class=3D"p">[</span><span class=3D"n">j</span><span class=3D"p">]);</sp=
an></ins><ins class=3D"line">        <span class=3D"kt">int</span> <span cl=
ass=3D"n">kw2</span> <span class=3D"o">=3D</span> <span class=3D"n">keyword=
s</span><span class=3D"p">[</span><span class=3D"n">j</span><span class=3D"=
p">][</span><span class=3D"n">klen</span> <span class=3D"o">-</span> <span =
class=3D"mi">1</span><span class=3D"p">]</span> <span class=3D"o">=3D=3D</s=
pan> <span class=3D"sc">'|'</span><span class=3D"p">;</span></ins><ins clas=
s=3D"line">        <span class=3D"k">if</span> <span class=3D"p">(</span><s=
pan class=3D"n">kw2</span><span class=3D"p">)</span> <span class=3D"n">klen=
</span><span class=3D"o">--</span><span class=3D"p">;</span></ins><ins clas=
s=3D"line"></ins><ins class=3D"line">        <span class=3D"k">if</span> <s=
pan class=3D"p">(</span><span class=3D"o">!</span><span class=3D"n">strncmp=
</span><span class=3D"p">(</span><span class=3D"o">&amp;</span><span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">render</sp=
an><span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">],=
</span> <span class=3D"n">keywords</span><span class=3D"p">[</span><span cl=
ass=3D"n">j</span><span class=3D"p">],</span> <span class=3D"n">klen</span>=
<span class=3D"p">)</span> <span class=3D"o">&amp;&amp;</span></ins><ins cl=
ass=3D"line">            <span class=3D"n">is_separator</span><span class=
=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><s=
pan class=3D"n">render</span><span class=3D"p">[</span><span class=3D"n">i<=
/span> <span class=3D"o">+</span> <span class=3D"n">klen</span><span class=
=3D"p">]))</span> <span class=3D"p">{</span></ins><ins class=3D"line">     =
     <span class=3D"n">memset</span><span class=3D"p">(</span><span class=
=3D"o">&amp;</span><span class=3D"n">row</span><span class=3D"o">-&gt;</spa=
n><span class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i<=
/span><span class=3D"p">],</span> <span class=3D"n">kw2</span> <span class=
=3D"o">?</span> <span class=3D"n">HL_KEYWORD2</span> <span class=3D"o">:</s=
pan> <span class=3D"n">HL_KEYWORD1</span><span class=3D"p">,</span> <span c=
lass=3D"n">klen</span><span class=3D"p">);</span></ins><ins class=3D"line">=
          <span class=3D"n">i</span> <span class=3D"o">+=3D</span> <span cl=
ass=3D"n">klen</span><span class=3D"p">;</span></ins><ins class=3D"line">  =
        <span class=3D"k">break</span><span class=3D"p">;</span></ins><ins =
class=3D"line">        <span class=3D"p">}</span></ins><ins class=3D"line">=
      <span class=3D"p">}</span></ins><ins class=3D"line">      <span class=
=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">keywords</span=
><span class=3D"p">[</span><span class=3D"n">j</span><span class=3D"p">]</s=
pan> <span class=3D"o">!=3D</span> <span class=3D"nb">NULL</span><span clas=
s=3D"p">)</span> <span class=3D"p">{</span></ins><ins class=3D"line">      =
  <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <span clas=
s=3D"mi">0</span><span class=3D"p">;</span></ins><ins class=3D"line">      =
  <span class=3D"k">continue</span><span class=3D"p">;</span></ins><ins cla=
ss=3D"line">      <span class=3D"p">}</span></ins><ins class=3D"line">    <=
span class=3D"p">}</span></ins><div class=3D"line"></div><div class=3D"line=
">    <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <span =
class=3D"n">is_separator</span><span class=3D"p">(</span><span class=3D"n">=
c</span><span class=3D"p">);</span></div><div class=3D"line">    <span clas=
s=3D"n">i</span><span class=3D"o">++</span><span class=3D"p">;</span></div>=
<div class=3D"line">  <span class=3D"p">}</span></div><div class=3D"line"><=
span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line=
 folded"><span class=3D"kt">int</span> <span class=3D"nf">editorSyntaxToCol=
or</span><span class=3D"p">(</span><span class=3D"kt">int</span> <span clas=
s=3D"n">hl</span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=
=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div class=
=3D"line folded"><span class=3D"kt">void</span> <span class=3D"nf">editorSe=
lectSyntaxHighlight</span><span class=3D"p">()</span> <span class=3D"p">{</=
span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><=
div class=3D"line folded"><span class=3D"cm">/*** row operations ***/</span=
></div><div class=3D"line folded"><span class=3D"cm">/*** editor operations=
 ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** file i=
/o ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** find=
 ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** append=
 buffer ***/</span></div><div class=3D"line folded"><span class=3D"cm">/***=
 output ***/</span></div><div class=3D"line folded"><span class=3D"cm">/***=
 input ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** =
init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>First, at the top of the function we make <code>keywords</code> an alias=
 for
<code>E.syntax-&gt;keywords</code> since we=E2=80=99ll be using it a lot, a=
nd in some pretty dense
code.</p>

<p>Keywords require a separator both before and after the keyword. Otherwis=
e, the
<code>void</code> in <code>avoid</code>, <code>voided</code>, or <code>avoi=
dable</code> would be highlighted as a keyword,
which is definitely a problem we want to, uh, circumnavigate.</p>

<p>So we check <code>prev_sep</code> to make sure a separator came before t=
he keyword, before
looping through each possible keyword. For each keyword, we store the lengt=
h in
<code>klen</code> and whether it=E2=80=99s a secondary keyword in <code>kw2=
</code>, in which case we
decrement <code>klen</code> to account for the extraneous <code>|</code> ch=
aracter.</p>

<p>We then use <code>strncmp()</code> to check if the keyword exists at our=
 current position
in the text, <em>and</em> we check to see if a separator character comes af=
ter the
keyword. Since <code>\0</code> is considered a separator character, this wo=
rks if the
keyword is at the very end of the line.</p>

<p>If all that passed, then we have a keyword to highlight. We use <code>me=
mset()</code> to
highlight the whole keyword at once, highlighting it with <code>HL_KEYWORD1=
</code> or
<code>HL_KEYWORD2</code> depending on the value of <code>kw2</code>. We the=
n consume the entire
keyword by incrementing <code>i</code> by the length of the keyword. Then w=
e <code>break</code>
instead of <code>continue</code>ing, because we are in an inner loop, so we=
 have to break
out of that loop before <code>continue</code>ing the outer loop. That is wh=
y, after the
<code>for</code> loop, we check if the loop was broken out of by seeing if =
it got to the
terminating <code>NULL</code> value, and if it was broken out of, we <code>=
continue</code>.</p>
<h2 id=3D"nonprintable-characters"><a href=3D"https://viewsourcecode.org/sn=
aptoken/kilo/07.syntaxHighlighting.html#nonprintable-characters">Nonprintab=
le characters</a></h2>

<p>Before we tackle highlighting multi-line comments, let=E2=80=99s take a =
quick break
from <code>editorUpdateSyntax()</code>.</p>

<p>We=E2=80=99re going to display nonprintable characters in a more user-fr=
iendly way.
Currently, nonprintable characters completely mess up the rendering that ou=
r
editor does. Just try running <code>kilo</code> and passing itself in as an=
 argument. That
is, open the <code>kilo</code> executable file using <code>kilo</code>. And=
 try moving the cursor
around, and typing. It=E2=80=99s not pretty. Every keypress causes the term=
inal to
ding, because the audible bell character (<code>7</code>) is being printed =
out. Strings
containing terminal escape sequences in our code are being printed out as
actual escape sequences, because that=E2=80=99s how they=E2=80=99re stored =
in a raw executable.</p>

<p>To prevent all that, we=E2=80=99re going to translate nonprintable chara=
cters into
printable ones. We=E2=80=99ll render the alphabetic control characters
(<kbd>Ctrl-A</kbd> =3D <code>1</code>, <kbd>Ctrl-B</kbd> =3D <code>2</code>=
, =E2=80=A6, <kbd>Ctrl-Z</kbd> =3D
<code>26</code>) as the capital letters <code>A</code> through <code>Z</cod=
e>. We=E2=80=99ll also render the <code>0</code> byte
like a control character. <kbd>Ctrl-@</kbd> =3D <code>0</code>, so we=E2=80=
=99ll render it as an <code>@</code>
sign. Finally, any other nonprintable characters we=E2=80=99ll render as a =
question
mark (<code>?</code>). And to differentiate these characters from their pri=
ntable
counterparts, we=E2=80=99ll render them using inverted colors (black on whi=
te).</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/nonprintables/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 175</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/nonprintables">nonprintables</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><sp=
an class=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><=
span class=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"l=
ine folded"><span class=3D"cm">/*** row operations ***/</span></div><div cl=
ass=3D"line folded"><span class=3D"cm">/*** editor operations ***/</span></=
div><div class=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span>=
</div><div class=3D"line folded"><span class=3D"cm">/*** find ***/</span></=
div><div class=3D"line folded"><span class=3D"cm">/*** append buffer ***/</=
span></div><div class=3D"line"><span class=3D"cm">/*** output ***/</span></=
div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt"=
>void</span> <span class=3D"nf">editorScroll</span><span class=3D"p">()</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><d=
iv class=3D"line"></div><div class=3D"line"><span class=3D"kt">void</span> =
<span class=3D"nf">editorDrawRows</span><span class=3D"p">(</span><span cla=
ss=3D"k">struct</span> <span class=3D"n">abuf</span> <span class=3D"o">*</s=
pan><span class=3D"n">ab</span><span class=3D"p">)</span> <span class=3D"p"=
>{</span></div><div class=3D"line">  <span class=3D"kt">int</span> <span cl=
ass=3D"n">y</span><span class=3D"p">;</span></div><div class=3D"line">  <sp=
an class=3D"k">for</span> <span class=3D"p">(</span><span class=3D"n">y</sp=
an> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"=
p">;</span> <span class=3D"n">y</span> <span class=3D"o">&lt;</span> <span =
class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screenrows<=
/span><span class=3D"p">;</span> <span class=3D"n">y</span><span class=3D"o=
">++</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div =
class=3D"line">    <span class=3D"kt">int</span> <span class=3D"n">filerow<=
/span> <span class=3D"o">=3D</span> <span class=3D"n">y</span> <span class=
=3D"o">+</span> <span class=3D"n">E</span><span class=3D"p">.</span><span c=
lass=3D"n">rowoff</span><span class=3D"p">;</span></div><div class=3D"line"=
>    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n=
">filerow</span> <span class=3D"o">&gt;=3D</span> <span class=3D"n">E</span=
><span class=3D"p">.</span><span class=3D"n">numrows</span><span class=3D"p=
">)</span> <span class=3D"p">{</span></div><div class=3D"line">      <span =
class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">E</span><=
span class=3D"p">.</span><span class=3D"n">numrows</span> <span class=3D"o"=
>=3D=3D</span> <span class=3D"mi">0</span> <span class=3D"o">&amp;&amp;</sp=
an> <span class=3D"n">y</span> <span class=3D"o">=3D=3D</span> <span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screenrows</span=
> <span class=3D"o">/</span> <span class=3D"mi">3</span><span class=3D"p">)=
</span> <span class=3D"p">{</span></div><div class=3D"line">        <span c=
lass=3D"kt">char</span> <span class=3D"n">welcome</span><span class=3D"p">[=
</span><span class=3D"mi">80</span><span class=3D"p">];</span></div><div cl=
ass=3D"line">        <span class=3D"kt">int</span> <span class=3D"n">welcom=
elen</span> <span class=3D"o">=3D</span> <span class=3D"n">snprintf</span><=
span class=3D"p">(</span><span class=3D"n">welcome</span><span class=3D"p">=
,</span> <span class=3D"k">sizeof</span><span class=3D"p">(</span><span cla=
ss=3D"n">welcome</span><span class=3D"p">),</span></div><div class=3D"line"=
>          <span class=3D"s">"Kilo editor -- version %s"</span><span class=
=3D"p">,</span> <span class=3D"n">KILO_VERSION</span><span class=3D"p">);</=
span></div><div class=3D"line">        <span class=3D"k">if</span> <span cl=
ass=3D"p">(</span><span class=3D"n">welcomelen</span> <span class=3D"o">&gt=
;</span> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D=
"n">screencols</span><span class=3D"p">)</span> <span class=3D"n">welcomele=
n</span> <span class=3D"o">=3D</span> <span class=3D"n">E</span><span class=
=3D"p">.</span><span class=3D"n">screencols</span><span class=3D"p">;</span=
></div><div class=3D"line">        <span class=3D"kt">int</span> <span clas=
s=3D"n">padding</span> <span class=3D"o">=3D</span> <span class=3D"p">(</sp=
an><span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">sc=
reencols</span> <span class=3D"o">-</span> <span class=3D"n">welcomelen</sp=
an><span class=3D"p">)</span> <span class=3D"o">/</span> <span class=3D"mi"=
>2</span><span class=3D"p">;</span></div><div class=3D"line">        <span =
class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">padding</=
span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=
=3D"line">          <span class=3D"n">abAppend</span><span class=3D"p">(</s=
pan><span class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s"=
>"~"</span><span class=3D"p">,</span> <span class=3D"mi">1</span><span clas=
s=3D"p">);</span></div><div class=3D"line">          <span class=3D"n">padd=
ing</span><span class=3D"o">--</span><span class=3D"p">;</span></div><div c=
lass=3D"line">        <span class=3D"p">}</span></div><div class=3D"line"> =
       <span class=3D"k">while</span> <span class=3D"p">(</span><span class=
=3D"n">padding</span><span class=3D"o">--</span><span class=3D"p">)</span> =
<span class=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"n=
">ab</span><span class=3D"p">,</span> <span class=3D"s">" "</span><span cla=
ss=3D"p">,</span> <span class=3D"mi">1</span><span class=3D"p">);</span></d=
iv><div class=3D"line">        <span class=3D"n">abAppend</span><span class=
=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</span> <span =
class=3D"n">welcome</span><span class=3D"p">,</span> <span class=3D"n">welc=
omelen</span><span class=3D"p">);</span></div><div class=3D"line">      <sp=
an class=3D"p">}</span> <span class=3D"k">else</span> <span class=3D"p">{</=
span></div><div class=3D"line">        <span class=3D"n">abAppend</span><sp=
an class=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</span=
> <span class=3D"s">"~"</span><span class=3D"p">,</span> <span class=3D"mi"=
>1</span><span class=3D"p">);</span></div><div class=3D"line">      <span c=
lass=3D"p">}</span></div><div class=3D"line">    <span class=3D"p">}</span>=
 <span class=3D"k">else</span> <span class=3D"p">{</span></div><div class=
=3D"line">      <span class=3D"kt">int</span> <span class=3D"n">len</span> =
<span class=3D"o">=3D</span> <span class=3D"n">E</span><span class=3D"p">.<=
/span><span class=3D"n">row</span><span class=3D"p">[</span><span class=3D"=
n">filerow</span><span class=3D"p">].</span><span class=3D"n">rsize</span> =
<span class=3D"o">-</span> <span class=3D"n">E</span><span class=3D"p">.</s=
pan><span class=3D"n">coloff</span><span class=3D"p">;</span></div><div cla=
ss=3D"line">      <span class=3D"k">if</span> <span class=3D"p">(</span><sp=
an class=3D"n">len</span> <span class=3D"o">&lt;</span> <span class=3D"mi">=
0</span><span class=3D"p">)</span> <span class=3D"n">len</span> <span class=
=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span></di=
v><div class=3D"line">      <span class=3D"k">if</span> <span class=3D"p">(=
</span><span class=3D"n">len</span> <span class=3D"o">&gt;</span> <span cla=
ss=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screencols</sp=
an><span class=3D"p">)</span> <span class=3D"n">len</span> <span class=3D"o=
">=3D</span> <span class=3D"n">E</span><span class=3D"p">.</span><span clas=
s=3D"n">screencols</span><span class=3D"p">;</span></div><div class=3D"line=
">      <span class=3D"kt">char</span> <span class=3D"o">*</span><span clas=
s=3D"n">c</span> <span class=3D"o">=3D</span> <span class=3D"o">&amp;</span=
><span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">row<=
/span><span class=3D"p">[</span><span class=3D"n">filerow</span><span class=
=3D"p">].</span><span class=3D"n">render</span><span class=3D"p">[</span><s=
pan class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">coloff<=
/span><span class=3D"p">];</span></div><div class=3D"line">      <span clas=
s=3D"kt">unsigned</span> <span class=3D"kt">char</span> <span class=3D"o">*=
</span><span class=3D"n">hl</span> <span class=3D"o">=3D</span> <span class=
=3D"o">&amp;</span><span class=3D"n">E</span><span class=3D"p">.</span><spa=
n class=3D"n">row</span><span class=3D"p">[</span><span class=3D"n">filerow=
</span><span class=3D"p">].</span><span class=3D"n">hl</span><span class=3D=
"p">[</span><span class=3D"n">E</span><span class=3D"p">.</span><span class=
=3D"n">coloff</span><span class=3D"p">];</span></div><div class=3D"line">  =
    <span class=3D"kt">int</span> <span class=3D"n">current_color</span> <s=
pan class=3D"o">=3D</span> <span class=3D"o">-</span><span class=3D"mi">1</=
span><span class=3D"p">;</span></div><div class=3D"line">      <span class=
=3D"kt">int</span> <span class=3D"n">j</span><span class=3D"p">;</span></di=
v><div class=3D"line">      <span class=3D"k">for</span> <span class=3D"p">=
(</span><span class=3D"n">j</span> <span class=3D"o">=3D</span> <span class=
=3D"mi">0</span><span class=3D"p">;</span> <span class=3D"n">j</span> <span=
 class=3D"o">&lt;</span> <span class=3D"n">len</span><span class=3D"p">;</s=
pan> <span class=3D"n">j</span><span class=3D"o">++</span><span class=3D"p"=
>)</span> <span class=3D"p">{</span></div><ins class=3D"line">        <span=
 class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">iscntrl<=
/span><span class=3D"p">(</span><span class=3D"n">c</span><span class=3D"p"=
>[</span><span class=3D"n">j</span><span class=3D"p">]))</span> <span class=
=3D"p">{</span></ins><ins class=3D"line">          <span class=3D"kt">char<=
/span> <span class=3D"n">sym</span> <span class=3D"o">=3D</span> <span clas=
s=3D"p">(</span><span class=3D"n">c</span><span class=3D"p">[</span><span c=
lass=3D"n">j</span><span class=3D"p">]</span> <span class=3D"o">&lt;=3D</sp=
an> <span class=3D"mi">26</span><span class=3D"p">)</span> <span class=3D"o=
">?</span> <span class=3D"sc">'@'</span> <span class=3D"o">+</span> <span c=
lass=3D"n">c</span><span class=3D"p">[</span><span class=3D"n">j</span><spa=
n class=3D"p">]</span> <span class=3D"o">:</span> <span class=3D"sc">'?'</s=
pan><span class=3D"p">;</span></ins><ins class=3D"line">          <span cla=
ss=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"n">ab</spa=
n><span class=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\=
x1b</span><span class=3D"s">[7m"</span><span class=3D"p">,</span> <span cla=
ss=3D"mi">4</span><span class=3D"p">);</span></ins><ins class=3D"line">    =
      <span class=3D"n">abAppend</span><span class=3D"p">(</span><span clas=
s=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"o">&amp;</span><=
span class=3D"n">sym</span><span class=3D"p">,</span> <span class=3D"mi">1<=
/span><span class=3D"p">);</span></ins><ins class=3D"line">          <span =
class=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"n">ab</=
span><span class=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se=
">\x1b</span><span class=3D"s">[m"</span><span class=3D"p">,</span> <span c=
lass=3D"mi">3</span><span class=3D"p">);</span></ins><ins class=3D"line">  =
      <span class=3D"p">}</span> <span class=3D"k">else</span> <span class=
=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">hl</span><span=
 class=3D"p">[</span><span class=3D"n">j</span><span class=3D"p">]</span> <=
span class=3D"o">=3D=3D</span> <span class=3D"n">HL_NORMAL</span><span clas=
s=3D"p">)</span> <span class=3D"p">{</span></ins><div class=3D"line">      =
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n"=
>current_color</span> <span class=3D"o">!=3D</span> <span class=3D"o">-</sp=
an><span class=3D"mi">1</span><span class=3D"p">)</span> <span class=3D"p">=
{</span></div><div class=3D"line">            <span class=3D"n">abAppend</s=
pan><span class=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">=
,</span> <span class=3D"s">"</span><span class=3D"se">\x1b</span><span clas=
s=3D"s">[39m"</span><span class=3D"p">,</span> <span class=3D"mi">5</span><=
span class=3D"p">);</span></div><div class=3D"line">            <span class=
=3D"n">current_color</span> <span class=3D"o">=3D</span> <span class=3D"o">=
-</span><span class=3D"mi">1</span><span class=3D"p">;</span></div><div cla=
ss=3D"line">          <span class=3D"p">}</span></div><div class=3D"line"> =
         <span class=3D"n">abAppend</span><span class=3D"p">(</span><span c=
lass=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"o">&amp;</spa=
n><span class=3D"n">c</span><span class=3D"p">[</span><span class=3D"n">j</=
span><span class=3D"p">],</span> <span class=3D"mi">1</span><span class=3D"=
p">);</span></div><div class=3D"line">        <span class=3D"p">}</span> <s=
pan class=3D"k">else</span> <span class=3D"p">{</span></div><div class=3D"l=
ine">          <span class=3D"kt">int</span> <span class=3D"n">color</span>=
 <span class=3D"o">=3D</span> <span class=3D"n">editorSyntaxToColor</span><=
span class=3D"p">(</span><span class=3D"n">hl</span><span class=3D"p">[</sp=
an><span class=3D"n">j</span><span class=3D"p">]);</span></div><div class=
=3D"line">          <span class=3D"k">if</span> <span class=3D"p">(</span><=
span class=3D"n">color</span> <span class=3D"o">!=3D</span> <span class=3D"=
n">current_color</span><span class=3D"p">)</span> <span class=3D"p">{</span=
></div><div class=3D"line">            <span class=3D"n">current_color</spa=
n> <span class=3D"o">=3D</span> <span class=3D"n">color</span><span class=
=3D"p">;</span></div><div class=3D"line">            <span class=3D"kt">cha=
r</span> <span class=3D"n">buf</span><span class=3D"p">[</span><span class=
=3D"mi">16</span><span class=3D"p">];</span></div><div class=3D"line">     =
       <span class=3D"kt">int</span> <span class=3D"n">clen</span> <span cl=
ass=3D"o">=3D</span> <span class=3D"n">snprintf</span><span class=3D"p">(</=
span><span class=3D"n">buf</span><span class=3D"p">,</span> <span class=3D"=
k">sizeof</span><span class=3D"p">(</span><span class=3D"n">buf</span><span=
 class=3D"p">),</span> <span class=3D"s">"</span><span class=3D"se">\x1b</s=
pan><span class=3D"s">[%dm"</span><span class=3D"p">,</span> <span class=3D=
"n">color</span><span class=3D"p">);</span></div><div class=3D"line">      =
      <span class=3D"n">abAppend</span><span class=3D"p">(</span><span clas=
s=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"n">buf</span><sp=
an class=3D"p">,</span> <span class=3D"n">clen</span><span class=3D"p">);</=
span></div><div class=3D"line">          <span class=3D"p">}</span></div><d=
iv class=3D"line">          <span class=3D"n">abAppend</span><span class=3D=
"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</span> <span cla=
ss=3D"o">&amp;</span><span class=3D"n">c</span><span class=3D"p">[</span><s=
pan class=3D"n">j</span><span class=3D"p">],</span> <span class=3D"mi">1</s=
pan><span class=3D"p">);</span></div><div class=3D"line">        <span clas=
s=3D"p">}</span></div><div class=3D"line">      <span class=3D"p">}</span><=
/div><div class=3D"line">      <span class=3D"n">abAppend</span><span class=
=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</span> <span =
class=3D"s">"</span><span class=3D"se">\x1b</span><span class=3D"s">[39m"</=
span><span class=3D"p">,</span> <span class=3D"mi">5</span><span class=3D"p=
">);</span></div><div class=3D"line">    <span class=3D"p">}</span></div><d=
iv class=3D"line"></div><div class=3D"line">    <span class=3D"n">abAppend<=
/span><span class=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p=
">,</span> <span class=3D"s">"</span><span class=3D"se">\x1b</span><span cl=
ass=3D"s">[K"</span><span class=3D"p">,</span> <span class=3D"mi">3</span><=
span class=3D"p">);</span></div><div class=3D"line">    <span class=3D"n">a=
bAppend</span><span class=3D"p">(</span><span class=3D"n">ab</span><span cl=
ass=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\r\n</span>=
<span class=3D"s">"</span><span class=3D"p">,</span> <span class=3D"mi">2</=
span><span class=3D"p">);</span></div><div class=3D"line">  <span class=3D"=
p">}</span></div><div class=3D"line"><span class=3D"p">}</span></div><div c=
lass=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void</spa=
n> <span class=3D"n">editorDrawStatusBar</span><span class=3D"p">(</span><s=
pan class=3D"k">struct</span> <span class=3D"n">abuf</span> <span class=3D"=
o">*</span><span class=3D"n">ab</span><span class=3D"p">)</span> <span clas=
s=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"li=
ne"></div><div class=3D"line folded"><span class=3D"kt">void</span> <span c=
lass=3D"n">editorDrawMessageBar</span><span class=3D"p">(</span><span class=
=3D"k">struct</span> <span class=3D"n">abuf</span> <span class=3D"o">*</spa=
n><span class=3D"n">ab</span><span class=3D"p">)</span> <span class=3D"p">{=
</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div=
><div class=3D"line folded"><span class=3D"kt">void</span> <span class=3D"n=
">editorRefreshScreen</span><span class=3D"p">()</span> <span class=3D"p">{=
</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div=
><div class=3D"line folded"><span class=3D"kt">void</span> <span class=3D"n=
">editorSetStatusMessage</span><span class=3D"p">(</span><span class=3D"k">=
const</span> <span class=3D"kt">char</span> <span class=3D"o">*</span><span=
 class=3D"n">fmt</span><span class=3D"p">,</span> <span class=3D"p">...)</s=
pan> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><=
div class=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/***=
 input ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** =
init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>We use <code>iscntrl()</code> to check if the current character is a con=
trol character. If
so, we translate it into a printable character by adding its value to <code=
>'@'</code> (in
ASCII, the capital letters of the alphabet come after the <code>@</code> ch=
aracter), or
using the <code>'?'</code> character if it=E2=80=99s not in the alphabetic =
range.</p>

<p>We then use the <code>&lt;esc&gt;[7m</code> escape sequence to switch to=
 inverted colors before
printing the translated symbol. We use <code>&lt;esc&gt;[m</code> to turn o=
ff inverted colors
again.</p>

<p>Unfortunately, <code>&lt;esc&gt;[m</code> turns off <em>all</em> text fo=
rmatting, including colors. So
let=E2=80=99s print the escape sequence for the current color afterwards.</=
p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/nonprintables-fix-color/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 176</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/nonprintables-fix-color">nonprintables-fix-color</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><sp=
an class=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><=
span class=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"l=
ine folded"><span class=3D"cm">/*** row operations ***/</span></div><div cl=
ass=3D"line folded"><span class=3D"cm">/*** editor operations ***/</span></=
div><div class=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span>=
</div><div class=3D"line folded"><span class=3D"cm">/*** find ***/</span></=
div><div class=3D"line folded"><span class=3D"cm">/*** append buffer ***/</=
span></div><div class=3D"line"><span class=3D"cm">/*** output ***/</span></=
div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt"=
>void</span> <span class=3D"nf">editorScroll</span><span class=3D"p">()</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><d=
iv class=3D"line"></div><div class=3D"line"><span class=3D"kt">void</span> =
<span class=3D"nf">editorDrawRows</span><span class=3D"p">(</span><span cla=
ss=3D"k">struct</span> <span class=3D"n">abuf</span> <span class=3D"o">*</s=
pan><span class=3D"n">ab</span><span class=3D"p">)</span> <span class=3D"p"=
>{</span></div><div class=3D"line">  <span class=3D"kt">int</span> <span cl=
ass=3D"n">y</span><span class=3D"p">;</span></div><div class=3D"line">  <sp=
an class=3D"k">for</span> <span class=3D"p">(</span><span class=3D"n">y</sp=
an> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"=
p">;</span> <span class=3D"n">y</span> <span class=3D"o">&lt;</span> <span =
class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screenrows<=
/span><span class=3D"p">;</span> <span class=3D"n">y</span><span class=3D"o=
">++</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div =
class=3D"line">    <span class=3D"kt">int</span> <span class=3D"n">filerow<=
/span> <span class=3D"o">=3D</span> <span class=3D"n">y</span> <span class=
=3D"o">+</span> <span class=3D"n">E</span><span class=3D"p">.</span><span c=
lass=3D"n">rowoff</span><span class=3D"p">;</span></div><div class=3D"line"=
>    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n=
">filerow</span> <span class=3D"o">&gt;=3D</span> <span class=3D"n">E</span=
><span class=3D"p">.</span><span class=3D"n">numrows</span><span class=3D"p=
">)</span> <span class=3D"p">{</span></div><div class=3D"line">      <span =
class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">E</span><=
span class=3D"p">.</span><span class=3D"n">numrows</span> <span class=3D"o"=
>=3D=3D</span> <span class=3D"mi">0</span> <span class=3D"o">&amp;&amp;</sp=
an> <span class=3D"n">y</span> <span class=3D"o">=3D=3D</span> <span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screenrows</span=
> <span class=3D"o">/</span> <span class=3D"mi">3</span><span class=3D"p">)=
</span> <span class=3D"p">{</span></div><div class=3D"line">        <span c=
lass=3D"kt">char</span> <span class=3D"n">welcome</span><span class=3D"p">[=
</span><span class=3D"mi">80</span><span class=3D"p">];</span></div><div cl=
ass=3D"line">        <span class=3D"kt">int</span> <span class=3D"n">welcom=
elen</span> <span class=3D"o">=3D</span> <span class=3D"n">snprintf</span><=
span class=3D"p">(</span><span class=3D"n">welcome</span><span class=3D"p">=
,</span> <span class=3D"k">sizeof</span><span class=3D"p">(</span><span cla=
ss=3D"n">welcome</span><span class=3D"p">),</span></div><div class=3D"line"=
>          <span class=3D"s">"Kilo editor -- version %s"</span><span class=
=3D"p">,</span> <span class=3D"n">KILO_VERSION</span><span class=3D"p">);</=
span></div><div class=3D"line">        <span class=3D"k">if</span> <span cl=
ass=3D"p">(</span><span class=3D"n">welcomelen</span> <span class=3D"o">&gt=
;</span> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D=
"n">screencols</span><span class=3D"p">)</span> <span class=3D"n">welcomele=
n</span> <span class=3D"o">=3D</span> <span class=3D"n">E</span><span class=
=3D"p">.</span><span class=3D"n">screencols</span><span class=3D"p">;</span=
></div><div class=3D"line">        <span class=3D"kt">int</span> <span clas=
s=3D"n">padding</span> <span class=3D"o">=3D</span> <span class=3D"p">(</sp=
an><span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">sc=
reencols</span> <span class=3D"o">-</span> <span class=3D"n">welcomelen</sp=
an><span class=3D"p">)</span> <span class=3D"o">/</span> <span class=3D"mi"=
>2</span><span class=3D"p">;</span></div><div class=3D"line">        <span =
class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">padding</=
span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=
=3D"line">          <span class=3D"n">abAppend</span><span class=3D"p">(</s=
pan><span class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s"=
>"~"</span><span class=3D"p">,</span> <span class=3D"mi">1</span><span clas=
s=3D"p">);</span></div><div class=3D"line">          <span class=3D"n">padd=
ing</span><span class=3D"o">--</span><span class=3D"p">;</span></div><div c=
lass=3D"line">        <span class=3D"p">}</span></div><div class=3D"line"> =
       <span class=3D"k">while</span> <span class=3D"p">(</span><span class=
=3D"n">padding</span><span class=3D"o">--</span><span class=3D"p">)</span> =
<span class=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"n=
">ab</span><span class=3D"p">,</span> <span class=3D"s">" "</span><span cla=
ss=3D"p">,</span> <span class=3D"mi">1</span><span class=3D"p">);</span></d=
iv><div class=3D"line">        <span class=3D"n">abAppend</span><span class=
=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</span> <span =
class=3D"n">welcome</span><span class=3D"p">,</span> <span class=3D"n">welc=
omelen</span><span class=3D"p">);</span></div><div class=3D"line">      <sp=
an class=3D"p">}</span> <span class=3D"k">else</span> <span class=3D"p">{</=
span></div><div class=3D"line">        <span class=3D"n">abAppend</span><sp=
an class=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</span=
> <span class=3D"s">"~"</span><span class=3D"p">,</span> <span class=3D"mi"=
>1</span><span class=3D"p">);</span></div><div class=3D"line">      <span c=
lass=3D"p">}</span></div><div class=3D"line">    <span class=3D"p">}</span>=
 <span class=3D"k">else</span> <span class=3D"p">{</span></div><div class=
=3D"line">      <span class=3D"kt">int</span> <span class=3D"n">len</span> =
<span class=3D"o">=3D</span> <span class=3D"n">E</span><span class=3D"p">.<=
/span><span class=3D"n">row</span><span class=3D"p">[</span><span class=3D"=
n">filerow</span><span class=3D"p">].</span><span class=3D"n">rsize</span> =
<span class=3D"o">-</span> <span class=3D"n">E</span><span class=3D"p">.</s=
pan><span class=3D"n">coloff</span><span class=3D"p">;</span></div><div cla=
ss=3D"line">      <span class=3D"k">if</span> <span class=3D"p">(</span><sp=
an class=3D"n">len</span> <span class=3D"o">&lt;</span> <span class=3D"mi">=
0</span><span class=3D"p">)</span> <span class=3D"n">len</span> <span class=
=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span></di=
v><div class=3D"line">      <span class=3D"k">if</span> <span class=3D"p">(=
</span><span class=3D"n">len</span> <span class=3D"o">&gt;</span> <span cla=
ss=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">screencols</sp=
an><span class=3D"p">)</span> <span class=3D"n">len</span> <span class=3D"o=
">=3D</span> <span class=3D"n">E</span><span class=3D"p">.</span><span clas=
s=3D"n">screencols</span><span class=3D"p">;</span></div><div class=3D"line=
">      <span class=3D"kt">char</span> <span class=3D"o">*</span><span clas=
s=3D"n">c</span> <span class=3D"o">=3D</span> <span class=3D"o">&amp;</span=
><span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">row<=
/span><span class=3D"p">[</span><span class=3D"n">filerow</span><span class=
=3D"p">].</span><span class=3D"n">render</span><span class=3D"p">[</span><s=
pan class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">coloff<=
/span><span class=3D"p">];</span></div><div class=3D"line">      <span clas=
s=3D"kt">unsigned</span> <span class=3D"kt">char</span> <span class=3D"o">*=
</span><span class=3D"n">hl</span> <span class=3D"o">=3D</span> <span class=
=3D"o">&amp;</span><span class=3D"n">E</span><span class=3D"p">.</span><spa=
n class=3D"n">row</span><span class=3D"p">[</span><span class=3D"n">filerow=
</span><span class=3D"p">].</span><span class=3D"n">hl</span><span class=3D=
"p">[</span><span class=3D"n">E</span><span class=3D"p">.</span><span class=
=3D"n">coloff</span><span class=3D"p">];</span></div><div class=3D"line">  =
    <span class=3D"kt">int</span> <span class=3D"n">current_color</span> <s=
pan class=3D"o">=3D</span> <span class=3D"o">-</span><span class=3D"mi">1</=
span><span class=3D"p">;</span></div><div class=3D"line">      <span class=
=3D"kt">int</span> <span class=3D"n">j</span><span class=3D"p">;</span></di=
v><div class=3D"line">      <span class=3D"k">for</span> <span class=3D"p">=
(</span><span class=3D"n">j</span> <span class=3D"o">=3D</span> <span class=
=3D"mi">0</span><span class=3D"p">;</span> <span class=3D"n">j</span> <span=
 class=3D"o">&lt;</span> <span class=3D"n">len</span><span class=3D"p">;</s=
pan> <span class=3D"n">j</span><span class=3D"o">++</span><span class=3D"p"=
>)</span> <span class=3D"p">{</span></div><div class=3D"line">        <span=
 class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">iscntrl<=
/span><span class=3D"p">(</span><span class=3D"n">c</span><span class=3D"p"=
>[</span><span class=3D"n">j</span><span class=3D"p">]))</span> <span class=
=3D"p">{</span></div><div class=3D"line">          <span class=3D"kt">char<=
/span> <span class=3D"n">sym</span> <span class=3D"o">=3D</span> <span clas=
s=3D"p">(</span><span class=3D"n">c</span><span class=3D"p">[</span><span c=
lass=3D"n">j</span><span class=3D"p">]</span> <span class=3D"o">&lt;=3D</sp=
an> <span class=3D"mi">26</span><span class=3D"p">)</span> <span class=3D"o=
">?</span> <span class=3D"sc">'@'</span> <span class=3D"o">+</span> <span c=
lass=3D"n">c</span><span class=3D"p">[</span><span class=3D"n">j</span><spa=
n class=3D"p">]</span> <span class=3D"o">:</span> <span class=3D"sc">'?'</s=
pan><span class=3D"p">;</span></div><div class=3D"line">          <span cla=
ss=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"n">ab</spa=
n><span class=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\=
x1b</span><span class=3D"s">[7m"</span><span class=3D"p">,</span> <span cla=
ss=3D"mi">4</span><span class=3D"p">);</span></div><div class=3D"line">    =
      <span class=3D"n">abAppend</span><span class=3D"p">(</span><span clas=
s=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"o">&amp;</span><=
span class=3D"n">sym</span><span class=3D"p">,</span> <span class=3D"mi">1<=
/span><span class=3D"p">);</span></div><div class=3D"line">          <span =
class=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"n">ab</=
span><span class=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se=
">\x1b</span><span class=3D"s">[m"</span><span class=3D"p">,</span> <span c=
lass=3D"mi">3</span><span class=3D"p">);</span></div><ins class=3D"line">  =
        <span class=3D"k">if</span> <span class=3D"p">(</span><span class=
=3D"n">current_color</span> <span class=3D"o">!=3D</span> <span class=3D"o"=
>-</span><span class=3D"mi">1</span><span class=3D"p">)</span> <span class=
=3D"p">{</span></ins><ins class=3D"line">            <span class=3D"kt">cha=
r</span> <span class=3D"n">buf</span><span class=3D"p">[</span><span class=
=3D"mi">16</span><span class=3D"p">];</span></ins><ins class=3D"line">     =
       <span class=3D"kt">int</span> <span class=3D"n">clen</span> <span cl=
ass=3D"o">=3D</span> <span class=3D"n">snprintf</span><span class=3D"p">(</=
span><span class=3D"n">buf</span><span class=3D"p">,</span> <span class=3D"=
k">sizeof</span><span class=3D"p">(</span><span class=3D"n">buf</span><span=
 class=3D"p">),</span> <span class=3D"s">"</span><span class=3D"se">\x1b</s=
pan><span class=3D"s">[%dm"</span><span class=3D"p">,</span> <span class=3D=
"n">current_color</span><span class=3D"p">);</span></ins><ins class=3D"line=
">            <span class=3D"n">abAppend</span><span class=3D"p">(</span><s=
pan class=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"n">buf</=
span><span class=3D"p">,</span> <span class=3D"n">clen</span><span class=3D=
"p">);</span></ins><ins class=3D"line">          <span class=3D"p">}</span>=
</ins><div class=3D"line">        <span class=3D"p">}</span> <span class=3D=
"k">else</span> <span class=3D"k">if</span> <span class=3D"p">(</span><span=
 class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">j</span><=
span class=3D"p">]</span> <span class=3D"o">=3D=3D</span> <span class=3D"n"=
>HL_NORMAL</span><span class=3D"p">)</span> <span class=3D"p">{</span></div=
><div class=3D"line">          <span class=3D"k">if</span> <span class=3D"p=
">(</span><span class=3D"n">current_color</span> <span class=3D"o">!=3D</sp=
an> <span class=3D"o">-</span><span class=3D"mi">1</span><span class=3D"p">=
)</span> <span class=3D"p">{</span></div><div class=3D"line">            <s=
pan class=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"n">=
ab</span><span class=3D"p">,</span> <span class=3D"s">"</span><span class=
=3D"se">\x1b</span><span class=3D"s">[39m"</span><span class=3D"p">,</span>=
 <span class=3D"mi">5</span><span class=3D"p">);</span></div><div class=3D"=
line">            <span class=3D"n">current_color</span> <span class=3D"o">=
=3D</span> <span class=3D"o">-</span><span class=3D"mi">1</span><span class=
=3D"p">;</span></div><div class=3D"line">          <span class=3D"p">}</spa=
n></div><div class=3D"line">          <span class=3D"n">abAppend</span><spa=
n class=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</span>=
 <span class=3D"o">&amp;</span><span class=3D"n">c</span><span class=3D"p">=
[</span><span class=3D"n">j</span><span class=3D"p">],</span> <span class=
=3D"mi">1</span><span class=3D"p">);</span></div><div class=3D"line">      =
  <span class=3D"p">}</span> <span class=3D"k">else</span> <span class=3D"p=
">{</span></div><div class=3D"line">          <span class=3D"kt">int</span>=
 <span class=3D"n">color</span> <span class=3D"o">=3D</span> <span class=3D=
"n">editorSyntaxToColor</span><span class=3D"p">(</span><span class=3D"n">h=
l</span><span class=3D"p">[</span><span class=3D"n">j</span><span class=3D"=
p">]);</span></div><div class=3D"line">          <span class=3D"k">if</span=
> <span class=3D"p">(</span><span class=3D"n">color</span> <span class=3D"o=
">!=3D</span> <span class=3D"n">current_color</span><span class=3D"p">)</sp=
an> <span class=3D"p">{</span></div><div class=3D"line">            <span c=
lass=3D"n">current_color</span> <span class=3D"o">=3D</span> <span class=3D=
"n">color</span><span class=3D"p">;</span></div><div class=3D"line">       =
     <span class=3D"kt">char</span> <span class=3D"n">buf</span><span class=
=3D"p">[</span><span class=3D"mi">16</span><span class=3D"p">];</span></div=
><div class=3D"line">            <span class=3D"kt">int</span> <span class=
=3D"n">clen</span> <span class=3D"o">=3D</span> <span class=3D"n">snprintf<=
/span><span class=3D"p">(</span><span class=3D"n">buf</span><span class=3D"=
p">,</span> <span class=3D"k">sizeof</span><span class=3D"p">(</span><span =
class=3D"n">buf</span><span class=3D"p">),</span> <span class=3D"s">"</span=
><span class=3D"se">\x1b</span><span class=3D"s">[%dm"</span><span class=3D=
"p">,</span> <span class=3D"n">color</span><span class=3D"p">);</span></div=
><div class=3D"line">            <span class=3D"n">abAppend</span><span cla=
ss=3D"p">(</span><span class=3D"n">ab</span><span class=3D"p">,</span> <spa=
n class=3D"n">buf</span><span class=3D"p">,</span> <span class=3D"n">clen</=
span><span class=3D"p">);</span></div><div class=3D"line">          <span c=
lass=3D"p">}</span></div><div class=3D"line">          <span class=3D"n">ab=
Append</span><span class=3D"p">(</span><span class=3D"n">ab</span><span cla=
ss=3D"p">,</span> <span class=3D"o">&amp;</span><span class=3D"n">c</span><=
span class=3D"p">[</span><span class=3D"n">j</span><span class=3D"p">],</sp=
an> <span class=3D"mi">1</span><span class=3D"p">);</span></div><div class=
=3D"line">        <span class=3D"p">}</span></div><div class=3D"line">     =
 <span class=3D"p">}</span></div><div class=3D"line">      <span class=3D"n=
">abAppend</span><span class=3D"p">(</span><span class=3D"n">ab</span><span=
 class=3D"p">,</span> <span class=3D"s">"</span><span class=3D"se">\x1b</sp=
an><span class=3D"s">[39m"</span><span class=3D"p">,</span> <span class=3D"=
mi">5</span><span class=3D"p">);</span></div><div class=3D"line">    <span =
class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line">   =
 <span class=3D"n">abAppend</span><span class=3D"p">(</span><span class=3D"=
n">ab</span><span class=3D"p">,</span> <span class=3D"s">"</span><span clas=
s=3D"se">\x1b</span><span class=3D"s">[K"</span><span class=3D"p">,</span> =
<span class=3D"mi">3</span><span class=3D"p">);</span></div><div class=3D"l=
ine">    <span class=3D"n">abAppend</span><span class=3D"p">(</span><span c=
lass=3D"n">ab</span><span class=3D"p">,</span> <span class=3D"s">"</span><s=
pan class=3D"se">\r\n</span><span class=3D"s">"</span><span class=3D"p">,</=
span> <span class=3D"mi">2</span><span class=3D"p">);</span></div><div clas=
s=3D"line">  <span class=3D"p">}</span></div><div class=3D"line"><span clas=
s=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line folded">=
<span class=3D"kt">void</span> <span class=3D"nf">editorDrawStatusBar</span=
><span class=3D"p">(</span><span class=3D"k">struct</span> <span class=3D"n=
">abuf</span> <span class=3D"o">*</span><span class=3D"n">ab</span><span cl=
ass=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}=
</span></div><div class=3D"line"></div><div class=3D"line folded"><span cla=
ss=3D"kt">void</span> <span class=3D"nf">editorDrawMessageBar</span><span c=
lass=3D"p">(</span><span class=3D"k">struct</span> <span class=3D"n">abuf</=
span> <span class=3D"o">*</span><span class=3D"n">ab</span><span class=3D"p=
">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span><=
/div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt=
">void</span> <span class=3D"nf">editorRefreshScreen</span><span class=3D"p=
">()</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span>=
</div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"k=
t">void</span> <span class=3D"nf">editorSetStatusMessage</span><span class=
=3D"p">(</span><span class=3D"k">const</span> <span class=3D"kt">char</span=
> <span class=3D"o">*</span><span class=3D"n">fmt</span><span class=3D"p">,=
</span> <span class=3D"p">...)</span> <span class=3D"p">{</span> =E2=80=A6 =
<span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"lin=
e folded"><span class=3D"cm">/*** input ***/</span></div><div class=3D"line=
 folded"><span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>You can test the coloring of nonprintables by pressing <kbd>Ctrl-A</kbd>=
,
<kbd>Ctrl-B</kbd>, and so on to insert those control characters into string=
s or
comments, and you should see that they get the same color as the surroundin=
g
characters, just inverted.</p>
<h2 id=3D"colorful-multiline-comments"><a href=3D"https://viewsourcecode.or=
g/snaptoken/kilo/07.syntaxHighlighting.html#colorful-multiline-comments">Co=
lorful multiline comments</a></h2>

<p>Okay, we have one last feature to implement: multi-line comment highligh=
ting.
Let=E2=80=99s start by adding <code>HL_MLCOMMENT</code> to the <code>editor=
Highlight</code> enum.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/hl-multiline-comments/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 177</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/hl-multiline-comments">hl-multiline-comments</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line"><span class=3D"c=
m">/*** defines ***/</span></div><div class=3D"line"></div><div class=3D"li=
ne"><span class=3D"cp">#define KILO_VERSION "0.0.1"</span></div><div class=
=3D"line"><span class=3D"cp">#define KILO_TAB_STOP 8</span></div><div class=
=3D"line"><span class=3D"cp">#define KILO_QUIT_TIMES 3</span></div><div cla=
ss=3D"line"></div><div class=3D"line"><span class=3D"cp">#define CTRL_KEY(k=
) ((k) &amp; 0x1f)</span></div><div class=3D"line"></div><div class=3D"line=
 folded"><span class=3D"k">enum</span> <span class=3D"n">editorKey</span> <=
span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">};</span></div><div c=
lass=3D"line"></div><div class=3D"line"><span class=3D"k">enum</span> <span=
 class=3D"n">editorHighlight</span> <span class=3D"p">{</span></div><div cl=
ass=3D"line">  <span class=3D"n">HL_NORMAL</span> <span class=3D"o">=3D</sp=
an> <span class=3D"mi">0</span><span class=3D"p">,</span></div><div class=
=3D"line">  <span class=3D"n">HL_COMMENT</span><span class=3D"p">,</span></=
div><ins class=3D"line">  <span class=3D"n">HL_MLCOMMENT</span><span class=
=3D"p">,</span></ins><div class=3D"line">  <span class=3D"n">HL_KEYWORD1</s=
pan><span class=3D"p">,</span></div><div class=3D"line">  <span class=3D"n"=
>HL_KEYWORD2</span><span class=3D"p">,</span></div><div class=3D"line">  <s=
pan class=3D"n">HL_STRING</span><span class=3D"p">,</span></div><div class=
=3D"line">  <span class=3D"n">HL_NUMBER</span><span class=3D"p">,</span></d=
iv><div class=3D"line">  <span class=3D"n">HL_MATCH</span></div><div class=
=3D"line"><span class=3D"p">};</span></div><div class=3D"line"></div><div c=
lass=3D"line"><span class=3D"cp">#define HL_HIGHLIGHT_NUMBERS (1&lt;&lt;0)<=
/span></div><div class=3D"line"><span class=3D"cp">#define HL_HIGHLIGHT_STR=
INGS (1&lt;&lt;1)</span></div><div class=3D"line"></div><div class=3D"line =
folded"><span class=3D"cm">/*** data ***/</span></div><div class=3D"line fo=
lded"><span class=3D"cm">/*** filetypes ***/</span></div><div class=3D"line=
 folded"><span class=3D"cm">/*** prototypes ***/</span></div><div class=3D"=
line folded"><span class=3D"cm">/*** terminal ***/</span></div><div class=
=3D"line"><span class=3D"cm">/*** syntax highlighting ***/</span></div><div=
 class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">int</sp=
an> <span class=3D"nf">is_separator</span><span class=3D"p">(</span><span c=
lass=3D"kt">int</span> <span class=3D"n">c</span><span class=3D"p">)</span>=
 <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div =
class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void</sp=
an> <span class=3D"nf">editorUpdateSyntax</span><span class=3D"p">(</span><=
span class=3D"n">erow</span> <span class=3D"o">*</span><span class=3D"n">ro=
w</span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <sp=
an class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line">=
<span class=3D"kt">int</span> <span class=3D"nf">editorSyntaxToColor</span>=
<span class=3D"p">(</span><span class=3D"kt">int</span> <span class=3D"n">h=
l</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div cla=
ss=3D"line">  <span class=3D"k">switch</span> <span class=3D"p">(</span><sp=
an class=3D"n">hl</span><span class=3D"p">)</span> <span class=3D"p">{</spa=
n></div><ins class=3D"line">    <span class=3D"k">case</span> <span class=
=3D"n">HL_COMMENT</span><span class=3D"p">:</span></ins><ins class=3D"line"=
>    <span class=3D"k">case</span> <span class=3D"n">HL_MLCOMMENT</span><sp=
an class=3D"p">:</span> <span class=3D"k">return</span> <span class=3D"mi">=
36</span><span class=3D"p">;</span></ins><div class=3D"line">    <span clas=
s=3D"k">case</span> <span class=3D"n">HL_KEYWORD1</span><span class=3D"p">:=
</span> <span class=3D"k">return</span> <span class=3D"mi">33</span><span c=
lass=3D"p">;</span></div><div class=3D"line">    <span class=3D"k">case</sp=
an> <span class=3D"n">HL_KEYWORD2</span><span class=3D"p">:</span> <span cl=
ass=3D"k">return</span> <span class=3D"mi">32</span><span class=3D"p">;</sp=
an></div><div class=3D"line">    <span class=3D"k">case</span> <span class=
=3D"n">HL_STRING</span><span class=3D"p">:</span> <span class=3D"k">return<=
/span> <span class=3D"mi">35</span><span class=3D"p">;</span></div><div cla=
ss=3D"line">    <span class=3D"k">case</span> <span class=3D"n">HL_NUMBER</=
span><span class=3D"p">:</span> <span class=3D"k">return</span> <span class=
=3D"mi">31</span><span class=3D"p">;</span></div><div class=3D"line">    <s=
pan class=3D"k">case</span> <span class=3D"n">HL_MATCH</span><span class=3D=
"p">:</span> <span class=3D"k">return</span> <span class=3D"mi">34</span><s=
pan class=3D"p">;</span></div><div class=3D"line">    <span class=3D"nl">de=
fault:</span> <span class=3D"k">return</span> <span class=3D"mi">37</span><=
span class=3D"p">;</span></div><div class=3D"line">  <span class=3D"p">}</s=
pan></div><div class=3D"line"><span class=3D"p">}</span></div><div class=3D=
"line"></div><div class=3D"line folded"><span class=3D"kt">void</span> <spa=
n class=3D"nf">editorSelectSyntaxHighlight</span><span class=3D"p">()</span=
> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div=
 class=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/*** ro=
w operations ***/</span></div><div class=3D"line folded"><span class=3D"cm"=
>/*** editor operations ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** file i/o ***/</span></div><div class=3D"line folded"><span=
 class=3D"cm">/*** find ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** append buffer ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** output ***/</span></div><div class=3D"line folded">=
<span class=3D"cm">/*** input ***/</span></div><div class=3D"line folded"><=
span class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>We=E2=80=99ll highlight multi-line comments to be the same color as sing=
le-line
comments (cyan).</p>

<p>Now we=E2=80=99ll add two strings to <code>editorSyntax</code>: <code>mu=
ltiline_comment_start</code> and
<code>multiline_comment_end</code>. In C, these will be <code>"/*"</code> a=
nd <code>"*/"</code>.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/mcs-mce/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 178</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/mcs-mce">mcs-mce</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line"><span class=3D"=
cm">/*** data ***/</span></div><div class=3D"line"></div><div class=3D"line=
"><span class=3D"k">struct</span> <span class=3D"n">editorSyntax</span> <sp=
an class=3D"p">{</span></div><div class=3D"line">  <span class=3D"kt">char<=
/span> <span class=3D"o">*</span><span class=3D"n">filetype</span><span cla=
ss=3D"p">;</span></div><div class=3D"line">  <span class=3D"kt">char</span>=
 <span class=3D"o">**</span><span class=3D"n">filematch</span><span class=
=3D"p">;</span></div><div class=3D"line">  <span class=3D"kt">char</span> <=
span class=3D"o">**</span><span class=3D"n">keywords</span><span class=3D"p=
">;</span></div><div class=3D"line">  <span class=3D"kt">char</span> <span =
class=3D"o">*</span><span class=3D"n">singleline_comment_start</span><span =
class=3D"p">;</span></div><ins class=3D"line">  <span class=3D"kt">char</sp=
an> <span class=3D"o">*</span><span class=3D"n">multiline_comment_start</sp=
an><span class=3D"p">;</span></ins><ins class=3D"line">  <span class=3D"kt"=
>char</span> <span class=3D"o">*</span><span class=3D"n">multiline_comment_=
end</span><span class=3D"p">;</span></ins><div class=3D"line">  <span class=
=3D"kt">int</span> <span class=3D"n">flags</span><span class=3D"p">;</span>=
</div><div class=3D"line"><span class=3D"p">};</span></div><div class=3D"li=
ne"></div><div class=3D"line folded"><span class=3D"k">typedef</span> <span=
 class=3D"k">struct</span> <span class=3D"n">erow</span> <span class=3D"p">=
{</span> =E2=80=A6 <span class=3D"p">}</span> <span class=3D"n">erow</span>=
<span class=3D"p">;</span></div><div class=3D"line"></div><div class=3D"lin=
e folded"><span class=3D"k">struct</span> <span class=3D"n">editorConfig</s=
pan> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">};</span></div>=
<div class=3D"line"></div><div class=3D"line"><span class=3D"k">struct</spa=
n> <span class=3D"n">editorConfig</span> <span class=3D"n">E</span><span cl=
ass=3D"p">;</span></div><div class=3D"line"></div><div class=3D"line"><span=
 class=3D"cm">/*** filetypes ***/</span></div><div class=3D"line"></div><di=
v class=3D"line"><span class=3D"kt">char</span> <span class=3D"o">*</span><=
span class=3D"n">C_HL_extensions</span><span class=3D"p">[]</span> <span cl=
ass=3D"o">=3D</span> <span class=3D"p">{</span> <span class=3D"s">".c"</spa=
n><span class=3D"p">,</span> <span class=3D"s">".h"</span><span class=3D"p"=
>,</span> <span class=3D"s">".cpp"</span><span class=3D"p">,</span> <span c=
lass=3D"nb">NULL</span> <span class=3D"p">};</span></div><div class=3D"line=
 folded"><span class=3D"kt">char</span> <span class=3D"o">*</span><span cla=
ss=3D"n">C_HL_keywords</span><span class=3D"p">[]</span> <span class=3D"o">=
=3D</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">};</span>=
</div><div class=3D"line"></div><div class=3D"line"><span class=3D"k">struc=
t</span> <span class=3D"n">editorSyntax</span> <span class=3D"n">HLDB</span=
><span class=3D"p">[]</span> <span class=3D"o">=3D</span> <span class=3D"p"=
>{</span></div><div class=3D"line">  <span class=3D"p">{</span></div><div c=
lass=3D"line">    <span class=3D"s">"c"</span><span class=3D"p">,</span></d=
iv><div class=3D"line">    <span class=3D"n">C_HL_extensions</span><span cl=
ass=3D"p">,</span></div><div class=3D"line">    <span class=3D"n">C_HL_keyw=
ords</span><span class=3D"p">,</span></div><ins class=3D"line">    <span cl=
ass=3D"s">"//"</span><span class=3D"p">,</span> <span class=3D"s">"/*"</spa=
n><span class=3D"p">,</span> <span class=3D"s">"*/"</span><span class=3D"p"=
>,</span></ins><div class=3D"line">    <span class=3D"n">HL_HIGHLIGHT_NUMBE=
RS</span> <span class=3D"o">|</span> <span class=3D"n">HL_HIGHLIGHT_STRINGS=
</span></div><div class=3D"line">  <span class=3D"p">},</span></div><div cl=
ass=3D"line"><span class=3D"p">};</span></div><div class=3D"line"></div><di=
v class=3D"line"><span class=3D"cp">#define HLDB_ENTRIES (sizeof(HLDB) / si=
zeof(HLDB[0]))</span></div><div class=3D"line"></div><div class=3D"line fol=
ded"><span class=3D"cm">/*** prototypes ***/</span></div><div class=3D"line=
 folded"><span class=3D"cm">/*** terminal ***/</span></div><div class=3D"li=
ne folded"><span class=3D"cm">/*** syntax highlighting ***/</span></div><di=
v class=3D"line folded"><span class=3D"cm">/*** row operations ***/</span><=
/div><div class=3D"line folded"><span class=3D"cm">/*** editor operations *=
**/</span></div><div class=3D"line folded"><span class=3D"cm">/*** file i/o=
 ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** find *=
**/</span></div><div class=3D"line folded"><span class=3D"cm">/*** append b=
uffer ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** o=
utput ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** i=
nput ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** in=
it ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>Now let=E2=80=99s open <code>editorUpdateSyntax()</code> up once again. =
We=E2=80=99ll add <code>mcs</code> and <code>mce</code>
aliases that are analogous to the <code>scs</code> alias we already have fo=
r single-line
comments. We=E2=80=99ll also add <code>mcs_len</code> and <code>mce_len</co=
de>.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/mcs-mce-len/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 179</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/mcs-mce-len">mcs-mce-len</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><sp=
an class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line"></=
div><div class=3D"line folded"><span class=3D"kt">int</span> <span class=3D=
"nf">is_separator</span><span class=3D"p">(</span><span class=3D"kt">int</s=
pan> <span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p"=
>{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">ed=
itorUpdateSyntax</span><span class=3D"p">(</span><span class=3D"n">erow</sp=
an> <span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p"=
>)</span> <span class=3D"p">{</span></div><div class=3D"line">  <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span> =
<span class=3D"o">=3D</span> <span class=3D"n">realloc</span><span class=3D=
"p">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span=
 class=3D"n">hl</span><span class=3D"p">,</span> <span class=3D"n">row</spa=
n><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line">  <span class=3D"n">memset</span>=
<span class=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&g=
t;</span><span class=3D"n">hl</span><span class=3D"p">,</span> <span class=
=3D"n">HL_NORMAL</span><span class=3D"p">,</span> <span class=3D"n">row</sp=
an><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line"></div><div class=3D"line">  <span=
 class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">E</span>=
<span class=3D"p">.</span><span class=3D"n">syntax</span> <span class=3D"o"=
>=3D=3D</span> <span class=3D"nb">NULL</span><span class=3D"p">)</span> <sp=
an class=3D"k">return</span><span class=3D"p">;</span></div><div class=3D"l=
ine"></div><div class=3D"line">  <span class=3D"kt">char</span> <span class=
=3D"o">**</span><span class=3D"n">keywords</span> <span class=3D"o">=3D</sp=
an> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">s=
yntax</span><span class=3D"o">-&gt;</span><span class=3D"n">keywords</span>=
<span class=3D"p">;</span></div><div class=3D"line"></div><div class=3D"lin=
e">  <span class=3D"kt">char</span> <span class=3D"o">*</span><span class=
=3D"n">scs</span> <span class=3D"o">=3D</span> <span class=3D"n">E</span><s=
pan class=3D"p">.</span><span class=3D"n">syntax</span><span class=3D"o">-&=
gt;</span><span class=3D"n">singleline_comment_start</span><span class=3D"p=
">;</span></div><ins class=3D"line">  <span class=3D"kt">char</span> <span =
class=3D"o">*</span><span class=3D"n">mcs</span> <span class=3D"o">=3D</spa=
n> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">sy=
ntax</span><span class=3D"o">-&gt;</span><span class=3D"n">multiline_commen=
t_start</span><span class=3D"p">;</span></ins><ins class=3D"line">  <span c=
lass=3D"kt">char</span> <span class=3D"o">*</span><span class=3D"n">mce</sp=
an> <span class=3D"o">=3D</span> <span class=3D"n">E</span><span class=3D"p=
">.</span><span class=3D"n">syntax</span><span class=3D"o">-&gt;</span><spa=
n class=3D"n">multiline_comment_end</span><span class=3D"p">;</span></ins><=
div class=3D"line"></div><div class=3D"line">  <span class=3D"kt">int</span=
> <span class=3D"n">scs_len</span> <span class=3D"o">=3D</span> <span class=
=3D"n">scs</span> <span class=3D"o">?</span> <span class=3D"n">strlen</span=
><span class=3D"p">(</span><span class=3D"n">scs</span><span class=3D"p">)<=
/span> <span class=3D"o">:</span> <span class=3D"mi">0</span><span class=3D=
"p">;</span></div><ins class=3D"line">  <span class=3D"kt">int</span> <span=
 class=3D"n">mcs_len</span> <span class=3D"o">=3D</span> <span class=3D"n">=
mcs</span> <span class=3D"o">?</span> <span class=3D"n">strlen</span><span =
class=3D"p">(</span><span class=3D"n">mcs</span><span class=3D"p">)</span> =
<span class=3D"o">:</span> <span class=3D"mi">0</span><span class=3D"p">;</=
span></ins><ins class=3D"line">  <span class=3D"kt">int</span> <span class=
=3D"n">mce_len</span> <span class=3D"o">=3D</span> <span class=3D"n">mce</s=
pan> <span class=3D"o">?</span> <span class=3D"n">strlen</span><span class=
=3D"p">(</span><span class=3D"n">mce</span><span class=3D"p">)</span> <span=
 class=3D"o">:</span> <span class=3D"mi">0</span><span class=3D"p">;</span>=
</ins><div class=3D"line"></div><div class=3D"line">  <span class=3D"kt">in=
t</span> <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <sp=
an class=3D"mi">1</span><span class=3D"p">;</span></div><div class=3D"line"=
>  <span class=3D"kt">int</span> <span class=3D"n">in_string</span> <span c=
lass=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span>=
</div><div class=3D"line"></div><div class=3D"line">  <span class=3D"kt">in=
t</span> <span class=3D"n">i</span> <span class=3D"o">=3D</span> <span clas=
s=3D"mi">0</span><span class=3D"p">;</span></div><div class=3D"line">  <spa=
n class=3D"k">while</span> <span class=3D"p">(</span><span class=3D"n">i</s=
pan> <span class=3D"o">&lt;</span> <span class=3D"n">row</span><span class=
=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=3D"p">)</span>=
 <span class=3D"p">{</span></div><div class=3D"line">    <span class=3D"kt"=
>char</span> <span class=3D"n">c</span> <span class=3D"o">=3D</span> <span =
class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">rende=
r</span><span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"=
p">];</span></div><div class=3D"line">    <span class=3D"kt">unsigned</span=
> <span class=3D"kt">char</span> <span class=3D"n">prev_hl</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"p">(</span><span class=3D"n">i</span> <s=
pan class=3D"o">&gt;</span> <span class=3D"mi">0</span><span class=3D"p">)<=
/span> <span class=3D"o">?</span> <span class=3D"n">row</span><span class=
=3D"o">-&gt;</span><span class=3D"n">hl</span><span class=3D"p">[</span><sp=
an class=3D"n">i</span> <span class=3D"o">-</span> <span class=3D"mi">1</sp=
an><span class=3D"p">]</span> <span class=3D"o">:</span> <span class=3D"n">=
HL_NORMAL</span><span class=3D"p">;</span></div><div class=3D"line"></div><=
div class=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(</spa=
n><span class=3D"n">scs_len</span> <span class=3D"o">&amp;&amp;</span> <spa=
n class=3D"o">!</span><span class=3D"n">in_string</span><span class=3D"p">)=
</span> <span class=3D"p">{</span></div><div class=3D"line">      <span cla=
ss=3D"k">if</span> <span class=3D"p">(</span><span class=3D"o">!</span><spa=
n class=3D"n">strncmp</span><span class=3D"p">(</span><span class=3D"o">&am=
p;</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span cl=
ass=3D"n">render</span><span class=3D"p">[</span><span class=3D"n">i</span>=
<span class=3D"p">],</span> <span class=3D"n">scs</span><span class=3D"p">,=
</span> <span class=3D"n">scs_len</span><span class=3D"p">))</span> <span c=
lass=3D"p">{</span></div><div class=3D"line">        <span class=3D"n">mems=
et</span><span class=3D"p">(</span><span class=3D"o">&amp;</span><span clas=
s=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span>=
<span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">],</s=
pan> <span class=3D"n">HL_COMMENT</span><span class=3D"p">,</span> <span cl=
ass=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">rsize</=
span> <span class=3D"o">-</span> <span class=3D"n">i</span><span class=3D"p=
">);</span></div><div class=3D"line">        <span class=3D"k">break</span>=
<span class=3D"p">;</span></div><div class=3D"line">      <span class=3D"p"=
>}</span></div><div class=3D"line">    <span class=3D"p">}</span></div><div=
 class=3D"line"></div><div class=3D"line">    <span class=3D"k">if</span> <=
span class=3D"p">(</span><span class=3D"n">E</span><span class=3D"p">.</spa=
n><span class=3D"n">syntax</span><span class=3D"o">-&gt;</span><span class=
=3D"n">flags</span> <span class=3D"o">&amp;</span> <span class=3D"n">HL_HIG=
HLIGHT_STRINGS</span><span class=3D"p">)</span> <span class=3D"p">{</span><=
/div><div class=3D"line">      <span class=3D"k">if</span> <span class=3D"p=
">(</span><span class=3D"n">in_string</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span></div><div class=3D"line">        <span class=3D"n">r=
ow</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><span cla=
ss=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</span> <span=
 class=3D"o">=3D</span> <span class=3D"n">HL_STRING</span><span class=3D"p"=
>;</span></div><div class=3D"line">        <span class=3D"k">if</span> <spa=
n class=3D"p">(</span><span class=3D"n">c</span> <span class=3D"o">=3D=3D</=
span> <span class=3D"sc">'\\'</span> <span class=3D"o">&amp;&amp;</span> <s=
pan class=3D"n">i</span> <span class=3D"o">+</span> <span class=3D"mi">1</s=
pan> <span class=3D"o">&lt;</span> <span class=3D"n">row</span><span class=
=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=3D"p">)</span>=
 <span class=3D"p">{</span></div><div class=3D"line">          <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><=
span class=3D"p">[</span><span class=3D"n">i</span> <span class=3D"o">+</sp=
an> <span class=3D"mi">1</span><span class=3D"p">]</span> <span class=3D"o"=
>=3D</span> <span class=3D"n">HL_STRING</span><span class=3D"p">;</span></d=
iv><div class=3D"line">          <span class=3D"n">i</span> <span class=3D"=
o">+=3D</span> <span class=3D"mi">2</span><span class=3D"p">;</span></div><=
div class=3D"line">          <span class=3D"k">continue</span><span class=
=3D"p">;</span></div><div class=3D"line">        <span class=3D"p">}</span>=
</div><div class=3D"line">        <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"n">c</span> <span class=3D"o">=3D=3D</span> <=
span class=3D"n">in_string</span><span class=3D"p">)</span> <span class=3D"=
n">in_string</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span=
><span class=3D"p">;</span></div><div class=3D"line">        <span class=3D=
"n">i</span><span class=3D"o">++</span><span class=3D"p">;</span></div><div=
 class=3D"line">        <span class=3D"n">prev_sep</span> <span class=3D"o"=
>=3D</span> <span class=3D"mi">1</span><span class=3D"p">;</span></div><div=
 class=3D"line">        <span class=3D"k">continue</span><span class=3D"p">=
;</span></div><div class=3D"line">      <span class=3D"p">}</span> <span cl=
ass=3D"k">else</span> <span class=3D"p">{</span></div><div class=3D"line"> =
       <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D=
"n">c</span> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'"'</span> =
<span class=3D"o">||</span> <span class=3D"n">c</span> <span class=3D"o">=
=3D=3D</span> <span class=3D"sc">'\''</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span></div><div class=3D"line">          <span class=3D"n"=
>in_string</span> <span class=3D"o">=3D</span> <span class=3D"n">c</span><s=
pan class=3D"p">;</span></div><div class=3D"line">          <span class=3D"=
n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><span=
 class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</span> <=
span class=3D"o">=3D</span> <span class=3D"n">HL_STRING</span><span class=
=3D"p">;</span></div><div class=3D"line">          <span class=3D"n">i</spa=
n><span class=3D"o">++</span><span class=3D"p">;</span></div><div class=3D"=
line">          <span class=3D"k">continue</span><span class=3D"p">;</span>=
</div><div class=3D"line">        <span class=3D"p">}</span></div><div clas=
s=3D"line">      <span class=3D"p">}</span></div><div class=3D"line">    <s=
pan class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line"=
>    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n=
">E</span><span class=3D"p">.</span><span class=3D"n">syntax</span><span cl=
ass=3D"o">-&gt;</span><span class=3D"n">flags</span> <span class=3D"o">&amp=
;</span> <span class=3D"n">HL_HIGHLIGHT_NUMBERS</span><span class=3D"p">)</=
span> <span class=3D"p">{</span></div><div class=3D"line">      <span class=
=3D"k">if</span> <span class=3D"p">((</span><span class=3D"n">isdigit</span=
><span class=3D"p">(</span><span class=3D"n">c</span><span class=3D"p">)</s=
pan> <span class=3D"o">&amp;&amp;</span> <span class=3D"p">(</span><span cl=
ass=3D"n">prev_sep</span> <span class=3D"o">||</span> <span class=3D"n">pre=
v_hl</span> <span class=3D"o">=3D=3D</span> <span class=3D"n">HL_NUMBER</sp=
an><span class=3D"p">))</span> <span class=3D"o">||</span></div><div class=
=3D"line">          <span class=3D"p">(</span><span class=3D"n">c</span> <s=
pan class=3D"o">=3D=3D</span> <span class=3D"sc">'.'</span> <span class=3D"=
o">&amp;&amp;</span> <span class=3D"n">prev_hl</span> <span class=3D"o">=3D=
=3D</span> <span class=3D"n">HL_NUMBER</span><span class=3D"p">))</span> <s=
pan class=3D"p">{</span></div><div class=3D"line">        <span class=3D"n"=
>row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><span c=
lass=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</span> <sp=
an class=3D"o">=3D</span> <span class=3D"n">HL_NUMBER</span><span class=3D"=
p">;</span></div><div class=3D"line">        <span class=3D"n">i</span><spa=
n class=3D"o">++</span><span class=3D"p">;</span></div><div class=3D"line">=
        <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <spa=
n class=3D"mi">0</span><span class=3D"p">;</span></div><div class=3D"line">=
        <span class=3D"k">continue</span><span class=3D"p">;</span></div><d=
iv class=3D"line">      <span class=3D"p">}</span></div><div class=3D"line"=
>    <span class=3D"p">}</span></div><div class=3D"line"></div><div class=
=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(</span><span c=
lass=3D"n">prev_sep</span><span class=3D"p">)</span> <span class=3D"p">{</s=
pan></div><div class=3D"line">      <span class=3D"kt">int</span> <span cla=
ss=3D"n">j</span><span class=3D"p">;</span></div><div class=3D"line">      =
<span class=3D"k">for</span> <span class=3D"p">(</span><span class=3D"n">j<=
/span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=
=3D"p">;</span> <span class=3D"n">keywords</span><span class=3D"p">[</span>=
<span class=3D"n">j</span><span class=3D"p">];</span> <span class=3D"n">j</=
span><span class=3D"o">++</span><span class=3D"p">)</span> <span class=3D"p=
">{</span></div><div class=3D"line">        <span class=3D"kt">int</span> <=
span class=3D"n">klen</span> <span class=3D"o">=3D</span> <span class=3D"n"=
>strlen</span><span class=3D"p">(</span><span class=3D"n">keywords</span><s=
pan class=3D"p">[</span><span class=3D"n">j</span><span class=3D"p">]);</sp=
an></div><div class=3D"line">        <span class=3D"kt">int</span> <span cl=
ass=3D"n">kw2</span> <span class=3D"o">=3D</span> <span class=3D"n">keyword=
s</span><span class=3D"p">[</span><span class=3D"n">j</span><span class=3D"=
p">][</span><span class=3D"n">klen</span> <span class=3D"o">-</span> <span =
class=3D"mi">1</span><span class=3D"p">]</span> <span class=3D"o">=3D=3D</s=
pan> <span class=3D"sc">'|'</span><span class=3D"p">;</span></div><div clas=
s=3D"line">        <span class=3D"k">if</span> <span class=3D"p">(</span><s=
pan class=3D"n">kw2</span><span class=3D"p">)</span> <span class=3D"n">klen=
</span><span class=3D"o">--</span><span class=3D"p">;</span></div><div clas=
s=3D"line"></div><div class=3D"line">        <span class=3D"k">if</span> <s=
pan class=3D"p">(</span><span class=3D"o">!</span><span class=3D"n">strncmp=
</span><span class=3D"p">(</span><span class=3D"o">&amp;</span><span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">render</sp=
an><span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">],=
</span> <span class=3D"n">keywords</span><span class=3D"p">[</span><span cl=
ass=3D"n">j</span><span class=3D"p">],</span> <span class=3D"n">klen</span>=
<span class=3D"p">)</span> <span class=3D"o">&amp;&amp;</span></div><div cl=
ass=3D"line">            <span class=3D"n">is_separator</span><span class=
=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><s=
pan class=3D"n">render</span><span class=3D"p">[</span><span class=3D"n">i<=
/span> <span class=3D"o">+</span> <span class=3D"n">klen</span><span class=
=3D"p">]))</span> <span class=3D"p">{</span></div><div class=3D"line">     =
     <span class=3D"n">memset</span><span class=3D"p">(</span><span class=
=3D"o">&amp;</span><span class=3D"n">row</span><span class=3D"o">-&gt;</spa=
n><span class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i<=
/span><span class=3D"p">],</span> <span class=3D"n">kw2</span> <span class=
=3D"o">?</span> <span class=3D"n">HL_KEYWORD2</span> <span class=3D"o">:</s=
pan> <span class=3D"n">HL_KEYWORD1</span><span class=3D"p">,</span> <span c=
lass=3D"n">klen</span><span class=3D"p">);</span></div><div class=3D"line">=
          <span class=3D"n">i</span> <span class=3D"o">+=3D</span> <span cl=
ass=3D"n">klen</span><span class=3D"p">;</span></div><div class=3D"line">  =
        <span class=3D"k">break</span><span class=3D"p">;</span></div><div =
class=3D"line">        <span class=3D"p">}</span></div><div class=3D"line">=
      <span class=3D"p">}</span></div><div class=3D"line">      <span class=
=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">keywords</span=
><span class=3D"p">[</span><span class=3D"n">j</span><span class=3D"p">]</s=
pan> <span class=3D"o">!=3D</span> <span class=3D"nb">NULL</span><span clas=
s=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line">      =
  <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <span clas=
s=3D"mi">0</span><span class=3D"p">;</span></div><div class=3D"line">      =
  <span class=3D"k">continue</span><span class=3D"p">;</span></div><div cla=
ss=3D"line">      <span class=3D"p">}</span></div><div class=3D"line">    <=
span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line=
">    <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <span =
class=3D"n">is_separator</span><span class=3D"p">(</span><span class=3D"n">=
c</span><span class=3D"p">);</span></div><div class=3D"line">    <span clas=
s=3D"n">i</span><span class=3D"o">++</span><span class=3D"p">;</span></div>=
<div class=3D"line">  <span class=3D"p">}</span></div><div class=3D"line"><=
span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line=
 folded"><span class=3D"kt">int</span> <span class=3D"nf">editorSyntaxToCol=
or</span><span class=3D"p">(</span><span class=3D"kt">int</span> <span clas=
s=3D"n">hl</span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=
=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div class=
=3D"line folded"><span class=3D"kt">void</span> <span class=3D"nf">editorSe=
lectSyntaxHighlight</span><span class=3D"p">()</span> <span class=3D"p">{</=
span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><=
div class=3D"line folded"><span class=3D"cm">/*** row operations ***/</span=
></div><div class=3D"line folded"><span class=3D"cm">/*** editor operations=
 ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** file i=
/o ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** find=
 ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** append=
 buffer ***/</span></div><div class=3D"line folded"><span class=3D"cm">/***=
 output ***/</span></div><div class=3D"line folded"><span class=3D"cm">/***=
 input ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** =
init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>Now for the highlighting code. We won=E2=80=99t worry about multiple lin=
es just yet.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/syntax-mlcomment/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 180</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/syntax-mlcomment">syntax-mlcomment</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><sp=
an class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line"></=
div><div class=3D"line folded"><span class=3D"kt">int</span> <span class=3D=
"nf">is_separator</span><span class=3D"p">(</span><span class=3D"kt">int</s=
pan> <span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p"=
>{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">ed=
itorUpdateSyntax</span><span class=3D"p">(</span><span class=3D"n">erow</sp=
an> <span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p"=
>)</span> <span class=3D"p">{</span></div><div class=3D"line">  <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span> =
<span class=3D"o">=3D</span> <span class=3D"n">realloc</span><span class=3D=
"p">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span=
 class=3D"n">hl</span><span class=3D"p">,</span> <span class=3D"n">row</spa=
n><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line">  <span class=3D"n">memset</span>=
<span class=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&g=
t;</span><span class=3D"n">hl</span><span class=3D"p">,</span> <span class=
=3D"n">HL_NORMAL</span><span class=3D"p">,</span> <span class=3D"n">row</sp=
an><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line"></div><div class=3D"line">  <span=
 class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">E</span>=
<span class=3D"p">.</span><span class=3D"n">syntax</span> <span class=3D"o"=
>=3D=3D</span> <span class=3D"nb">NULL</span><span class=3D"p">)</span> <sp=
an class=3D"k">return</span><span class=3D"p">;</span></div><div class=3D"l=
ine"></div><div class=3D"line">  <span class=3D"kt">char</span> <span class=
=3D"o">**</span><span class=3D"n">keywords</span> <span class=3D"o">=3D</sp=
an> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">s=
yntax</span><span class=3D"o">-&gt;</span><span class=3D"n">keywords</span>=
<span class=3D"p">;</span></div><div class=3D"line"></div><div class=3D"lin=
e">  <span class=3D"kt">char</span> <span class=3D"o">*</span><span class=
=3D"n">scs</span> <span class=3D"o">=3D</span> <span class=3D"n">E</span><s=
pan class=3D"p">.</span><span class=3D"n">syntax</span><span class=3D"o">-&=
gt;</span><span class=3D"n">singleline_comment_start</span><span class=3D"p=
">;</span></div><div class=3D"line">  <span class=3D"kt">char</span> <span =
class=3D"o">*</span><span class=3D"n">mcs</span> <span class=3D"o">=3D</spa=
n> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">sy=
ntax</span><span class=3D"o">-&gt;</span><span class=3D"n">multiline_commen=
t_start</span><span class=3D"p">;</span></div><div class=3D"line">  <span c=
lass=3D"kt">char</span> <span class=3D"o">*</span><span class=3D"n">mce</sp=
an> <span class=3D"o">=3D</span> <span class=3D"n">E</span><span class=3D"p=
">.</span><span class=3D"n">syntax</span><span class=3D"o">-&gt;</span><spa=
n class=3D"n">multiline_comment_end</span><span class=3D"p">;</span></div><=
div class=3D"line"></div><div class=3D"line">  <span class=3D"kt">int</span=
> <span class=3D"n">scs_len</span> <span class=3D"o">=3D</span> <span class=
=3D"n">scs</span> <span class=3D"o">?</span> <span class=3D"n">strlen</span=
><span class=3D"p">(</span><span class=3D"n">scs</span><span class=3D"p">)<=
/span> <span class=3D"o">:</span> <span class=3D"mi">0</span><span class=3D=
"p">;</span></div><div class=3D"line">  <span class=3D"kt">int</span> <span=
 class=3D"n">mcs_len</span> <span class=3D"o">=3D</span> <span class=3D"n">=
mcs</span> <span class=3D"o">?</span> <span class=3D"n">strlen</span><span =
class=3D"p">(</span><span class=3D"n">mcs</span><span class=3D"p">)</span> =
<span class=3D"o">:</span> <span class=3D"mi">0</span><span class=3D"p">;</=
span></div><div class=3D"line">  <span class=3D"kt">int</span> <span class=
=3D"n">mce_len</span> <span class=3D"o">=3D</span> <span class=3D"n">mce</s=
pan> <span class=3D"o">?</span> <span class=3D"n">strlen</span><span class=
=3D"p">(</span><span class=3D"n">mce</span><span class=3D"p">)</span> <span=
 class=3D"o">:</span> <span class=3D"mi">0</span><span class=3D"p">;</span>=
</div><div class=3D"line"></div><div class=3D"line">  <span class=3D"kt">in=
t</span> <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <sp=
an class=3D"mi">1</span><span class=3D"p">;</span></div><div class=3D"line"=
>  <span class=3D"kt">int</span> <span class=3D"n">in_string</span> <span c=
lass=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span>=
</div><ins class=3D"line">  <span class=3D"kt">int</span> <span class=3D"n"=
>in_comment</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span>=
<span class=3D"p">;</span></ins><div class=3D"line"></div><div class=3D"lin=
e">  <span class=3D"kt">int</span> <span class=3D"n">i</span> <span class=
=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span></di=
v><div class=3D"line">  <span class=3D"k">while</span> <span class=3D"p">(<=
/span><span class=3D"n">i</span> <span class=3D"o">&lt;</span> <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">rsize</spa=
n><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"=
line">    <span class=3D"kt">char</span> <span class=3D"n">c</span> <span c=
lass=3D"o">=3D</span> <span class=3D"n">row</span><span class=3D"o">-&gt;</=
span><span class=3D"n">render</span><span class=3D"p">[</span><span class=
=3D"n">i</span><span class=3D"p">];</span></div><div class=3D"line">    <sp=
an class=3D"kt">unsigned</span> <span class=3D"kt">char</span> <span class=
=3D"n">prev_hl</span> <span class=3D"o">=3D</span> <span class=3D"p">(</spa=
n><span class=3D"n">i</span> <span class=3D"o">&gt;</span> <span class=3D"m=
i">0</span><span class=3D"p">)</span> <span class=3D"o">?</span> <span clas=
s=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span>=
<span class=3D"p">[</span><span class=3D"n">i</span> <span class=3D"o">-</s=
pan> <span class=3D"mi">1</span><span class=3D"p">]</span> <span class=3D"o=
">:</span> <span class=3D"n">HL_NORMAL</span><span class=3D"p">;</span></di=
v><div class=3D"line"></div><div class=3D"line">    <span class=3D"k">if</s=
pan> <span class=3D"p">(</span><span class=3D"n">scs_len</span> <span class=
=3D"o">&amp;&amp;</span> <span class=3D"o">!</span><span class=3D"n">in_str=
ing</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div c=
lass=3D"line">      <span class=3D"k">if</span> <span class=3D"p">(</span><=
span class=3D"o">!</span><span class=3D"n">strncmp</span><span class=3D"p">=
(</span><span class=3D"o">&amp;</span><span class=3D"n">row</span><span cla=
ss=3D"o">-&gt;</span><span class=3D"n">render</span><span class=3D"p">[</sp=
an><span class=3D"n">i</span><span class=3D"p">],</span> <span class=3D"n">=
scs</span><span class=3D"p">,</span> <span class=3D"n">scs_len</span><span =
class=3D"p">))</span> <span class=3D"p">{</span></div><div class=3D"line"> =
       <span class=3D"n">memset</span><span class=3D"p">(</span><span class=
=3D"o">&amp;</span><span class=3D"n">row</span><span class=3D"o">-&gt;</spa=
n><span class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i<=
/span><span class=3D"p">],</span> <span class=3D"n">HL_COMMENT</span><span =
class=3D"p">,</span> <span class=3D"n">row</span><span class=3D"o">-&gt;</s=
pan><span class=3D"n">rsize</span> <span class=3D"o">-</span> <span class=
=3D"n">i</span><span class=3D"p">);</span></div><div class=3D"line">       =
 <span class=3D"k">break</span><span class=3D"p">;</span></div><div class=
=3D"line">      <span class=3D"p">}</span></div><div class=3D"line">    <sp=
an class=3D"p">}</span></div><div class=3D"line"></div><ins class=3D"line">=
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n"=
>mcs_len</span> <span class=3D"o">&amp;&amp;</span> <span class=3D"n">mce_l=
en</span> <span class=3D"o">&amp;&amp;</span> <span class=3D"o">!</span><sp=
an class=3D"n">in_string</span><span class=3D"p">)</span> <span class=3D"p"=
>{</span></ins><ins class=3D"line">      <span class=3D"k">if</span> <span =
class=3D"p">(</span><span class=3D"n">in_comment</span><span class=3D"p">)<=
/span> <span class=3D"p">{</span></ins><ins class=3D"line">        <span cl=
ass=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</spa=
n><span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</=
span> <span class=3D"o">=3D</span> <span class=3D"n">HL_MLCOMMENT</span><sp=
an class=3D"p">;</span></ins><ins class=3D"line">        <span class=3D"k">=
if</span> <span class=3D"p">(</span><span class=3D"o">!</span><span class=
=3D"n">strncmp</span><span class=3D"p">(</span><span class=3D"o">&amp;</spa=
n><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"=
n">render</span><span class=3D"p">[</span><span class=3D"n">i</span><span c=
lass=3D"p">],</span> <span class=3D"n">mce</span><span class=3D"p">,</span>=
 <span class=3D"n">mce_len</span><span class=3D"p">))</span> <span class=3D=
"p">{</span></ins><ins class=3D"line">          <span class=3D"n">memset</s=
pan><span class=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D"=
n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><span=
 class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">],</span> =
<span class=3D"n">HL_MLCOMMENT</span><span class=3D"p">,</span> <span class=
=3D"n">mce_len</span><span class=3D"p">);</span></ins><ins class=3D"line"> =
         <span class=3D"n">i</span> <span class=3D"o">+=3D</span> <span cla=
ss=3D"n">mce_len</span><span class=3D"p">;</span></ins><ins class=3D"line">=
          <span class=3D"n">in_comment</span> <span class=3D"o">=3D</span> =
<span class=3D"mi">0</span><span class=3D"p">;</span></ins><ins class=3D"li=
ne">          <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</span=
> <span class=3D"mi">1</span><span class=3D"p">;</span></ins><ins class=3D"=
line">          <span class=3D"k">continue</span><span class=3D"p">;</span>=
</ins><ins class=3D"line">        <span class=3D"p">}</span> <span class=3D=
"k">else</span> <span class=3D"p">{</span></ins><ins class=3D"line">       =
   <span class=3D"n">i</span><span class=3D"o">++</span><span class=3D"p">;=
</span></ins><ins class=3D"line">          <span class=3D"k">continue</span=
><span class=3D"p">;</span></ins><ins class=3D"line">        <span class=3D=
"p">}</span></ins><ins class=3D"line">      <span class=3D"p">}</span> <spa=
n class=3D"k">else</span> <span class=3D"k">if</span> <span class=3D"p">(</=
span><span class=3D"o">!</span><span class=3D"n">strncmp</span><span class=
=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D"n">row</span><s=
pan class=3D"o">-&gt;</span><span class=3D"n">render</span><span class=3D"p=
">[</span><span class=3D"n">i</span><span class=3D"p">],</span> <span class=
=3D"n">mcs</span><span class=3D"p">,</span> <span class=3D"n">mcs_len</span=
><span class=3D"p">))</span> <span class=3D"p">{</span></ins><ins class=3D"=
line">        <span class=3D"n">memset</span><span class=3D"p">(</span><spa=
n class=3D"o">&amp;</span><span class=3D"n">row</span><span class=3D"o">-&g=
t;</span><span class=3D"n">hl</span><span class=3D"p">[</span><span class=
=3D"n">i</span><span class=3D"p">],</span> <span class=3D"n">HL_MLCOMMENT</=
span><span class=3D"p">,</span> <span class=3D"n">mcs_len</span><span class=
=3D"p">);</span></ins><ins class=3D"line">        <span class=3D"n">i</span=
> <span class=3D"o">+=3D</span> <span class=3D"n">mcs_len</span><span class=
=3D"p">;</span></ins><ins class=3D"line">        <span class=3D"n">in_comme=
nt</span> <span class=3D"o">=3D</span> <span class=3D"mi">1</span><span cla=
ss=3D"p">;</span></ins><ins class=3D"line">        <span class=3D"k">contin=
ue</span><span class=3D"p">;</span></ins><ins class=3D"line">      <span cl=
ass=3D"p">}</span></ins><ins class=3D"line">    <span class=3D"p">}</span><=
/ins><div class=3D"line"></div><div class=3D"line">    <span class=3D"k">if=
</span> <span class=3D"p">(</span><span class=3D"n">E</span><span class=3D"=
p">.</span><span class=3D"n">syntax</span><span class=3D"o">-&gt;</span><sp=
an class=3D"n">flags</span> <span class=3D"o">&amp;</span> <span class=3D"n=
">HL_HIGHLIGHT_STRINGS</span><span class=3D"p">)</span> <span class=3D"p">{=
</span></div><div class=3D"line">      <span class=3D"k">if</span> <span cl=
ass=3D"p">(</span><span class=3D"n">in_string</span><span class=3D"p">)</sp=
an> <span class=3D"p">{</span></div><div class=3D"line">        <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><=
span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</spa=
n> <span class=3D"o">=3D</span> <span class=3D"n">HL_STRING</span><span cla=
ss=3D"p">;</span></div><div class=3D"line">        <span class=3D"k">if</sp=
an> <span class=3D"p">(</span><span class=3D"n">c</span> <span class=3D"o">=
=3D=3D</span> <span class=3D"sc">'\\'</span> <span class=3D"o">&amp;&amp;</=
span> <span class=3D"n">i</span> <span class=3D"o">+</span> <span class=3D"=
mi">1</span> <span class=3D"o">&lt;</span> <span class=3D"n">row</span><spa=
n class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=3D"p">)=
</span> <span class=3D"p">{</span></div><div class=3D"line">          <span=
 class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</=
span><span class=3D"p">[</span><span class=3D"n">i</span> <span class=3D"o"=
>+</span> <span class=3D"mi">1</span><span class=3D"p">]</span> <span class=
=3D"o">=3D</span> <span class=3D"n">HL_STRING</span><span class=3D"p">;</sp=
an></div><div class=3D"line">          <span class=3D"n">i</span> <span cla=
ss=3D"o">+=3D</span> <span class=3D"mi">2</span><span class=3D"p">;</span><=
/div><div class=3D"line">          <span class=3D"k">continue</span><span c=
lass=3D"p">;</span></div><div class=3D"line">        <span class=3D"p">}</s=
pan></div><div class=3D"line">        <span class=3D"k">if</span> <span cla=
ss=3D"p">(</span><span class=3D"n">c</span> <span class=3D"o">=3D=3D</span>=
 <span class=3D"n">in_string</span><span class=3D"p">)</span> <span class=
=3D"n">in_string</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</=
span><span class=3D"p">;</span></div><div class=3D"line">        <span clas=
s=3D"n">i</span><span class=3D"o">++</span><span class=3D"p">;</span></div>=
<div class=3D"line">        <span class=3D"n">prev_sep</span> <span class=
=3D"o">=3D</span> <span class=3D"mi">1</span><span class=3D"p">;</span></di=
v><div class=3D"line">        <span class=3D"k">continue</span><span class=
=3D"p">;</span></div><div class=3D"line">      <span class=3D"p">}</span> <=
span class=3D"k">else</span> <span class=3D"p">{</span></div><div class=3D"=
line">        <span class=3D"k">if</span> <span class=3D"p">(</span><span c=
lass=3D"n">c</span> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'"'<=
/span> <span class=3D"o">||</span> <span class=3D"n">c</span> <span class=
=3D"o">=3D=3D</span> <span class=3D"sc">'\''</span><span class=3D"p">)</spa=
n> <span class=3D"p">{</span></div><div class=3D"line">          <span clas=
s=3D"n">in_string</span> <span class=3D"o">=3D</span> <span class=3D"n">c</=
span><span class=3D"p">;</span></div><div class=3D"line">          <span cl=
ass=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</spa=
n><span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</=
span> <span class=3D"o">=3D</span> <span class=3D"n">HL_STRING</span><span =
class=3D"p">;</span></div><div class=3D"line">          <span class=3D"n">i=
</span><span class=3D"o">++</span><span class=3D"p">;</span></div><div clas=
s=3D"line">          <span class=3D"k">continue</span><span class=3D"p">;</=
span></div><div class=3D"line">        <span class=3D"p">}</span></div><div=
 class=3D"line">      <span class=3D"p">}</span></div><div class=3D"line"> =
   <span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"=
line">    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=
=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">syntax</span><sp=
an class=3D"o">-&gt;</span><span class=3D"n">flags</span> <span class=3D"o"=
>&amp;</span> <span class=3D"n">HL_HIGHLIGHT_NUMBERS</span><span class=3D"p=
">)</span> <span class=3D"p">{</span></div><div class=3D"line">      <span =
class=3D"k">if</span> <span class=3D"p">((</span><span class=3D"n">isdigit<=
/span><span class=3D"p">(</span><span class=3D"n">c</span><span class=3D"p"=
>)</span> <span class=3D"o">&amp;&amp;</span> <span class=3D"p">(</span><sp=
an class=3D"n">prev_sep</span> <span class=3D"o">||</span> <span class=3D"n=
">prev_hl</span> <span class=3D"o">=3D=3D</span> <span class=3D"n">HL_NUMBE=
R</span><span class=3D"p">))</span> <span class=3D"o">||</span></div><div c=
lass=3D"line">          <span class=3D"p">(</span><span class=3D"n">c</span=
> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'.'</span> <span class=
=3D"o">&amp;&amp;</span> <span class=3D"n">prev_hl</span> <span class=3D"o"=
>=3D=3D</span> <span class=3D"n">HL_NUMBER</span><span class=3D"p">))</span=
> <span class=3D"p">{</span></div><div class=3D"line">        <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><=
span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</spa=
n> <span class=3D"o">=3D</span> <span class=3D"n">HL_NUMBER</span><span cla=
ss=3D"p">;</span></div><div class=3D"line">        <span class=3D"n">i</spa=
n><span class=3D"o">++</span><span class=3D"p">;</span></div><div class=3D"=
line">        <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</span=
> <span class=3D"mi">0</span><span class=3D"p">;</span></div><div class=3D"=
line">        <span class=3D"k">continue</span><span class=3D"p">;</span></=
div><div class=3D"line">      <span class=3D"p">}</span></div><div class=3D=
"line">    <span class=3D"p">}</span></div><div class=3D"line"></div><div c=
lass=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(</span><sp=
an class=3D"n">prev_sep</span><span class=3D"p">)</span> <span class=3D"p">=
{</span></div><div class=3D"line">      <span class=3D"kt">int</span> <span=
 class=3D"n">j</span><span class=3D"p">;</span></div><div class=3D"line">  =
    <span class=3D"k">for</span> <span class=3D"p">(</span><span class=3D"n=
">j</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span cl=
ass=3D"p">;</span> <span class=3D"n">keywords</span><span class=3D"p">[</sp=
an><span class=3D"n">j</span><span class=3D"p">];</span> <span class=3D"n">=
j</span><span class=3D"o">++</span><span class=3D"p">)</span> <span class=
=3D"p">{</span></div><div class=3D"line">        <span class=3D"kt">int</sp=
an> <span class=3D"n">klen</span> <span class=3D"o">=3D</span> <span class=
=3D"n">strlen</span><span class=3D"p">(</span><span class=3D"n">keywords</s=
pan><span class=3D"p">[</span><span class=3D"n">j</span><span class=3D"p">]=
);</span></div><div class=3D"line">        <span class=3D"kt">int</span> <s=
pan class=3D"n">kw2</span> <span class=3D"o">=3D</span> <span class=3D"n">k=
eywords</span><span class=3D"p">[</span><span class=3D"n">j</span><span cla=
ss=3D"p">][</span><span class=3D"n">klen</span> <span class=3D"o">-</span> =
<span class=3D"mi">1</span><span class=3D"p">]</span> <span class=3D"o">=3D=
=3D</span> <span class=3D"sc">'|'</span><span class=3D"p">;</span></div><di=
v class=3D"line">        <span class=3D"k">if</span> <span class=3D"p">(</s=
pan><span class=3D"n">kw2</span><span class=3D"p">)</span> <span class=3D"n=
">klen</span><span class=3D"o">--</span><span class=3D"p">;</span></div><di=
v class=3D"line"></div><div class=3D"line">        <span class=3D"k">if</sp=
an> <span class=3D"p">(</span><span class=3D"o">!</span><span class=3D"n">s=
trncmp</span><span class=3D"p">(</span><span class=3D"o">&amp;</span><span =
class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">rende=
r</span><span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"=
p">],</span> <span class=3D"n">keywords</span><span class=3D"p">[</span><sp=
an class=3D"n">j</span><span class=3D"p">],</span> <span class=3D"n">klen</=
span><span class=3D"p">)</span> <span class=3D"o">&amp;&amp;</span></div><d=
iv class=3D"line">            <span class=3D"n">is_separator</span><span cl=
ass=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span=
><span class=3D"n">render</span><span class=3D"p">[</span><span class=3D"n"=
>i</span> <span class=3D"o">+</span> <span class=3D"n">klen</span><span cla=
ss=3D"p">]))</span> <span class=3D"p">{</span></div><div class=3D"line">   =
       <span class=3D"n">memset</span><span class=3D"p">(</span><span class=
=3D"o">&amp;</span><span class=3D"n">row</span><span class=3D"o">-&gt;</spa=
n><span class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i<=
/span><span class=3D"p">],</span> <span class=3D"n">kw2</span> <span class=
=3D"o">?</span> <span class=3D"n">HL_KEYWORD2</span> <span class=3D"o">:</s=
pan> <span class=3D"n">HL_KEYWORD1</span><span class=3D"p">,</span> <span c=
lass=3D"n">klen</span><span class=3D"p">);</span></div><div class=3D"line">=
          <span class=3D"n">i</span> <span class=3D"o">+=3D</span> <span cl=
ass=3D"n">klen</span><span class=3D"p">;</span></div><div class=3D"line">  =
        <span class=3D"k">break</span><span class=3D"p">;</span></div><div =
class=3D"line">        <span class=3D"p">}</span></div><div class=3D"line">=
      <span class=3D"p">}</span></div><div class=3D"line">      <span class=
=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">keywords</span=
><span class=3D"p">[</span><span class=3D"n">j</span><span class=3D"p">]</s=
pan> <span class=3D"o">!=3D</span> <span class=3D"nb">NULL</span><span clas=
s=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line">      =
  <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <span clas=
s=3D"mi">0</span><span class=3D"p">;</span></div><div class=3D"line">      =
  <span class=3D"k">continue</span><span class=3D"p">;</span></div><div cla=
ss=3D"line">      <span class=3D"p">}</span></div><div class=3D"line">    <=
span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line=
">    <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <span =
class=3D"n">is_separator</span><span class=3D"p">(</span><span class=3D"n">=
c</span><span class=3D"p">);</span></div><div class=3D"line">    <span clas=
s=3D"n">i</span><span class=3D"o">++</span><span class=3D"p">;</span></div>=
<div class=3D"line">  <span class=3D"p">}</span></div><div class=3D"line"><=
span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line=
 folded"><span class=3D"kt">int</span> <span class=3D"nf">editorSyntaxToCol=
or</span><span class=3D"p">(</span><span class=3D"kt">int</span> <span clas=
s=3D"n">hl</span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=
=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div class=
=3D"line folded"><span class=3D"kt">void</span> <span class=3D"nf">editorSe=
lectSyntaxHighlight</span><span class=3D"p">()</span> <span class=3D"p">{</=
span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><=
div class=3D"line folded"><span class=3D"cm">/*** row operations ***/</span=
></div><div class=3D"line folded"><span class=3D"cm">/*** editor operations=
 ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** file i=
/o ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** find=
 ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** append=
 buffer ***/</span></div><div class=3D"line folded"><span class=3D"cm">/***=
 output ***/</span></div><div class=3D"line folded"><span class=3D"cm">/***=
 input ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** =
init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>First we add an <code>in_comment</code> boolean variable to keep track o=
f whether we=E2=80=99re
currently inside a multi-line comment (this variable isn=E2=80=99t used for=
 single-line
comments).</p>

<p>Moving down into the <code>while</code> loop, we require both <code>mcs<=
/code> and <code>mce</code> to be
non-<code>NULL</code> strings of length greater than <code>0</code> in orde=
r to turn on multi-line
comment highlighting. We also check to make sure we=E2=80=99re not in a str=
ing, because
having <code>/*</code> inside a string doesn=E2=80=99t start a comment in m=
ost languages. Okay,
I=E2=80=99ll say it: <em>all</em> languages.</p>

<p>If we=E2=80=99re currently in a multi-line comment, then we can safely h=
ighlight the
current character with <code>HL_MLCOMMENT</code>. Then we check if we=E2=80=
=99re at the end of a
multi-line comment by using <code>strncmp()</code> with <code>mce</code>. I=
f so, we use <code>memset()</code> to
highlight the whole <code>mce</code> string with <code>HL_MLCOMMENT</code>,=
 and then we consume it.
If we=E2=80=99re not at the end of the comment, we simply consume the curre=
nt character
which we already highlighted.</p>

<p>If we=E2=80=99re not currently in a multi-line comment, then we use <cod=
e>strncmp()</code> with
<code>mcs</code> to check if we=E2=80=99re at the beginning of a multi-line=
 comment. If so, we use
<code>memset()</code> to highlight the whole <code>mcs</code> string with <=
code>HL_MLCOMMENT</code>, set
<code>in_comment</code> to true, and consume the whole <code>mcs</code> str=
ing.</p>

<p>Now let=E2=80=99s fix a bit of a complication that multi-line comments a=
dd:
single-line comments should not be recognized inside multi-line comments.</=
p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/slcomment-within-mlcomment/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 181</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/slcomment-within-mlcomment">slcomment-within-mlcomment</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><sp=
an class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line"></=
div><div class=3D"line folded"><span class=3D"kt">int</span> <span class=3D=
"nf">is_separator</span><span class=3D"p">(</span><span class=3D"kt">int</s=
pan> <span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p"=
>{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">ed=
itorUpdateSyntax</span><span class=3D"p">(</span><span class=3D"n">erow</sp=
an> <span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p"=
>)</span> <span class=3D"p">{</span></div><div class=3D"line">  <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span> =
<span class=3D"o">=3D</span> <span class=3D"n">realloc</span><span class=3D=
"p">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span=
 class=3D"n">hl</span><span class=3D"p">,</span> <span class=3D"n">row</spa=
n><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line">  <span class=3D"n">memset</span>=
<span class=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&g=
t;</span><span class=3D"n">hl</span><span class=3D"p">,</span> <span class=
=3D"n">HL_NORMAL</span><span class=3D"p">,</span> <span class=3D"n">row</sp=
an><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line"></div><div class=3D"line">  <span=
 class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">E</span>=
<span class=3D"p">.</span><span class=3D"n">syntax</span> <span class=3D"o"=
>=3D=3D</span> <span class=3D"nb">NULL</span><span class=3D"p">)</span> <sp=
an class=3D"k">return</span><span class=3D"p">;</span></div><div class=3D"l=
ine"></div><div class=3D"line">  <span class=3D"kt">char</span> <span class=
=3D"o">**</span><span class=3D"n">keywords</span> <span class=3D"o">=3D</sp=
an> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">s=
yntax</span><span class=3D"o">-&gt;</span><span class=3D"n">keywords</span>=
<span class=3D"p">;</span></div><div class=3D"line"></div><div class=3D"lin=
e">  <span class=3D"kt">char</span> <span class=3D"o">*</span><span class=
=3D"n">scs</span> <span class=3D"o">=3D</span> <span class=3D"n">E</span><s=
pan class=3D"p">.</span><span class=3D"n">syntax</span><span class=3D"o">-&=
gt;</span><span class=3D"n">singleline_comment_start</span><span class=3D"p=
">;</span></div><div class=3D"line">  <span class=3D"kt">char</span> <span =
class=3D"o">*</span><span class=3D"n">mcs</span> <span class=3D"o">=3D</spa=
n> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">sy=
ntax</span><span class=3D"o">-&gt;</span><span class=3D"n">multiline_commen=
t_start</span><span class=3D"p">;</span></div><div class=3D"line">  <span c=
lass=3D"kt">char</span> <span class=3D"o">*</span><span class=3D"n">mce</sp=
an> <span class=3D"o">=3D</span> <span class=3D"n">E</span><span class=3D"p=
">.</span><span class=3D"n">syntax</span><span class=3D"o">-&gt;</span><spa=
n class=3D"n">multiline_comment_end</span><span class=3D"p">;</span></div><=
div class=3D"line"></div><div class=3D"line">  <span class=3D"kt">int</span=
> <span class=3D"n">scs_len</span> <span class=3D"o">=3D</span> <span class=
=3D"n">scs</span> <span class=3D"o">?</span> <span class=3D"n">strlen</span=
><span class=3D"p">(</span><span class=3D"n">scs</span><span class=3D"p">)<=
/span> <span class=3D"o">:</span> <span class=3D"mi">0</span><span class=3D=
"p">;</span></div><div class=3D"line">  <span class=3D"kt">int</span> <span=
 class=3D"n">mcs_len</span> <span class=3D"o">=3D</span> <span class=3D"n">=
mcs</span> <span class=3D"o">?</span> <span class=3D"n">strlen</span><span =
class=3D"p">(</span><span class=3D"n">mcs</span><span class=3D"p">)</span> =
<span class=3D"o">:</span> <span class=3D"mi">0</span><span class=3D"p">;</=
span></div><div class=3D"line">  <span class=3D"kt">int</span> <span class=
=3D"n">mce_len</span> <span class=3D"o">=3D</span> <span class=3D"n">mce</s=
pan> <span class=3D"o">?</span> <span class=3D"n">strlen</span><span class=
=3D"p">(</span><span class=3D"n">mce</span><span class=3D"p">)</span> <span=
 class=3D"o">:</span> <span class=3D"mi">0</span><span class=3D"p">;</span>=
</div><div class=3D"line"></div><div class=3D"line">  <span class=3D"kt">in=
t</span> <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <sp=
an class=3D"mi">1</span><span class=3D"p">;</span></div><div class=3D"line"=
>  <span class=3D"kt">int</span> <span class=3D"n">in_string</span> <span c=
lass=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span>=
</div><div class=3D"line">  <span class=3D"kt">int</span> <span class=3D"n"=
>in_comment</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span>=
<span class=3D"p">;</span></div><div class=3D"line"></div><div class=3D"lin=
e">  <span class=3D"kt">int</span> <span class=3D"n">i</span> <span class=
=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span></di=
v><div class=3D"line">  <span class=3D"k">while</span> <span class=3D"p">(<=
/span><span class=3D"n">i</span> <span class=3D"o">&lt;</span> <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">rsize</spa=
n><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"=
line">    <span class=3D"kt">char</span> <span class=3D"n">c</span> <span c=
lass=3D"o">=3D</span> <span class=3D"n">row</span><span class=3D"o">-&gt;</=
span><span class=3D"n">render</span><span class=3D"p">[</span><span class=
=3D"n">i</span><span class=3D"p">];</span></div><div class=3D"line">    <sp=
an class=3D"kt">unsigned</span> <span class=3D"kt">char</span> <span class=
=3D"n">prev_hl</span> <span class=3D"o">=3D</span> <span class=3D"p">(</spa=
n><span class=3D"n">i</span> <span class=3D"o">&gt;</span> <span class=3D"m=
i">0</span><span class=3D"p">)</span> <span class=3D"o">?</span> <span clas=
s=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span>=
<span class=3D"p">[</span><span class=3D"n">i</span> <span class=3D"o">-</s=
pan> <span class=3D"mi">1</span><span class=3D"p">]</span> <span class=3D"o=
">:</span> <span class=3D"n">HL_NORMAL</span><span class=3D"p">;</span></di=
v><div class=3D"line"></div><ins class=3D"line">    <span class=3D"k">if</s=
pan> <span class=3D"p">(</span><span class=3D"n">scs_len</span> <span class=
=3D"o">&amp;&amp;</span> <span class=3D"o">!</span><span class=3D"n">in_str=
ing</span> <span class=3D"o">&amp;&amp;</span> <span class=3D"o">!</span><s=
pan class=3D"n">in_comment</span><span class=3D"p">)</span> <span class=3D"=
p">{</span></ins><div class=3D"line">      <span class=3D"k">if</span> <spa=
n class=3D"p">(</span><span class=3D"o">!</span><span class=3D"n">strncmp</=
span><span class=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D=
"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">render</span>=
<span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">],</s=
pan> <span class=3D"n">scs</span><span class=3D"p">,</span> <span class=3D"=
n">scs_len</span><span class=3D"p">))</span> <span class=3D"p">{</span></di=
v><div class=3D"line">        <span class=3D"n">memset</span><span class=3D=
"p">(</span><span class=3D"o">&amp;</span><span class=3D"n">row</span><span=
 class=3D"o">-&gt;</span><span class=3D"n">hl</span><span class=3D"p">[</sp=
an><span class=3D"n">i</span><span class=3D"p">],</span> <span class=3D"n">=
HL_COMMENT</span><span class=3D"p">,</span> <span class=3D"n">row</span><sp=
an class=3D"o">-&gt;</span><span class=3D"n">rsize</span> <span class=3D"o"=
>-</span> <span class=3D"n">i</span><span class=3D"p">);</span></div><div c=
lass=3D"line">        <span class=3D"k">break</span><span class=3D"p">;</sp=
an></div><div class=3D"line">      <span class=3D"p">}</span></div><div cla=
ss=3D"line">    <span class=3D"p">}</span></div><div class=3D"line"></div><=
div class=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(</spa=
n><span class=3D"n">mcs_len</span> <span class=3D"o">&amp;&amp;</span> <spa=
n class=3D"n">mce_len</span> <span class=3D"o">&amp;&amp;</span> <span clas=
s=3D"o">!</span><span class=3D"n">in_string</span><span class=3D"p">)</span=
> <span class=3D"p">{</span></div><div class=3D"line">      <span class=3D"=
k">if</span> <span class=3D"p">(</span><span class=3D"n">in_comment</span><=
span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"lin=
e">        <span class=3D"n">row</span><span class=3D"o">-&gt;</span><span =
class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</span><s=
pan class=3D"p">]</span> <span class=3D"o">=3D</span> <span class=3D"n">HL_=
MLCOMMENT</span><span class=3D"p">;</span></div><div class=3D"line">       =
 <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"o">!<=
/span><span class=3D"n">strncmp</span><span class=3D"p">(</span><span class=
=3D"o">&amp;</span><span class=3D"n">row</span><span class=3D"o">-&gt;</spa=
n><span class=3D"n">render</span><span class=3D"p">[</span><span class=3D"n=
">i</span><span class=3D"p">],</span> <span class=3D"n">mce</span><span cla=
ss=3D"p">,</span> <span class=3D"n">mce_len</span><span class=3D"p">))</spa=
n> <span class=3D"p">{</span></div><div class=3D"line">          <span clas=
s=3D"n">memset</span><span class=3D"p">(</span><span class=3D"o">&amp;</spa=
n><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"=
n">hl</span><span class=3D"p">[</span><span class=3D"n">i</span><span class=
=3D"p">],</span> <span class=3D"n">HL_MLCOMMENT</span><span class=3D"p">,</=
span> <span class=3D"n">mce_len</span><span class=3D"p">);</span></div><div=
 class=3D"line">          <span class=3D"n">i</span> <span class=3D"o">+=3D=
</span> <span class=3D"n">mce_len</span><span class=3D"p">;</span></div><di=
v class=3D"line">          <span class=3D"n">in_comment</span> <span class=
=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span></di=
v><div class=3D"line">          <span class=3D"n">prev_sep</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"mi">1</span><span class=3D"p">;</span></=
div><div class=3D"line">          <span class=3D"k">continue</span><span cl=
ass=3D"p">;</span></div><div class=3D"line">        <span class=3D"p">}</sp=
an> <span class=3D"k">else</span> <span class=3D"p">{</span></div><div clas=
s=3D"line">          <span class=3D"n">i</span><span class=3D"o">++</span><=
span class=3D"p">;</span></div><div class=3D"line">          <span class=3D=
"k">continue</span><span class=3D"p">;</span></div><div class=3D"line">    =
    <span class=3D"p">}</span></div><div class=3D"line">      <span class=
=3D"p">}</span> <span class=3D"k">else</span> <span class=3D"k">if</span> <=
span class=3D"p">(</span><span class=3D"o">!</span><span class=3D"n">strncm=
p</span><span class=3D"p">(</span><span class=3D"o">&amp;</span><span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">render</sp=
an><span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">],=
</span> <span class=3D"n">mcs</span><span class=3D"p">,</span> <span class=
=3D"n">mcs_len</span><span class=3D"p">))</span> <span class=3D"p">{</span>=
</div><div class=3D"line">        <span class=3D"n">memset</span><span clas=
s=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D"n">row</span><=
span class=3D"o">-&gt;</span><span class=3D"n">hl</span><span class=3D"p">[=
</span><span class=3D"n">i</span><span class=3D"p">],</span> <span class=3D=
"n">HL_MLCOMMENT</span><span class=3D"p">,</span> <span class=3D"n">mcs_len=
</span><span class=3D"p">);</span></div><div class=3D"line">        <span c=
lass=3D"n">i</span> <span class=3D"o">+=3D</span> <span class=3D"n">mcs_len=
</span><span class=3D"p">;</span></div><div class=3D"line">        <span cl=
ass=3D"n">in_comment</span> <span class=3D"o">=3D</span> <span class=3D"mi"=
>1</span><span class=3D"p">;</span></div><div class=3D"line">        <span =
class=3D"k">continue</span><span class=3D"p">;</span></div><div class=3D"li=
ne">      <span class=3D"p">}</span></div><div class=3D"line">    <span cla=
ss=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line">    <s=
pan class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">E</sp=
an><span class=3D"p">.</span><span class=3D"n">syntax</span><span class=3D"=
o">-&gt;</span><span class=3D"n">flags</span> <span class=3D"o">&amp;</span=
> <span class=3D"n">HL_HIGHLIGHT_STRINGS</span><span class=3D"p">)</span> <=
span class=3D"p">{</span></div><div class=3D"line">      <span class=3D"k">=
if</span> <span class=3D"p">(</span><span class=3D"n">in_string</span><span=
 class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line"> =
       <span class=3D"n">row</span><span class=3D"o">-&gt;</span><span clas=
s=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</span><span =
class=3D"p">]</span> <span class=3D"o">=3D</span> <span class=3D"n">HL_STRI=
NG</span><span class=3D"p">;</span></div><div class=3D"line">        <span =
class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">c</span> =
<span class=3D"o">=3D=3D</span> <span class=3D"sc">'\\'</span> <span class=
=3D"o">&amp;&amp;</span> <span class=3D"n">i</span> <span class=3D"o">+</sp=
an> <span class=3D"mi">1</span> <span class=3D"o">&lt;</span> <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">rsize</spa=
n><span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"=
line">          <span class=3D"n">row</span><span class=3D"o">-&gt;</span><=
span class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</sp=
an> <span class=3D"o">+</span> <span class=3D"mi">1</span><span class=3D"p"=
>]</span> <span class=3D"o">=3D</span> <span class=3D"n">HL_STRING</span><s=
pan class=3D"p">;</span></div><div class=3D"line">          <span class=3D"=
n">i</span> <span class=3D"o">+=3D</span> <span class=3D"mi">2</span><span =
class=3D"p">;</span></div><div class=3D"line">          <span class=3D"k">c=
ontinue</span><span class=3D"p">;</span></div><div class=3D"line">        <=
span class=3D"p">}</span></div><div class=3D"line">        <span class=3D"k=
">if</span> <span class=3D"p">(</span><span class=3D"n">c</span> <span clas=
s=3D"o">=3D=3D</span> <span class=3D"n">in_string</span><span class=3D"p">)=
</span> <span class=3D"n">in_string</span> <span class=3D"o">=3D</span> <sp=
an class=3D"mi">0</span><span class=3D"p">;</span></div><div class=3D"line"=
>        <span class=3D"n">i</span><span class=3D"o">++</span><span class=
=3D"p">;</span></div><div class=3D"line">        <span class=3D"n">prev_sep=
</span> <span class=3D"o">=3D</span> <span class=3D"mi">1</span><span class=
=3D"p">;</span></div><div class=3D"line">        <span class=3D"k">continue=
</span><span class=3D"p">;</span></div><div class=3D"line">      <span clas=
s=3D"p">}</span> <span class=3D"k">else</span> <span class=3D"p">{</span></=
div><div class=3D"line">        <span class=3D"k">if</span> <span class=3D"=
p">(</span><span class=3D"n">c</span> <span class=3D"o">=3D=3D</span> <span=
 class=3D"sc">'"'</span> <span class=3D"o">||</span> <span class=3D"n">c</s=
pan> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'\''</span><span cl=
ass=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line">    =
      <span class=3D"n">in_string</span> <span class=3D"o">=3D</span> <span=
 class=3D"n">c</span><span class=3D"p">;</span></div><div class=3D"line">  =
        <span class=3D"n">row</span><span class=3D"o">-&gt;</span><span cla=
ss=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</span><span=
 class=3D"p">]</span> <span class=3D"o">=3D</span> <span class=3D"n">HL_STR=
ING</span><span class=3D"p">;</span></div><div class=3D"line">          <sp=
an class=3D"n">i</span><span class=3D"o">++</span><span class=3D"p">;</span=
></div><div class=3D"line">          <span class=3D"k">continue</span><span=
 class=3D"p">;</span></div><div class=3D"line">        <span class=3D"p">}<=
/span></div><div class=3D"line">      <span class=3D"p">}</span></div><div =
class=3D"line">    <span class=3D"p">}</span></div><div class=3D"line"></di=
v><div class=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(</=
span><span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">=
syntax</span><span class=3D"o">-&gt;</span><span class=3D"n">flags</span> <=
span class=3D"o">&amp;</span> <span class=3D"n">HL_HIGHLIGHT_NUMBERS</span>=
<span class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"li=
ne">      <span class=3D"k">if</span> <span class=3D"p">((</span><span clas=
s=3D"n">isdigit</span><span class=3D"p">(</span><span class=3D"n">c</span><=
span class=3D"p">)</span> <span class=3D"o">&amp;&amp;</span> <span class=
=3D"p">(</span><span class=3D"n">prev_sep</span> <span class=3D"o">||</span=
> <span class=3D"n">prev_hl</span> <span class=3D"o">=3D=3D</span> <span cl=
ass=3D"n">HL_NUMBER</span><span class=3D"p">))</span> <span class=3D"o">||<=
/span></div><div class=3D"line">          <span class=3D"p">(</span><span c=
lass=3D"n">c</span> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'.'<=
/span> <span class=3D"o">&amp;&amp;</span> <span class=3D"n">prev_hl</span>=
 <span class=3D"o">=3D=3D</span> <span class=3D"n">HL_NUMBER</span><span cl=
ass=3D"p">))</span> <span class=3D"p">{</span></div><div class=3D"line">   =
     <span class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=
=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</span><span c=
lass=3D"p">]</span> <span class=3D"o">=3D</span> <span class=3D"n">HL_NUMBE=
R</span><span class=3D"p">;</span></div><div class=3D"line">        <span c=
lass=3D"n">i</span><span class=3D"o">++</span><span class=3D"p">;</span></d=
iv><div class=3D"line">        <span class=3D"n">prev_sep</span> <span clas=
s=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span></d=
iv><div class=3D"line">        <span class=3D"k">continue</span><span class=
=3D"p">;</span></div><div class=3D"line">      <span class=3D"p">}</span></=
div><div class=3D"line">    <span class=3D"p">}</span></div><div class=3D"l=
ine"></div><div class=3D"line">    <span class=3D"k">if</span> <span class=
=3D"p">(</span><span class=3D"n">prev_sep</span><span class=3D"p">)</span> =
<span class=3D"p">{</span></div><div class=3D"line">      <span class=3D"kt=
">int</span> <span class=3D"n">j</span><span class=3D"p">;</span></div><div=
 class=3D"line">      <span class=3D"k">for</span> <span class=3D"p">(</spa=
n><span class=3D"n">j</span> <span class=3D"o">=3D</span> <span class=3D"mi=
">0</span><span class=3D"p">;</span> <span class=3D"n">keywords</span><span=
 class=3D"p">[</span><span class=3D"n">j</span><span class=3D"p">];</span> =
<span class=3D"n">j</span><span class=3D"o">++</span><span class=3D"p">)</s=
pan> <span class=3D"p">{</span></div><div class=3D"line">        <span clas=
s=3D"kt">int</span> <span class=3D"n">klen</span> <span class=3D"o">=3D</sp=
an> <span class=3D"n">strlen</span><span class=3D"p">(</span><span class=3D=
"n">keywords</span><span class=3D"p">[</span><span class=3D"n">j</span><spa=
n class=3D"p">]);</span></div><div class=3D"line">        <span class=3D"kt=
">int</span> <span class=3D"n">kw2</span> <span class=3D"o">=3D</span> <spa=
n class=3D"n">keywords</span><span class=3D"p">[</span><span class=3D"n">j<=
/span><span class=3D"p">][</span><span class=3D"n">klen</span> <span class=
=3D"o">-</span> <span class=3D"mi">1</span><span class=3D"p">]</span> <span=
 class=3D"o">=3D=3D</span> <span class=3D"sc">'|'</span><span class=3D"p">;=
</span></div><div class=3D"line">        <span class=3D"k">if</span> <span =
class=3D"p">(</span><span class=3D"n">kw2</span><span class=3D"p">)</span> =
<span class=3D"n">klen</span><span class=3D"o">--</span><span class=3D"p">;=
</span></div><div class=3D"line"></div><div class=3D"line">        <span cl=
ass=3D"k">if</span> <span class=3D"p">(</span><span class=3D"o">!</span><sp=
an class=3D"n">strncmp</span><span class=3D"p">(</span><span class=3D"o">&a=
mp;</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span c=
lass=3D"n">render</span><span class=3D"p">[</span><span class=3D"n">i</span=
><span class=3D"p">],</span> <span class=3D"n">keywords</span><span class=
=3D"p">[</span><span class=3D"n">j</span><span class=3D"p">],</span> <span =
class=3D"n">klen</span><span class=3D"p">)</span> <span class=3D"o">&amp;&a=
mp;</span></div><div class=3D"line">            <span class=3D"n">is_separa=
tor</span><span class=3D"p">(</span><span class=3D"n">row</span><span class=
=3D"o">-&gt;</span><span class=3D"n">render</span><span class=3D"p">[</span=
><span class=3D"n">i</span> <span class=3D"o">+</span> <span class=3D"n">kl=
en</span><span class=3D"p">]))</span> <span class=3D"p">{</span></div><div =
class=3D"line">          <span class=3D"n">memset</span><span class=3D"p">(=
</span><span class=3D"o">&amp;</span><span class=3D"n">row</span><span clas=
s=3D"o">-&gt;</span><span class=3D"n">hl</span><span class=3D"p">[</span><s=
pan class=3D"n">i</span><span class=3D"p">],</span> <span class=3D"n">kw2</=
span> <span class=3D"o">?</span> <span class=3D"n">HL_KEYWORD2</span> <span=
 class=3D"o">:</span> <span class=3D"n">HL_KEYWORD1</span><span class=3D"p"=
>,</span> <span class=3D"n">klen</span><span class=3D"p">);</span></div><di=
v class=3D"line">          <span class=3D"n">i</span> <span class=3D"o">+=
=3D</span> <span class=3D"n">klen</span><span class=3D"p">;</span></div><di=
v class=3D"line">          <span class=3D"k">break</span><span class=3D"p">=
;</span></div><div class=3D"line">        <span class=3D"p">}</span></div><=
div class=3D"line">      <span class=3D"p">}</span></div><div class=3D"line=
">      <span class=3D"k">if</span> <span class=3D"p">(</span><span class=
=3D"n">keywords</span><span class=3D"p">[</span><span class=3D"n">j</span><=
span class=3D"p">]</span> <span class=3D"o">!=3D</span> <span class=3D"nb">=
NULL</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div =
class=3D"line">        <span class=3D"n">prev_sep</span> <span class=3D"o">=
=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span></div><div =
class=3D"line">        <span class=3D"k">continue</span><span class=3D"p">;=
</span></div><div class=3D"line">      <span class=3D"p">}</span></div><div=
 class=3D"line">    <span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line">    <span class=3D"n">prev_sep</span> <span class=3D=
"o">=3D</span> <span class=3D"n">is_separator</span><span class=3D"p">(</sp=
an><span class=3D"n">c</span><span class=3D"p">);</span></div><div class=3D=
"line">    <span class=3D"n">i</span><span class=3D"o">++</span><span class=
=3D"p">;</span></div><div class=3D"line">  <span class=3D"p">}</span></div>=
<div class=3D"line"><span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line folded"><span class=3D"kt">int</span> <span class=3D"=
n">editorSyntaxToColor</span><span class=3D"p">(</span><span class=3D"kt">i=
nt</span> <span class=3D"n">hl</span><span class=3D"p">)</span> <span class=
=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"lin=
e"></div><div class=3D"line folded"><span class=3D"kt">void</span> <span cl=
ass=3D"n">editorSelectSyntaxHighlight</span><span class=3D"p">()</span> <sp=
an class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div clas=
s=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/*** row ope=
rations ***/</span></div><div class=3D"line folded"><span class=3D"cm">/***=
 editor operations ***/</span></div><div class=3D"line folded"><span class=
=3D"cm">/*** file i/o ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** find ***/</span></div><div class=3D"line folded"><span class=
=3D"cm">/*** append buffer ***/</span></div><div class=3D"line folded"><spa=
n class=3D"cm">/*** output ***/</span></div><div class=3D"line folded"><spa=
n class=3D"cm">/*** input ***/</span></div><div class=3D"line folded"><span=
 class=3D"cm">/*** init ***/</span></div></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>Okay, now let=E2=80=99s work on highlighting multi-line comments that ac=
tually span
over multiple lines. To do this, we need to know if the previous line is pa=
rt
of an unclosed multi-line comment. Let=E2=80=99s add an <code>hl_open_comme=
nt</code> boolean
variable to the <code>erow</code> struct. Let=E2=80=99s also add an <code>i=
dx</code> integer variable, so
that each <code>erow</code> knows its own index within the file. That will =
allow each row
to examine the previous row=E2=80=99s <code>hl_open_comment</code> value.</=
p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/idx-and-hloc/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 182</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/idx-and-hloc">idx-and-hloc</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line"><span class=3D"=
cm">/*** data ***/</span></div><div class=3D"line"></div><div class=3D"line=
 folded"><span class=3D"k">struct</span> <span class=3D"n">editorSyntax</sp=
an> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">};</span></div><=
div class=3D"line"></div><div class=3D"line"><span class=3D"k">typedef</spa=
n> <span class=3D"k">struct</span> <span class=3D"n">erow</span> <span clas=
s=3D"p">{</span></div><ins class=3D"line">  <span class=3D"kt">int</span> <=
span class=3D"n">idx</span><span class=3D"p">;</span></ins><div class=3D"li=
ne">  <span class=3D"kt">int</span> <span class=3D"n">size</span><span clas=
s=3D"p">;</span></div><div class=3D"line">  <span class=3D"kt">int</span> <=
span class=3D"n">rsize</span><span class=3D"p">;</span></div><div class=3D"=
line">  <span class=3D"kt">char</span> <span class=3D"o">*</span><span clas=
s=3D"n">chars</span><span class=3D"p">;</span></div><div class=3D"line">  <=
span class=3D"kt">char</span> <span class=3D"o">*</span><span class=3D"n">r=
ender</span><span class=3D"p">;</span></div><div class=3D"line">  <span cla=
ss=3D"kt">unsigned</span> <span class=3D"kt">char</span> <span class=3D"o">=
*</span><span class=3D"n">hl</span><span class=3D"p">;</span></div><ins cla=
ss=3D"line">  <span class=3D"kt">int</span> <span class=3D"n">hl_open_comme=
nt</span><span class=3D"p">;</span></ins><div class=3D"line"><span class=3D=
"p">}</span> <span class=3D"n">erow</span><span class=3D"p">;</span></div><=
div class=3D"line"></div><div class=3D"line folded"><span class=3D"k">struc=
t</span> <span class=3D"n">editorConfig</span> <span class=3D"p">{</span> =
=E2=80=A6 <span class=3D"p">};</span></div><div class=3D"line"></div><div c=
lass=3D"line"><span class=3D"k">struct</span> <span class=3D"n">editorConfi=
g</span> <span class=3D"n">E</span><span class=3D"p">;</span></div><div cla=
ss=3D"line"></div><div class=3D"line folded"><span class=3D"cm">/*** filety=
pes ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*** pro=
totypes ***/</span></div><div class=3D"line folded"><span class=3D"cm">/***=
 terminal ***/</span></div><div class=3D"line folded"><span class=3D"cm">/*=
** syntax highlighting ***/</span></div><div class=3D"line"><span class=3D"=
cm">/*** row operations ***/</span></div><div class=3D"line"></div><div cla=
ss=3D"line folded"><span class=3D"kt">int</span> <span class=3D"nf">editorR=
owCxToRx</span><span class=3D"p">(</span><span class=3D"n">erow</span> <spa=
n class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p">,</span=
> <span class=3D"kt">int</span> <span class=3D"n">cx</span><span class=3D"p=
">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span><=
/div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt=
">int</span> <span class=3D"nf">editorRowRxToCx</span><span class=3D"p">(</=
span><span class=3D"n">erow</span> <span class=3D"o">*</span><span class=3D=
"n">row</span><span class=3D"p">,</span> <span class=3D"kt">int</span> <spa=
n class=3D"n">rx</span><span class=3D"p">)</span> <span class=3D"p">{</span=
> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div =
class=3D"line folded"><span class=3D"kt">void</span> <span class=3D"nf">edi=
torUpdateRow</span><span class=3D"p">(</span><span class=3D"n">erow</span> =
<span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p">)</=
span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div>=
<div class=3D"line"></div><div class=3D"line"><span class=3D"kt">void</span=
> <span class=3D"nf">editorInsertRow</span><span class=3D"p">(</span><span =
class=3D"kt">int</span> <span class=3D"n">at</span><span class=3D"p">,</spa=
n> <span class=3D"kt">char</span> <span class=3D"o">*</span><span class=3D"=
n">s</span><span class=3D"p">,</span> <span class=3D"kt">size_t</span> <spa=
n class=3D"n">len</span><span class=3D"p">)</span> <span class=3D"p">{</spa=
n></div><div class=3D"line">  <span class=3D"k">if</span> <span class=3D"p"=
>(</span><span class=3D"n">at</span> <span class=3D"o">&lt;</span> <span cl=
ass=3D"mi">0</span> <span class=3D"o">||</span> <span class=3D"n">at</span>=
 <span class=3D"o">&gt;</span> <span class=3D"n">E</span><span class=3D"p">=
.</span><span class=3D"n">numrows</span><span class=3D"p">)</span> <span cl=
ass=3D"k">return</span><span class=3D"p">;</span></div><div class=3D"line">=
</div><div class=3D"line">  <span class=3D"n">E</span><span class=3D"p">.</=
span><span class=3D"n">row</span> <span class=3D"o">=3D</span> <span class=
=3D"n">realloc</span><span class=3D"p">(</span><span class=3D"n">E</span><s=
pan class=3D"p">.</span><span class=3D"n">row</span><span class=3D"p">,</sp=
an> <span class=3D"k">sizeof</span><span class=3D"p">(</span><span class=3D=
"n">erow</span><span class=3D"p">)</span> <span class=3D"o">*</span> <span =
class=3D"p">(</span><span class=3D"n">E</span><span class=3D"p">.</span><sp=
an class=3D"n">numrows</span> <span class=3D"o">+</span> <span class=3D"mi"=
>1</span><span class=3D"p">));</span></div><div class=3D"line">  <span clas=
s=3D"n">memmove</span><span class=3D"p">(</span><span class=3D"o">&amp;</sp=
an><span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">ro=
w</span><span class=3D"p">[</span><span class=3D"n">at</span> <span class=
=3D"o">+</span> <span class=3D"mi">1</span><span class=3D"p">],</span> <spa=
n class=3D"o">&amp;</span><span class=3D"n">E</span><span class=3D"p">.</sp=
an><span class=3D"n">row</span><span class=3D"p">[</span><span class=3D"n">=
at</span><span class=3D"p">],</span> <span class=3D"k">sizeof</span><span c=
lass=3D"p">(</span><span class=3D"n">erow</span><span class=3D"p">)</span> =
<span class=3D"o">*</span> <span class=3D"p">(</span><span class=3D"n">E</s=
pan><span class=3D"p">.</span><span class=3D"n">numrows</span> <span class=
=3D"o">-</span> <span class=3D"n">at</span><span class=3D"p">));</span></di=
v><div class=3D"line"></div><ins class=3D"line">  <span class=3D"n">E</span=
><span class=3D"p">.</span><span class=3D"n">row</span><span class=3D"p">[<=
/span><span class=3D"n">at</span><span class=3D"p">].</span><span class=3D"=
n">idx</span> <span class=3D"o">=3D</span> <span class=3D"n">at</span><span=
 class=3D"p">;</span></ins><div class=3D"line"></div><div class=3D"line">  =
<span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">row</=
span><span class=3D"p">[</span><span class=3D"n">at</span><span class=3D"p"=
>].</span><span class=3D"n">size</span> <span class=3D"o">=3D</span> <span =
class=3D"n">len</span><span class=3D"p">;</span></div><div class=3D"line"> =
 <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">row<=
/span><span class=3D"p">[</span><span class=3D"n">at</span><span class=3D"p=
">].</span><span class=3D"n">chars</span> <span class=3D"o">=3D</span> <spa=
n class=3D"n">malloc</span><span class=3D"p">(</span><span class=3D"n">len<=
/span> <span class=3D"o">+</span> <span class=3D"mi">1</span><span class=3D=
"p">);</span></div><div class=3D"line">  <span class=3D"n">memcpy</span><sp=
an class=3D"p">(</span><span class=3D"n">E</span><span class=3D"p">.</span>=
<span class=3D"n">row</span><span class=3D"p">[</span><span class=3D"n">at<=
/span><span class=3D"p">].</span><span class=3D"n">chars</span><span class=
=3D"p">,</span> <span class=3D"n">s</span><span class=3D"p">,</span> <span =
class=3D"n">len</span><span class=3D"p">);</span></div><div class=3D"line">=
  <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">row=
</span><span class=3D"p">[</span><span class=3D"n">at</span><span class=3D"=
p">].</span><span class=3D"n">chars</span><span class=3D"p">[</span><span c=
lass=3D"n">len</span><span class=3D"p">]</span> <span class=3D"o">=3D</span=
> <span class=3D"sc">'\0'</span><span class=3D"p">;</span></div><div class=
=3D"line"></div><div class=3D"line">  <span class=3D"n">E</span><span class=
=3D"p">.</span><span class=3D"n">row</span><span class=3D"p">[</span><span =
class=3D"n">at</span><span class=3D"p">].</span><span class=3D"n">rsize</sp=
an> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"=
p">;</span></div><div class=3D"line">  <span class=3D"n">E</span><span clas=
s=3D"p">.</span><span class=3D"n">row</span><span class=3D"p">[</span><span=
 class=3D"n">at</span><span class=3D"p">].</span><span class=3D"n">render</=
span> <span class=3D"o">=3D</span> <span class=3D"nb">NULL</span><span clas=
s=3D"p">;</span></div><div class=3D"line">  <span class=3D"n">E</span><span=
 class=3D"p">.</span><span class=3D"n">row</span><span class=3D"p">[</span>=
<span class=3D"n">at</span><span class=3D"p">].</span><span class=3D"n">hl<=
/span> <span class=3D"o">=3D</span> <span class=3D"nb">NULL</span><span cla=
ss=3D"p">;</span></div><ins class=3D"line">  <span class=3D"n">E</span><spa=
n class=3D"p">.</span><span class=3D"n">row</span><span class=3D"p">[</span=
><span class=3D"n">at</span><span class=3D"p">].</span><span class=3D"n">hl=
_open_comment</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</spa=
n><span class=3D"p">;</span></ins><div class=3D"line">  <span class=3D"n">e=
ditorUpdateRow</span><span class=3D"p">(</span><span class=3D"o">&amp;</spa=
n><span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">row=
</span><span class=3D"p">[</span><span class=3D"n">at</span><span class=3D"=
p">]);</span></div><div class=3D"line"></div><div class=3D"line">  <span cl=
ass=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">numrows</span=
><span class=3D"o">++</span><span class=3D"p">;</span></div><div class=3D"l=
ine">  <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n=
">dirty</span><span class=3D"o">++</span><span class=3D"p">;</span></div><d=
iv class=3D"line"><span class=3D"p">}</span></div><div class=3D"line"></div=
><div class=3D"line folded"><span class=3D"kt">void</span> <span class=3D"n=
f">editorFreeRow</span><span class=3D"p">(</span><span class=3D"n">erow</sp=
an> <span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p"=
>)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></=
div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt"=
>void</span> <span class=3D"nf">editorDelRow</span><span class=3D"p">(</spa=
n><span class=3D"kt">int</span> <span class=3D"n">at</span><span class=3D"p=
">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span><=
/div><div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt=
">void</span> <span class=3D"nf">editorRowInsertChar</span><span class=3D"p=
">(</span><span class=3D"n">erow</span> <span class=3D"o">*</span><span cla=
ss=3D"n">row</span><span class=3D"p">,</span> <span class=3D"kt">int</span>=
 <span class=3D"n">at</span><span class=3D"p">,</span> <span class=3D"kt">i=
nt</span> <span class=3D"n">c</span><span class=3D"p">)</span> <span class=
=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"lin=
e"></div><div class=3D"line folded"><span class=3D"kt">void</span> <span cl=
ass=3D"nf">editorRowAppendString</span><span class=3D"p">(</span><span clas=
s=3D"n">erow</span> <span class=3D"o">*</span><span class=3D"n">row</span><=
span class=3D"p">,</span> <span class=3D"kt">char</span> <span class=3D"o">=
*</span><span class=3D"n">s</span><span class=3D"p">,</span> <span class=3D=
"kt">size_t</span> <span class=3D"n">len</span><span class=3D"p">)</span> <=
span class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div cl=
ass=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void</span=
> <span class=3D"nf">editorRowDelChar</span><span class=3D"p">(</span><span=
 class=3D"n">erow</span> <span class=3D"o">*</span><span class=3D"n">row</s=
pan><span class=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D=
"n">at</span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=
=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><div class=3D=
"line folded"><span class=3D"cm">/*** editor operations ***/</span></div><d=
iv class=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span></div>=
<div class=3D"line folded"><span class=3D"cm">/*** find ***/</span></div><d=
iv class=3D"line folded"><span class=3D"cm">/*** append buffer ***/</span><=
/div><div class=3D"line folded"><span class=3D"cm">/*** output ***/</span><=
/div><div class=3D"line folded"><span class=3D"cm">/*** input ***/</span></=
div><div class=3D"line folded"><span class=3D"cm">/*** init ***/</span></di=
v></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>We initialize <code>idx</code> to the row=E2=80=99s index in the file at=
 the time it is inserted.
Let=E2=80=99s make sure to update the <code>idx</code> of each row whenever=
 a row is inserted into
or removed from the file.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/update-idx/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 183</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/update-idx">update-idx</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><sp=
an class=3D"cm">/*** terminal ***/</span></div><div class=3D"line folded"><=
span class=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"l=
ine"><span class=3D"cm">/*** row operations ***/</span></div><div class=3D"=
line"></div><div class=3D"line folded"><span class=3D"kt">int</span> <span =
class=3D"nf">editorRowCxToRx</span><span class=3D"p">(</span><span class=3D=
"n">erow</span> <span class=3D"o">*</span><span class=3D"n">row</span><span=
 class=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D"n">cx</s=
pan><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span c=
lass=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line folde=
d"><span class=3D"kt">int</span> <span class=3D"nf">editorRowRxToCx</span><=
span class=3D"p">(</span><span class=3D"n">erow</span> <span class=3D"o">*<=
/span><span class=3D"n">row</span><span class=3D"p">,</span> <span class=3D=
"kt">int</span> <span class=3D"n">rx</span><span class=3D"p">)</span> <span=
 class=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=
=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void</span> <=
span class=3D"nf">editorUpdateRow</span><span class=3D"p">(</span><span cla=
ss=3D"n">erow</span> <span class=3D"o">*</span><span class=3D"n">row</span>=
<span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=
=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line"><span cl=
ass=3D"kt">void</span> <span class=3D"nf">editorInsertRow</span><span class=
=3D"p">(</span><span class=3D"kt">int</span> <span class=3D"n">at</span><sp=
an class=3D"p">,</span> <span class=3D"kt">char</span> <span class=3D"o">*<=
/span><span class=3D"n">s</span><span class=3D"p">,</span> <span class=3D"k=
t">size_t</span> <span class=3D"n">len</span><span class=3D"p">)</span> <sp=
an class=3D"p">{</span></div><div class=3D"line">  <span class=3D"k">if</sp=
an> <span class=3D"p">(</span><span class=3D"n">at</span> <span class=3D"o"=
>&lt;</span> <span class=3D"mi">0</span> <span class=3D"o">||</span> <span =
class=3D"n">at</span> <span class=3D"o">&gt;</span> <span class=3D"n">E</sp=
an><span class=3D"p">.</span><span class=3D"n">numrows</span><span class=3D=
"p">)</span> <span class=3D"k">return</span><span class=3D"p">;</span></div=
><div class=3D"line"></div><div class=3D"line">  <span class=3D"n">E</span>=
<span class=3D"p">.</span><span class=3D"n">row</span> <span class=3D"o">=
=3D</span> <span class=3D"n">realloc</span><span class=3D"p">(</span><span =
class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">row</span><=
span class=3D"p">,</span> <span class=3D"k">sizeof</span><span class=3D"p">=
(</span><span class=3D"n">erow</span><span class=3D"p">)</span> <span class=
=3D"o">*</span> <span class=3D"p">(</span><span class=3D"n">E</span><span c=
lass=3D"p">.</span><span class=3D"n">numrows</span> <span class=3D"o">+</sp=
an> <span class=3D"mi">1</span><span class=3D"p">));</span></div><div class=
=3D"line">  <span class=3D"n">memmove</span><span class=3D"p">(</span><span=
 class=3D"o">&amp;</span><span class=3D"n">E</span><span class=3D"p">.</spa=
n><span class=3D"n">row</span><span class=3D"p">[</span><span class=3D"n">a=
t</span> <span class=3D"o">+</span> <span class=3D"mi">1</span><span class=
=3D"p">],</span> <span class=3D"o">&amp;</span><span class=3D"n">E</span><s=
pan class=3D"p">.</span><span class=3D"n">row</span><span class=3D"p">[</sp=
an><span class=3D"n">at</span><span class=3D"p">],</span> <span class=3D"k"=
>sizeof</span><span class=3D"p">(</span><span class=3D"n">erow</span><span =
class=3D"p">)</span> <span class=3D"o">*</span> <span class=3D"p">(</span><=
span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">numrow=
s</span> <span class=3D"o">-</span> <span class=3D"n">at</span><span class=
=3D"p">));</span></div><ins class=3D"line">  <span class=3D"k">for</span> <=
span class=3D"p">(</span><span class=3D"kt">int</span> <span class=3D"n">j<=
/span> <span class=3D"o">=3D</span> <span class=3D"n">at</span> <span class=
=3D"o">+</span> <span class=3D"mi">1</span><span class=3D"p">;</span> <span=
 class=3D"n">j</span> <span class=3D"o">&lt;=3D</span> <span class=3D"n">E<=
/span><span class=3D"p">.</span><span class=3D"n">numrows</span><span class=
=3D"p">;</span> <span class=3D"n">j</span><span class=3D"o">++</span><span =
class=3D"p">)</span> <span class=3D"n">E</span><span class=3D"p">.</span><s=
pan class=3D"n">row</span><span class=3D"p">[</span><span class=3D"n">j</sp=
an><span class=3D"p">].</span><span class=3D"n">idx</span><span class=3D"o"=
>++</span><span class=3D"p">;</span></ins><div class=3D"line"></div><div cl=
ass=3D"line">  <span class=3D"n">E</span><span class=3D"p">.</span><span cl=
ass=3D"n">row</span><span class=3D"p">[</span><span class=3D"n">at</span><s=
pan class=3D"p">].</span><span class=3D"n">idx</span> <span class=3D"o">=3D=
</span> <span class=3D"n">at</span><span class=3D"p">;</span></div><div cla=
ss=3D"line"></div><div class=3D"line">  <span class=3D"n">E</span><span cla=
ss=3D"p">.</span><span class=3D"n">row</span><span class=3D"p">[</span><spa=
n class=3D"n">at</span><span class=3D"p">].</span><span class=3D"n">size</s=
pan> <span class=3D"o">=3D</span> <span class=3D"n">len</span><span class=
=3D"p">;</span></div><div class=3D"line">  <span class=3D"n">E</span><span =
class=3D"p">.</span><span class=3D"n">row</span><span class=3D"p">[</span><=
span class=3D"n">at</span><span class=3D"p">].</span><span class=3D"n">char=
s</span> <span class=3D"o">=3D</span> <span class=3D"n">malloc</span><span =
class=3D"p">(</span><span class=3D"n">len</span> <span class=3D"o">+</span>=
 <span class=3D"mi">1</span><span class=3D"p">);</span></div><div class=3D"=
line">  <span class=3D"n">memcpy</span><span class=3D"p">(</span><span clas=
s=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">row</span><span=
 class=3D"p">[</span><span class=3D"n">at</span><span class=3D"p">].</span>=
<span class=3D"n">chars</span><span class=3D"p">,</span> <span class=3D"n">=
s</span><span class=3D"p">,</span> <span class=3D"n">len</span><span class=
=3D"p">);</span></div><div class=3D"line">  <span class=3D"n">E</span><span=
 class=3D"p">.</span><span class=3D"n">row</span><span class=3D"p">[</span>=
<span class=3D"n">at</span><span class=3D"p">].</span><span class=3D"n">cha=
rs</span><span class=3D"p">[</span><span class=3D"n">len</span><span class=
=3D"p">]</span> <span class=3D"o">=3D</span> <span class=3D"sc">'\0'</span>=
<span class=3D"p">;</span></div><div class=3D"line"></div><div class=3D"lin=
e">  <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">=
row</span><span class=3D"p">[</span><span class=3D"n">at</span><span class=
=3D"p">].</span><span class=3D"n">rsize</span> <span class=3D"o">=3D</span>=
 <span class=3D"mi">0</span><span class=3D"p">;</span></div><div class=3D"l=
ine">  <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n=
">row</span><span class=3D"p">[</span><span class=3D"n">at</span><span clas=
s=3D"p">].</span><span class=3D"n">render</span> <span class=3D"o">=3D</spa=
n> <span class=3D"nb">NULL</span><span class=3D"p">;</span></div><div class=
=3D"line">  <span class=3D"n">E</span><span class=3D"p">.</span><span class=
=3D"n">row</span><span class=3D"p">[</span><span class=3D"n">at</span><span=
 class=3D"p">].</span><span class=3D"n">hl</span> <span class=3D"o">=3D</sp=
an> <span class=3D"nb">NULL</span><span class=3D"p">;</span></div><div clas=
s=3D"line">  <span class=3D"n">E</span><span class=3D"p">.</span><span clas=
s=3D"n">row</span><span class=3D"p">[</span><span class=3D"n">at</span><spa=
n class=3D"p">].</span><span class=3D"n">hl_open_comment</span> <span class=
=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span></di=
v><div class=3D"line">  <span class=3D"n">editorUpdateRow</span><span class=
=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D"n">E</span><spa=
n class=3D"p">.</span><span class=3D"n">row</span><span class=3D"p">[</span=
><span class=3D"n">at</span><span class=3D"p">]);</span></div><div class=3D=
"line"></div><div class=3D"line">  <span class=3D"n">E</span><span class=3D=
"p">.</span><span class=3D"n">numrows</span><span class=3D"o">++</span><spa=
n class=3D"p">;</span></div><div class=3D"line">  <span class=3D"n">E</span=
><span class=3D"p">.</span><span class=3D"n">dirty</span><span class=3D"o">=
++</span><span class=3D"p">;</span></div><div class=3D"line"><span class=3D=
"p">}</span></div><div class=3D"line"></div><div class=3D"line folded"><spa=
n class=3D"kt">void</span> <span class=3D"nf">editorFreeRow</span><span cla=
ss=3D"p">(</span><span class=3D"n">erow</span> <span class=3D"o">*</span><s=
pan class=3D"n">row</span><span class=3D"p">)</span> <span class=3D"p">{</s=
pan> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></div><d=
iv class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">editorD=
elRow</span><span class=3D"p">(</span><span class=3D"kt">int</span> <span c=
lass=3D"n">at</span><span class=3D"p">)</span> <span class=3D"p">{</span></=
div><div class=3D"line">  <span class=3D"k">if</span> <span class=3D"p">(</=
span><span class=3D"n">at</span> <span class=3D"o">&lt;</span> <span class=
=3D"mi">0</span> <span class=3D"o">||</span> <span class=3D"n">at</span> <s=
pan class=3D"o">&gt;=3D</span> <span class=3D"n">E</span><span class=3D"p">=
.</span><span class=3D"n">numrows</span><span class=3D"p">)</span> <span cl=
ass=3D"k">return</span><span class=3D"p">;</span></div><div class=3D"line">=
  <span class=3D"n">editorFreeRow</span><span class=3D"p">(</span><span cla=
ss=3D"o">&amp;</span><span class=3D"n">E</span><span class=3D"p">.</span><s=
pan class=3D"n">row</span><span class=3D"p">[</span><span class=3D"n">at</s=
pan><span class=3D"p">]);</span></div><div class=3D"line">  <span class=3D"=
n">memmove</span><span class=3D"p">(</span><span class=3D"o">&amp;</span><s=
pan class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">row</sp=
an><span class=3D"p">[</span><span class=3D"n">at</span><span class=3D"p">]=
,</span> <span class=3D"o">&amp;</span><span class=3D"n">E</span><span clas=
s=3D"p">.</span><span class=3D"n">row</span><span class=3D"p">[</span><span=
 class=3D"n">at</span> <span class=3D"o">+</span> <span class=3D"mi">1</spa=
n><span class=3D"p">],</span> <span class=3D"k">sizeof</span><span class=3D=
"p">(</span><span class=3D"n">erow</span><span class=3D"p">)</span> <span c=
lass=3D"o">*</span> <span class=3D"p">(</span><span class=3D"n">E</span><sp=
an class=3D"p">.</span><span class=3D"n">numrows</span> <span class=3D"o">-=
</span> <span class=3D"n">at</span> <span class=3D"o">-</span> <span class=
=3D"mi">1</span><span class=3D"p">));</span></div><ins class=3D"line">  <sp=
an class=3D"k">for</span> <span class=3D"p">(</span><span class=3D"kt">int<=
/span> <span class=3D"n">j</span> <span class=3D"o">=3D</span> <span class=
=3D"n">at</span><span class=3D"p">;</span> <span class=3D"n">j</span> <span=
 class=3D"o">&lt;</span> <span class=3D"n">E</span><span class=3D"p">.</spa=
n><span class=3D"n">numrows</span> <span class=3D"o">-</span> <span class=
=3D"mi">1</span><span class=3D"p">;</span> <span class=3D"n">j</span><span =
class=3D"o">++</span><span class=3D"p">)</span> <span class=3D"n">E</span><=
span class=3D"p">.</span><span class=3D"n">row</span><span class=3D"p">[</s=
pan><span class=3D"n">j</span><span class=3D"p">].</span><span class=3D"n">=
idx</span><span class=3D"o">--</span><span class=3D"p">;</span></ins><div c=
lass=3D"line">  <span class=3D"n">E</span><span class=3D"p">.</span><span c=
lass=3D"n">numrows</span><span class=3D"o">--</span><span class=3D"p">;</sp=
an></div><div class=3D"line">  <span class=3D"n">E</span><span class=3D"p">=
.</span><span class=3D"n">dirty</span><span class=3D"o">++</span><span clas=
s=3D"p">;</span></div><div class=3D"line"><span class=3D"p">}</span></div><=
div class=3D"line"></div><div class=3D"line folded"><span class=3D"kt">void=
</span> <span class=3D"nf">editorRowInsertChar</span><span class=3D"p">(</s=
pan><span class=3D"n">erow</span> <span class=3D"o">*</span><span class=3D"=
n">row</span><span class=3D"p">,</span> <span class=3D"kt">int</span> <span=
 class=3D"n">at</span><span class=3D"p">,</span> <span class=3D"kt">int</sp=
an> <span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p">=
{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></di=
v><div class=3D"line folded"><span class=3D"kt">void</span> <span class=3D"=
nf">editorRowAppendString</span><span class=3D"p">(</span><span class=3D"n"=
>erow</span> <span class=3D"o">*</span><span class=3D"n">row</span><span cl=
ass=3D"p">,</span> <span class=3D"kt">char</span> <span class=3D"o">*</span=
><span class=3D"n">s</span><span class=3D"p">,</span> <span class=3D"kt">si=
ze_t</span> <span class=3D"n">len</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"=
line"></div><div class=3D"line folded"><span class=3D"kt">void</span> <span=
 class=3D"nf">editorRowDelChar</span><span class=3D"p">(</span><span class=
=3D"n">erow</span> <span class=3D"o">*</span><span class=3D"n">row</span><s=
pan class=3D"p">,</span> <span class=3D"kt">int</span> <span class=3D"n">at=
</span><span class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <spa=
n class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line fo=
lded"><span class=3D"cm">/*** editor operations ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span></div><div cla=
ss=3D"line folded"><span class=3D"cm">/*** find ***/</span></div><div class=
=3D"line folded"><span class=3D"cm">/*** append buffer ***/</span></div><di=
v class=3D"line folded"><span class=3D"cm">/*** output ***/</span></div><di=
v class=3D"line folded"><span class=3D"cm">/*** input ***/</span></div><div=
 class=3D"line folded"><span class=3D"cm">/*** init ***/</span></div></code=
></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c1">=E2=99=8E=EF=B8=8E compiles, but with no obser=
vable effects</div>
</div>
</div>


<p>The <code>for</code> loops update the index of each row that was displac=
ed by the insert
or delete operation.</p>

<p>Now, the final step.</p>

<div class=3D"diff">
<div class=3D"diff-header">
  <div class=3D"step-filename"><a href=3D"https://github.com/snaptoken/kilo=
-src/blob/propagate-highlight/kilo.c">kilo.c</a></div>
  <div class=3D"step-number">Step 184</div>
  <div class=3D"step-name"><a href=3D"https://github.com/snaptoken/kilo-src=
/tree/propagate-highlight">propagate-highlight</a></div>
</div><pre class=3D"highlight"><code><div class=3D"line folded"><span class=
=3D"cm">/*** includes ***/</span></div><div class=3D"line folded"><span cla=
ss=3D"cm">/*** defines ***/</span></div><div class=3D"line folded"><span cl=
ass=3D"cm">/*** data ***/</span></div><div class=3D"line folded"><span clas=
s=3D"cm">/*** filetypes ***/</span></div><div class=3D"line folded"><span c=
lass=3D"cm">/*** prototypes ***/</span></div><div class=3D"line folded"><sp=
an class=3D"cm">/*** terminal ***/</span></div><div class=3D"line"><span cl=
ass=3D"cm">/*** syntax highlighting ***/</span></div><div class=3D"line"></=
div><div class=3D"line folded"><span class=3D"kt">int</span> <span class=3D=
"nf">is_separator</span><span class=3D"p">(</span><span class=3D"kt">int</s=
pan> <span class=3D"n">c</span><span class=3D"p">)</span> <span class=3D"p"=
>{</span> =E2=80=A6 <span class=3D"p">}</span></div><div class=3D"line"></d=
iv><div class=3D"line"><span class=3D"kt">void</span> <span class=3D"nf">ed=
itorUpdateSyntax</span><span class=3D"p">(</span><span class=3D"n">erow</sp=
an> <span class=3D"o">*</span><span class=3D"n">row</span><span class=3D"p"=
>)</span> <span class=3D"p">{</span></div><div class=3D"line">  <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span> =
<span class=3D"o">=3D</span> <span class=3D"n">realloc</span><span class=3D=
"p">(</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span=
 class=3D"n">hl</span><span class=3D"p">,</span> <span class=3D"n">row</spa=
n><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line">  <span class=3D"n">memset</span>=
<span class=3D"p">(</span><span class=3D"n">row</span><span class=3D"o">-&g=
t;</span><span class=3D"n">hl</span><span class=3D"p">,</span> <span class=
=3D"n">HL_NORMAL</span><span class=3D"p">,</span> <span class=3D"n">row</sp=
an><span class=3D"o">-&gt;</span><span class=3D"n">rsize</span><span class=
=3D"p">);</span></div><div class=3D"line"></div><div class=3D"line">  <span=
 class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">E</span>=
<span class=3D"p">.</span><span class=3D"n">syntax</span> <span class=3D"o"=
>=3D=3D</span> <span class=3D"nb">NULL</span><span class=3D"p">)</span> <sp=
an class=3D"k">return</span><span class=3D"p">;</span></div><div class=3D"l=
ine"></div><div class=3D"line">  <span class=3D"kt">char</span> <span class=
=3D"o">**</span><span class=3D"n">keywords</span> <span class=3D"o">=3D</sp=
an> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">s=
yntax</span><span class=3D"o">-&gt;</span><span class=3D"n">keywords</span>=
<span class=3D"p">;</span></div><div class=3D"line"></div><div class=3D"lin=
e">  <span class=3D"kt">char</span> <span class=3D"o">*</span><span class=
=3D"n">scs</span> <span class=3D"o">=3D</span> <span class=3D"n">E</span><s=
pan class=3D"p">.</span><span class=3D"n">syntax</span><span class=3D"o">-&=
gt;</span><span class=3D"n">singleline_comment_start</span><span class=3D"p=
">;</span></div><div class=3D"line">  <span class=3D"kt">char</span> <span =
class=3D"o">*</span><span class=3D"n">mcs</span> <span class=3D"o">=3D</spa=
n> <span class=3D"n">E</span><span class=3D"p">.</span><span class=3D"n">sy=
ntax</span><span class=3D"o">-&gt;</span><span class=3D"n">multiline_commen=
t_start</span><span class=3D"p">;</span></div><div class=3D"line">  <span c=
lass=3D"kt">char</span> <span class=3D"o">*</span><span class=3D"n">mce</sp=
an> <span class=3D"o">=3D</span> <span class=3D"n">E</span><span class=3D"p=
">.</span><span class=3D"n">syntax</span><span class=3D"o">-&gt;</span><spa=
n class=3D"n">multiline_comment_end</span><span class=3D"p">;</span></div><=
div class=3D"line"></div><div class=3D"line">  <span class=3D"kt">int</span=
> <span class=3D"n">scs_len</span> <span class=3D"o">=3D</span> <span class=
=3D"n">scs</span> <span class=3D"o">?</span> <span class=3D"n">strlen</span=
><span class=3D"p">(</span><span class=3D"n">scs</span><span class=3D"p">)<=
/span> <span class=3D"o">:</span> <span class=3D"mi">0</span><span class=3D=
"p">;</span></div><div class=3D"line">  <span class=3D"kt">int</span> <span=
 class=3D"n">mcs_len</span> <span class=3D"o">=3D</span> <span class=3D"n">=
mcs</span> <span class=3D"o">?</span> <span class=3D"n">strlen</span><span =
class=3D"p">(</span><span class=3D"n">mcs</span><span class=3D"p">)</span> =
<span class=3D"o">:</span> <span class=3D"mi">0</span><span class=3D"p">;</=
span></div><div class=3D"line">  <span class=3D"kt">int</span> <span class=
=3D"n">mce_len</span> <span class=3D"o">=3D</span> <span class=3D"n">mce</s=
pan> <span class=3D"o">?</span> <span class=3D"n">strlen</span><span class=
=3D"p">(</span><span class=3D"n">mce</span><span class=3D"p">)</span> <span=
 class=3D"o">:</span> <span class=3D"mi">0</span><span class=3D"p">;</span>=
</div><div class=3D"line"></div><div class=3D"line">  <span class=3D"kt">in=
t</span> <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <sp=
an class=3D"mi">1</span><span class=3D"p">;</span></div><div class=3D"line"=
>  <span class=3D"kt">int</span> <span class=3D"n">in_string</span> <span c=
lass=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span>=
</div><ins class=3D"line">  <span class=3D"kt">int</span> <span class=3D"n"=
>in_comment</span> <span class=3D"o">=3D</span> <span class=3D"p">(</span><=
span class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">=
idx</span> <span class=3D"o">&gt;</span> <span class=3D"mi">0</span> <span =
class=3D"o">&amp;&amp;</span> <span class=3D"n">E</span><span class=3D"p">.=
</span><span class=3D"n">row</span><span class=3D"p">[</span><span class=3D=
"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">idx</span> <s=
pan class=3D"o">-</span> <span class=3D"mi">1</span><span class=3D"p">].</s=
pan><span class=3D"n">hl_open_comment</span><span class=3D"p">);</span></in=
s><div class=3D"line"></div><div class=3D"line">  <span class=3D"kt">int</s=
pan> <span class=3D"n">i</span> <span class=3D"o">=3D</span> <span class=3D=
"mi">0</span><span class=3D"p">;</span></div><div class=3D"line">  <span cl=
ass=3D"k">while</span> <span class=3D"p">(</span><span class=3D"n">i</span>=
 <span class=3D"o">&lt;</span> <span class=3D"n">row</span><span class=3D"o=
">-&gt;</span><span class=3D"n">rsize</span><span class=3D"p">)</span> <spa=
n class=3D"p">{</span></div><div class=3D"line">    <span class=3D"kt">char=
</span> <span class=3D"n">c</span> <span class=3D"o">=3D</span> <span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">render</sp=
an><span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">];=
</span></div><div class=3D"line">    <span class=3D"kt">unsigned</span> <sp=
an class=3D"kt">char</span> <span class=3D"n">prev_hl</span> <span class=3D=
"o">=3D</span> <span class=3D"p">(</span><span class=3D"n">i</span> <span c=
lass=3D"o">&gt;</span> <span class=3D"mi">0</span><span class=3D"p">)</span=
> <span class=3D"o">?</span> <span class=3D"n">row</span><span class=3D"o">=
-&gt;</span><span class=3D"n">hl</span><span class=3D"p">[</span><span clas=
s=3D"n">i</span> <span class=3D"o">-</span> <span class=3D"mi">1</span><spa=
n class=3D"p">]</span> <span class=3D"o">:</span> <span class=3D"n">HL_NORM=
AL</span><span class=3D"p">;</span></div><div class=3D"line"></div><div cla=
ss=3D"line">    <span class=3D"k">if</span> <span class=3D"p">(</span><span=
 class=3D"n">scs_len</span> <span class=3D"o">&amp;&amp;</span> <span class=
=3D"o">!</span><span class=3D"n">in_string</span> <span class=3D"o">&amp;&a=
mp;</span> <span class=3D"o">!</span><span class=3D"n">in_comment</span><sp=
an class=3D"p">)</span> <span class=3D"p">{</span></div><div class=3D"line"=
>      <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D=
"o">!</span><span class=3D"n">strncmp</span><span class=3D"p">(</span><span=
 class=3D"o">&amp;</span><span class=3D"n">row</span><span class=3D"o">-&gt=
;</span><span class=3D"n">render</span><span class=3D"p">[</span><span clas=
s=3D"n">i</span><span class=3D"p">],</span> <span class=3D"n">scs</span><sp=
an class=3D"p">,</span> <span class=3D"n">scs_len</span><span class=3D"p">)=
)</span> <span class=3D"p">{</span></div><div class=3D"line">        <span =
class=3D"n">memset</span><span class=3D"p">(</span><span class=3D"o">&amp;<=
/span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=
=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</span><span c=
lass=3D"p">],</span> <span class=3D"n">HL_COMMENT</span><span class=3D"p">,=
</span> <span class=3D"n">row</span><span class=3D"o">-&gt;</span><span cla=
ss=3D"n">rsize</span> <span class=3D"o">-</span> <span class=3D"n">i</span>=
<span class=3D"p">);</span></div><div class=3D"line">        <span class=3D=
"k">break</span><span class=3D"p">;</span></div><div class=3D"line">      <=
span class=3D"p">}</span></div><div class=3D"line">    <span class=3D"p">}<=
/span></div><div class=3D"line"></div><div class=3D"line">    <span class=
=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">mcs_len</span>=
 <span class=3D"o">&amp;&amp;</span> <span class=3D"n">mce_len</span> <span=
 class=3D"o">&amp;&amp;</span> <span class=3D"o">!</span><span class=3D"n">=
in_string</span><span class=3D"p">)</span> <span class=3D"p">{</span></div>=
<div class=3D"line">      <span class=3D"k">if</span> <span class=3D"p">(</=
span><span class=3D"n">in_comment</span><span class=3D"p">)</span> <span cl=
ass=3D"p">{</span></div><div class=3D"line">        <span class=3D"n">row</=
span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><span class=
=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">]</span> <span c=
lass=3D"o">=3D</span> <span class=3D"n">HL_MLCOMMENT</span><span class=3D"p=
">;</span></div><div class=3D"line">        <span class=3D"k">if</span> <sp=
an class=3D"p">(</span><span class=3D"o">!</span><span class=3D"n">strncmp<=
/span><span class=3D"p">(</span><span class=3D"o">&amp;</span><span class=
=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">render</sp=
an><span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"p">],=
</span> <span class=3D"n">mce</span><span class=3D"p">,</span> <span class=
=3D"n">mce_len</span><span class=3D"p">))</span> <span class=3D"p">{</span>=
</div><div class=3D"line">          <span class=3D"n">memset</span><span cl=
ass=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D"n">row</span=
><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><span class=3D"p"=
>[</span><span class=3D"n">i</span><span class=3D"p">],</span> <span class=
=3D"n">HL_MLCOMMENT</span><span class=3D"p">,</span> <span class=3D"n">mce_=
len</span><span class=3D"p">);</span></div><div class=3D"line">          <s=
pan class=3D"n">i</span> <span class=3D"o">+=3D</span> <span class=3D"n">mc=
e_len</span><span class=3D"p">;</span></div><div class=3D"line">          <=
span class=3D"n">in_comment</span> <span class=3D"o">=3D</span> <span class=
=3D"mi">0</span><span class=3D"p">;</span></div><div class=3D"line">       =
   <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <span cla=
ss=3D"mi">1</span><span class=3D"p">;</span></div><div class=3D"line">     =
     <span class=3D"k">continue</span><span class=3D"p">;</span></div><div =
class=3D"line">        <span class=3D"p">}</span> <span class=3D"k">else</s=
pan> <span class=3D"p">{</span></div><div class=3D"line">          <span cl=
ass=3D"n">i</span><span class=3D"o">++</span><span class=3D"p">;</span></di=
v><div class=3D"line">          <span class=3D"k">continue</span><span clas=
s=3D"p">;</span></div><div class=3D"line">        <span class=3D"p">}</span=
></div><div class=3D"line">      <span class=3D"p">}</span> <span class=3D"=
k">else</span> <span class=3D"k">if</span> <span class=3D"p">(</span><span =
class=3D"o">!</span><span class=3D"n">strncmp</span><span class=3D"p">(</sp=
an><span class=3D"o">&amp;</span><span class=3D"n">row</span><span class=3D=
"o">-&gt;</span><span class=3D"n">render</span><span class=3D"p">[</span><s=
pan class=3D"n">i</span><span class=3D"p">],</span> <span class=3D"n">mcs</=
span><span class=3D"p">,</span> <span class=3D"n">mcs_len</span><span class=
=3D"p">))</span> <span class=3D"p">{</span></div><div class=3D"line">      =
  <span class=3D"n">memset</span><span class=3D"p">(</span><span class=3D"o=
">&amp;</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><sp=
an class=3D"n">hl</span><span class=3D"p">[</span><span class=3D"n">i</span=
><span class=3D"p">],</span> <span class=3D"n">HL_MLCOMMENT</span><span cla=
ss=3D"p">,</span> <span class=3D"n">mcs_len</span><span class=3D"p">);</spa=
n></div><div class=3D"line">        <span class=3D"n">i</span> <span class=
=3D"o">+=3D</span> <span class=3D"n">mcs_len</span><span class=3D"p">;</spa=
n></div><div class=3D"line">        <span class=3D"n">in_comment</span> <sp=
an class=3D"o">=3D</span> <span class=3D"mi">1</span><span class=3D"p">;</s=
pan></div><div class=3D"line">        <span class=3D"k">continue</span><spa=
n class=3D"p">;</span></div><div class=3D"line">      <span class=3D"p">}</=
span></div><div class=3D"line">    <span class=3D"p">}</span></div><div cla=
ss=3D"line"></div><div class=3D"line">    <span class=3D"k">if</span> <span=
 class=3D"p">(</span><span class=3D"n">E</span><span class=3D"p">.</span><s=
pan class=3D"n">syntax</span><span class=3D"o">-&gt;</span><span class=3D"n=
">flags</span> <span class=3D"o">&amp;</span> <span class=3D"n">HL_HIGHLIGH=
T_STRINGS</span><span class=3D"p">)</span> <span class=3D"p">{</span></div>=
<div class=3D"line">      <span class=3D"k">if</span> <span class=3D"p">(</=
span><span class=3D"n">in_string</span><span class=3D"p">)</span> <span cla=
ss=3D"p">{</span></div><div class=3D"line">        <span class=3D"n">row</s=
pan><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><span class=3D=
"p">[</span><span class=3D"n">i</span><span class=3D"p">]</span> <span clas=
s=3D"o">=3D</span> <span class=3D"n">HL_STRING</span><span class=3D"p">;</s=
pan></div><div class=3D"line">        <span class=3D"k">if</span> <span cla=
ss=3D"p">(</span><span class=3D"n">c</span> <span class=3D"o">=3D=3D</span>=
 <span class=3D"sc">'\\'</span> <span class=3D"o">&amp;&amp;</span> <span c=
lass=3D"n">i</span> <span class=3D"o">+</span> <span class=3D"mi">1</span> =
<span class=3D"o">&lt;</span> <span class=3D"n">row</span><span class=3D"o"=
>-&gt;</span><span class=3D"n">rsize</span><span class=3D"p">)</span> <span=
 class=3D"p">{</span></div><div class=3D"line">          <span class=3D"n">=
row</span><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><span cl=
ass=3D"p">[</span><span class=3D"n">i</span> <span class=3D"o">+</span> <sp=
an class=3D"mi">1</span><span class=3D"p">]</span> <span class=3D"o">=3D</s=
pan> <span class=3D"n">HL_STRING</span><span class=3D"p">;</span></div><div=
 class=3D"line">          <span class=3D"n">i</span> <span class=3D"o">+=3D=
</span> <span class=3D"mi">2</span><span class=3D"p">;</span></div><div cla=
ss=3D"line">          <span class=3D"k">continue</span><span class=3D"p">;<=
/span></div><div class=3D"line">        <span class=3D"p">}</span></div><di=
v class=3D"line">        <span class=3D"k">if</span> <span class=3D"p">(</s=
pan><span class=3D"n">c</span> <span class=3D"o">=3D=3D</span> <span class=
=3D"n">in_string</span><span class=3D"p">)</span> <span class=3D"n">in_stri=
ng</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span><span cla=
ss=3D"p">;</span></div><div class=3D"line">        <span class=3D"n">i</spa=
n><span class=3D"o">++</span><span class=3D"p">;</span></div><div class=3D"=
line">        <span class=3D"n">prev_sep</span> <span class=3D"o">=3D</span=
> <span class=3D"mi">1</span><span class=3D"p">;</span></div><div class=3D"=
line">        <span class=3D"k">continue</span><span class=3D"p">;</span></=
div><div class=3D"line">      <span class=3D"p">}</span> <span class=3D"k">=
else</span> <span class=3D"p">{</span></div><div class=3D"line">        <sp=
an class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">c</spa=
n> <span class=3D"o">=3D=3D</span> <span class=3D"sc">'"'</span> <span clas=
s=3D"o">||</span> <span class=3D"n">c</span> <span class=3D"o">=3D=3D</span=
> <span class=3D"sc">'\''</span><span class=3D"p">)</span> <span class=3D"p=
">{</span></div><div class=3D"line">          <span class=3D"n">in_string</=
span> <span class=3D"o">=3D</span> <span class=3D"n">c</span><span class=3D=
"p">;</span></div><div class=3D"line">          <span class=3D"n">row</span=
><span class=3D"o">-&gt;</span><span class=3D"n">hl</span><span class=3D"p"=
>[</span><span class=3D"n">i</span><span class=3D"p">]</span> <span class=
=3D"o">=3D</span> <span class=3D"n">HL_STRING</span><span class=3D"p">;</sp=
an></div><div class=3D"line">          <span class=3D"n">i</span><span clas=
s=3D"o">++</span><span class=3D"p">;</span></div><div class=3D"line">      =
    <span class=3D"k">continue</span><span class=3D"p">;</span></div><div c=
lass=3D"line">        <span class=3D"p">}</span></div><div class=3D"line"> =
     <span class=3D"p">}</span></div><div class=3D"line">    <span class=3D=
"p">}</span></div><div class=3D"line"></div><div class=3D"line">    <span c=
lass=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">E</span><s=
pan class=3D"p">.</span><span class=3D"n">syntax</span><span class=3D"o">-&=
gt;</span><span class=3D"n">flags</span> <span class=3D"o">&amp;</span> <sp=
an class=3D"n">HL_HIGHLIGHT_NUMBERS</span><span class=3D"p">)</span> <span =
class=3D"p">{</span></div><div class=3D"line">      <span class=3D"k">if</s=
pan> <span class=3D"p">((</span><span class=3D"n">isdigit</span><span class=
=3D"p">(</span><span class=3D"n">c</span><span class=3D"p">)</span> <span c=
lass=3D"o">&amp;&amp;</span> <span class=3D"p">(</span><span class=3D"n">pr=
ev_sep</span> <span class=3D"o">||</span> <span class=3D"n">prev_hl</span> =
<span class=3D"o">=3D=3D</span> <span class=3D"n">HL_NUMBER</span><span cla=
ss=3D"p">))</span> <span class=3D"o">||</span></div><div class=3D"line">   =
       <span class=3D"p">(</span><span class=3D"n">c</span> <span class=3D"=
o">=3D=3D</span> <span class=3D"sc">'.'</span> <span class=3D"o">&amp;&amp;=
</span> <span class=3D"n">prev_hl</span> <span class=3D"o">=3D=3D</span> <s=
pan class=3D"n">HL_NUMBER</span><span class=3D"p">))</span> <span class=3D"=
p">{</span></div><div class=3D"line">        <span class=3D"n">row</span><s=
pan class=3D"o">-&gt;</span><span class=3D"n">hl</span><span class=3D"p">[<=
/span><span class=3D"n">i</span><span class=3D"p">]</span> <span class=3D"o=
">=3D</span> <span class=3D"n">HL_NUMBER</span><span class=3D"p">;</span></=
div><div class=3D"line">        <span class=3D"n">i</span><span class=3D"o"=
>++</span><span class=3D"p">;</span></div><div class=3D"line">        <span=
 class=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <span class=3D"mi=
">0</span><span class=3D"p">;</span></div><div class=3D"line">        <span=
 class=3D"k">continue</span><span class=3D"p">;</span></div><div class=3D"l=
ine">      <span class=3D"p">}</span></div><div class=3D"line">    <span cl=
ass=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line">    <=
span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">prev=
_sep</span><span class=3D"p">)</span> <span class=3D"p">{</span></div><div =
class=3D"line">      <span class=3D"kt">int</span> <span class=3D"n">j</spa=
n><span class=3D"p">;</span></div><div class=3D"line">      <span class=3D"=
k">for</span> <span class=3D"p">(</span><span class=3D"n">j</span> <span cl=
ass=3D"o">=3D</span> <span class=3D"mi">0</span><span class=3D"p">;</span> =
<span class=3D"n">keywords</span><span class=3D"p">[</span><span class=3D"n=
">j</span><span class=3D"p">];</span> <span class=3D"n">j</span><span class=
=3D"o">++</span><span class=3D"p">)</span> <span class=3D"p">{</span></div>=
<div class=3D"line">        <span class=3D"kt">int</span> <span class=3D"n"=
>klen</span> <span class=3D"o">=3D</span> <span class=3D"n">strlen</span><s=
pan class=3D"p">(</span><span class=3D"n">keywords</span><span class=3D"p">=
[</span><span class=3D"n">j</span><span class=3D"p">]);</span></div><div cl=
ass=3D"line">        <span class=3D"kt">int</span> <span class=3D"n">kw2</s=
pan> <span class=3D"o">=3D</span> <span class=3D"n">keywords</span><span cl=
ass=3D"p">[</span><span class=3D"n">j</span><span class=3D"p">][</span><spa=
n class=3D"n">klen</span> <span class=3D"o">-</span> <span class=3D"mi">1</=
span><span class=3D"p">]</span> <span class=3D"o">=3D=3D</span> <span class=
=3D"sc">'|'</span><span class=3D"p">;</span></div><div class=3D"line">     =
   <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"n">=
kw2</span><span class=3D"p">)</span> <span class=3D"n">klen</span><span cla=
ss=3D"o">--</span><span class=3D"p">;</span></div><div class=3D"line"></div=
><div class=3D"line">        <span class=3D"k">if</span> <span class=3D"p">=
(</span><span class=3D"o">!</span><span class=3D"n">strncmp</span><span cla=
ss=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D"n">row</span>=
<span class=3D"o">-&gt;</span><span class=3D"n">render</span><span class=3D=
"p">[</span><span class=3D"n">i</span><span class=3D"p">],</span> <span cla=
ss=3D"n">keywords</span><span class=3D"p">[</span><span class=3D"n">j</span=
><span class=3D"p">],</span> <span class=3D"n">klen</span><span class=3D"p"=
>)</span> <span class=3D"o">&amp;&amp;</span></div><div class=3D"line">    =
        <span class=3D"n">is_separator</span><span class=3D"p">(</span><spa=
n class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">ren=
der</span><span class=3D"p">[</span><span class=3D"n">i</span> <span class=
=3D"o">+</span> <span class=3D"n">klen</span><span class=3D"p">]))</span> <=
span class=3D"p">{</span></div><div class=3D"line">          <span class=3D=
"n">memset</span><span class=3D"p">(</span><span class=3D"o">&amp;</span><s=
pan class=3D"n">row</span><span class=3D"o">-&gt;</span><span class=3D"n">h=
l</span><span class=3D"p">[</span><span class=3D"n">i</span><span class=3D"=
p">],</span> <span class=3D"n">kw2</span> <span class=3D"o">?</span> <span =
class=3D"n">HL_KEYWORD2</span> <span class=3D"o">:</span> <span class=3D"n"=
>HL_KEYWORD1</span><span class=3D"p">,</span> <span class=3D"n">klen</span>=
<span class=3D"p">);</span></div><div class=3D"line">          <span class=
=3D"n">i</span> <span class=3D"o">+=3D</span> <span class=3D"n">klen</span>=
<span class=3D"p">;</span></div><div class=3D"line">          <span class=
=3D"k">break</span><span class=3D"p">;</span></div><div class=3D"line">    =
    <span class=3D"p">}</span></div><div class=3D"line">      <span class=
=3D"p">}</span></div><div class=3D"line">      <span class=3D"k">if</span> =
<span class=3D"p">(</span><span class=3D"n">keywords</span><span class=3D"p=
">[</span><span class=3D"n">j</span><span class=3D"p">]</span> <span class=
=3D"o">!=3D</span> <span class=3D"nb">NULL</span><span class=3D"p">)</span>=
 <span class=3D"p">{</span></div><div class=3D"line">        <span class=3D=
"n">prev_sep</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</span=
><span class=3D"p">;</span></div><div class=3D"line">        <span class=3D=
"k">continue</span><span class=3D"p">;</span></div><div class=3D"line">    =
  <span class=3D"p">}</span></div><div class=3D"line">    <span class=3D"p"=
>}</span></div><div class=3D"line"></div><div class=3D"line">    <span clas=
s=3D"n">prev_sep</span> <span class=3D"o">=3D</span> <span class=3D"n">is_s=
eparator</span><span class=3D"p">(</span><span class=3D"n">c</span><span cl=
ass=3D"p">);</span></div><div class=3D"line">    <span class=3D"n">i</span>=
<span class=3D"o">++</span><span class=3D"p">;</span></div><div class=3D"li=
ne">  <span class=3D"p">}</span></div><div class=3D"line"></div><ins class=
=3D"line">  <span class=3D"kt">int</span> <span class=3D"n">changed</span> =
<span class=3D"o">=3D</span> <span class=3D"p">(</span><span class=3D"n">ro=
w</span><span class=3D"o">-&gt;</span><span class=3D"n">hl_open_comment</sp=
an> <span class=3D"o">!=3D</span> <span class=3D"n">in_comment</span><span =
class=3D"p">);</span></ins><ins class=3D"line">  <span class=3D"n">row</spa=
n><span class=3D"o">-&gt;</span><span class=3D"n">hl_open_comment</span> <s=
pan class=3D"o">=3D</span> <span class=3D"n">in_comment</span><span class=
=3D"p">;</span></ins><ins class=3D"line">  <span class=3D"k">if</span> <spa=
n class=3D"p">(</span><span class=3D"n">changed</span> <span class=3D"o">&a=
mp;&amp;</span> <span class=3D"n">row</span><span class=3D"o">-&gt;</span><=
span class=3D"n">idx</span> <span class=3D"o">+</span> <span class=3D"mi">1=
</span> <span class=3D"o">&lt;</span> <span class=3D"n">E</span><span class=
=3D"p">.</span><span class=3D"n">numrows</span><span class=3D"p">)</span></=
ins><ins class=3D"line">    <span class=3D"n">editorUpdateSyntax</span><spa=
n class=3D"p">(</span><span class=3D"o">&amp;</span><span class=3D"n">E</sp=
an><span class=3D"p">.</span><span class=3D"n">row</span><span class=3D"p">=
[</span><span class=3D"n">row</span><span class=3D"o">-&gt;</span><span cla=
ss=3D"n">idx</span> <span class=3D"o">+</span> <span class=3D"mi">1</span><=
span class=3D"p">]);</span></ins><div class=3D"line"><span class=3D"p">}</s=
pan></div><div class=3D"line"></div><div class=3D"line folded"><span class=
=3D"kt">int</span> <span class=3D"nf">editorSyntaxToColor</span><span class=
=3D"p">(</span><span class=3D"kt">int</span> <span class=3D"n">hl</span><sp=
an class=3D"p">)</span> <span class=3D"p">{</span> =E2=80=A6 <span class=3D=
"p">}</span></div><div class=3D"line"></div><div class=3D"line folded"><spa=
n class=3D"kt">void</span> <span class=3D"nf">editorSelectSyntaxHighlight</=
span><span class=3D"p">()</span> <span class=3D"p">{</span> =E2=80=A6 <span=
 class=3D"p">}</span></div><div class=3D"line"></div><div class=3D"line fol=
ded"><span class=3D"cm">/*** row operations ***/</span></div><div class=3D"=
line folded"><span class=3D"cm">/*** editor operations ***/</span></div><di=
v class=3D"line folded"><span class=3D"cm">/*** file i/o ***/</span></div><=
div class=3D"line folded"><span class=3D"cm">/*** find ***/</span></div><di=
v class=3D"line folded"><span class=3D"cm">/*** append buffer ***/</span></=
div><div class=3D"line folded"><span class=3D"cm">/*** output ***/</span></=
div><div class=3D"line folded"><span class=3D"cm">/*** input ***/</span></d=
iv><div class=3D"line folded"><span class=3D"cm">/*** init ***/</span></div=
></code></pre>
<div class=3D"diff-footer">
  <div class=3D"diff-tag-c2">=E2=99=90=EF=B8=8E compiles</div>
</div>
</div>


<p>Near the top of <code>editorUpdateSyntax()</code>, we initialize <code>i=
n_comment</code> to true if
the previous row has an unclosed multi-line comment. If that=E2=80=99s the =
case, then
the current row will start out being highlighted as a multi-line comment.</=
p>

<p>At the bottom of <code>editorUpdateSyntax()</code>, we set the value of =
the current row=E2=80=99s
<code>hl_open_comment</code> to whatever state <code>in_comment</code> got =
left in after processing
the entire row. That tells us whether the row ended as an unclosed multi-li=
ne
comment or not.</p>

<p>Then we have to consider updating the syntax of the next lines in the fi=
le. So
far, we have only been updating the syntax of a line when the user changes =
that
specific line. But with multi-line comments, a user could comment out an en=
tire
file just by changing one line. So it seems like we need to update the synt=
ax
of all the lines following the current line. However, we know the highlight=
ing
of the next line will not change if the value of this line=E2=80=99s <code>=
hl_open_comment</code>
did not change. So we check if it changed, and only call <code>editorUpdate=
Syntax()</code>
on the next line if <code>hl_open_comment</code> changed (and if there is a=
 next line in
the file). Because <code>editorUpdateSyntax()</code> keeps calling itself w=
ith the next
line, the change will continue to propagate to more and more lines until on=
e of
them is unchanged, at which point we know that all the lines after that one
must be unchanged as well.</p>
<h2 id=3D"youre-done"><a href=3D"https://viewsourcecode.org/snaptoken/kilo/=
07.syntaxHighlighting.html#youre-done">You=E2=80=99re done</a></h2>

<p>That=E2=80=99s it! Our text editor is finished. In the
<a href=3D"https://viewsourcecode.org/snaptoken/kilo/08.appendices.html">ap=
pendices</a>, you=E2=80=99ll find some ideas for features you might
want to extend the editor with on your own.</p>

    </div>
    <div id=3D"version">
      <a href=3D"https://github.com/snaptoken/kilo-tutorial/tree/v1.0.0beta=
11">1.0.0beta11</a>
      (<a href=3D"https://github.com/snaptoken/kilo-tutorial/blob/master/CH=
ANGELOG.md">changelog</a>)
    </div>
    <footer class=3D"bar">
      <nav>
        <a href=3D"https://viewsourcecode.org/snaptoken/kilo/07.syntaxHighl=
ighting.html#">top of page</a>
      </nav>
    </footer>
 =20


</body><grammarly-desktop-integration data-grammarly-shadow-root=3D"true"><=
template shadowmode=3D"open"><div aria-label=3D"grammarly-integration" role=
=3D"group" tabindex=3D"-1" class=3D"grammarly-desktop-integration" data-con=
tent=3D"{&quot;mode&quot;:&quot;full&quot;,&quot;isActive&quot;:true,&quot;=
isUserDisabled&quot;:false}"></div></template></grammarly-desktop-integrati=
on></html>
------MultipartBoundary--wjIh6xuEwOEDnUY6wRwfDLlxiXSHeUdd07dSW76Mno----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://viewsourcecode.org/snaptoken/kilo/i/arrow.png

iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAMFWlDQ1BJQ0MgUHJvZmlsZQAASImV
VwdYU8kWnltSCEkogQhICb0jvQqEDoKAdLARkgChREgICnZlUcG1iwUruipiWwsgi4rYFRGw1wcq
Ksq6WMCCypsU0PW1753vmzt/zpxz5j9zz53MAKBiz8nLy0FVAcgVFohiQvxZSckpLFIXwIAeoAN9
QOJwxXl+0dERAMpw/3cZuAUQaX/dVhrrX8f/q6jx+GIuAEg0xGk8MTcX4qMA4FrcPFEBAIQWqDee
XpAnxX0Qa4ggQQCIuBRnyLGWFKfJsY3MJi4mAGI2AGQqhyPKAIAu5c0q5GbAOHQpR3shTyCEeBPE
PtxMDg/iBxDb5OZOg1iFDLFF2g9xMv4WM20kJoeTMYLluciEHCgQ5+Vwiv7P5fjfkpsjGZ7DCDZq
pig0RpozXLc92dPCpZgKcaMwLTIKYnWILwp4MnspvpcpCY1X2PdyxQFwzQATABTwOIHhEOtCzJRk
x/spsCNHJPOF9mikoCAsToHTRNNiFPHRQmFOZIQizuJMftgw3sIXB8UO26QLgsMghpWGHi3OjEuU
80TPFgoSIiGmQ9wmzo4NV/g+Ks4MiBy2EUlipJxNIH6fLgqOkdtgWrni4bwwOy5HNhesBYxdkBkX
KvfFkvjipIhhDjx+YJCcA8bjC+MV3DBYXf4xCt/SvJxohT22hZ8TEiNfZ+yQuDB22LejABaYfB2w
x1mccdGKuQbyCqLj5NxwFESAABAIWEACWxqYBrKAoLW3rhf+ko8EAw4QgQzAB7YKzbBHomxECJ+x
oBj8CREfiEf8/GWjfFAI9V9HtPKnLUiXjRbKPLLBM4hzcR3cB/fCI+CTDZsj7o57DPuxVIZnJQYR
A4mhxGCi5QgPLmSdA5sICP6NLhz2fJidlItwOIfv8QjPCO2Ex4SbhE7CXZAAnsqiKKymChaIfmLO
AuNBJ4wWrMgu7cfscDPI2gX3x70hf8gdZ+I6wBZ3hpn44b4wNxeo/ZGhZITb97X8eT4p6x/zUejp
VnQXBYu0kTcTMGL1c5SAH9aIB/vwny2xxdgR7AJ2GruENWJ1gIWdwuqxFuyEFI9UwlNZJQzPFiPj
lg3jCIZt7Gvse+y//DQ3RzG/dL3EBfwZBdKPIWBaXpFIkJFZwPKDuzGfFSbk2tmwHO0d3ACQ7u3y
reMdU7ZnI8zL33X5TQB4lEFlxncdxxiA488AYAx81xm/heW+AoATbVyJqFCuk27HgAAoQAV+Fdrw
f8MYWMB8HIEr8AJsEATGgSgQB5LBFLjimSAXcp4OZoH5oBSUgxVgLdgItoIdYA/YDw6DOtAIToPz
4ApoAzfBfVgX3eAV6AMDYBBBEBJCQxiINmKAmCLWiCPijvggQUgEEoMkI6lIBiJEJMgsZCFSjqxC
NiLbkWrkd+Q4chq5hLQjd5EupAd5i3xGMZSKaqB6qBk6BnVH/dBwNA6djGag+WgxWoIuQ9ejVeg+
tBY9jV5Bb6Kd6Cu0HwOYMsbEDDFbzB0LwKKwFCwdE2FzsDKsAqvCDmAN8D1fxzqxXuwTTsQZOAu3
hbUZisfjXDwfn4MvxTfie/Ba/Cx+He/C+/BvBBpBl2BN8CSEEZIIGYTphFJCBWEX4RjhHPxuugkD
RCKRSTQnusHvMpmYRZxJXErcTDxIbCK2E58Q+0kkkjbJmuRNiiJxSAWkUtIG0j7SKVIHqZv0kaxM
NiA7koPJKWQheQG5gryXfJLcQX5OHlRSVTJV8lSKUuIpFSktV9qp1KB0TalbaZCiRjGneFPiKFmU
+ZT1lAOUc5QHlHfKyspGyh7KE5QFyvOU1ysfUr6o3KX8iapOtaIGUCdRJdRl1N3UJupd6jsajWZG
Y9NSaAW0ZbRq2hnaI9pHOoNuRw+j8+hz6ZX0WnoH/bWKkoqpip/KFJVilQqVIyrXVHpVlVTNVANU
OapzVCtVj6veVu1XY6g5qEWp5aotVdurdknthTpJ3Uw9SJ2nXqK+Q/2M+hMGxjBmBDC4jIWMnYxz
jG4Nooa5RphGlka5xn6NVo0+TXVNZ80EzRmalZonNDuZGNOMGcbMYS5nHmbeYn4epTfKbxR/1JJR
B0Z1jPqgNVqLrcXXKtM6qHVT67M2SztIO1t7pXad9kMdXMdKZ4LOdJ0tOud0ekdrjPYazR1dNvrw
6Hu6qK6VbozuTN0dui26/Xr6eiF6eXob9M7o9eoz9dn6Wfpr9E/q9xgwDHwMBAZrDE4ZvGRpsvxY
Oaz1rLOsPkNdw1BDieF2w1bDQSNzo3ijBUYHjR4aU4zdjdON1xg3G/eZGJiMN5llUmNyz1TJ1N00
03Sd6QXTD2bmZolmi8zqzF6Ya5mHmReb15g/sKBZ+FrkW1RZ3LAkWrpbZltutmyzQq1crDKtKq2u
WaPWrtYC683W7TYEGw8boU2VzW1bqq2fbaFtjW2XHdMuwm6BXZ3d6zEmY1LGrBxzYcw3exf7HPud
9vcd1B3GOSxwaHB462jlyHWsdLzhRHMKdprrVO/0xtname+8xfmOC8NlvMsil2aXr65uriLXA649
biZuqW6b3G67a7hHuy91v+hB8PD3mOvR6PHJ09WzwPOw519etl7ZXnu9Xow1H8sfu3PsE28jb473
du9OH5ZPqs82n05fQ1+Ob5XvY7Yxm8fexX7uZ+mX5bfP77W/vb/I/5j/hwDPgNkBTYFYYEhgWWBr
kHpQfNDGoEfBRsEZwTXBfSEuITNDmkIJoeGhK0Nvh+mFccOqw/rGuY2bPe5sODU8Nnxj+OMIqwhR
RMN4dPy48avHP4g0jRRG1kWBqLCo1VEPo82j86P/mECcED2hcsKzGIeYWTEXYhmxU2P3xg7E+cct
j7sfbxEviW9OUEmYlFCd8CExMHFVYmfSmKTZSVeSdZIFyfUppJSElF0p/RODJq6d2D3JZVLppFuT
zSfPmHxpis6UnCknpqpM5Uw9kkpITUzdm/qFE8Wp4vSnhaVtSuvjBnDXcV/x2Lw1vB6+N38V/3m6
d/qq9BcZ3hmrM3oyfTMrMnsFAYKNgjdZoVlbsz5kR2Xvzh7KScw5mEvOTc09LlQXZgvPTtOfNmNa
e551XmleZ75n/tr8PlG4aJcYEU8W1xdowGNOi8RC8oukq9CnsLLw4/SE6UdmqM0QzmgpsipaUvS8
OLj4t5n4TO7M5lmGs+bP6prtN3v7HGRO2pzmucZzS+Z2zwuZt2c+ZX72/KsL7BesWvB+YeLChhK9
knklT34J+aWmlF4qKr29yGvR1sX4YsHi1iVOSzYs+VbGK7tcbl9eUf5lKXfp5V8dfl3/69Cy9GWt
y12Xb1lBXCFccWul78o9q9RWFa96snr86to1rDVla96vnbr2UoVzxdZ1lHWSdZ3rI9bXbzDZsGLD
l42ZG29W+lce3KS7acmmD5t5mzu2sLcc2Kq3tXzr522CbXe2h2yvrTKrqthB3FG449nOhJ0XfnP/
rXqXzq7yXV93C3d37onZc7barbp6r+7e5TVojaSmZ9+kfW37A/fXH7A9sP0g82D5IXBIcujl76m/
3zocfrj5iPuRA0dNj246xjhWVovUFtX21WXWddYn17cfH3e8ucGr4dgfdn/sbjRsrDyheWL5ScrJ
kpNDp4pP9TflNfWezjj9pHlq8/0zSWdunJ1wtvVc+LmL54PPn7ngd+HURe+LjZc8Lx2/7H657orr
ldoWl5ZjV12uHmt1ba295natvs2jraF9bPvJDt+O09cDr5+/EXbjys3Im+234m/duT3pducd3p0X
d3PuvrlXeG/w/rwHhAdlD1UfVjzSfVT1D8t/HOx07TzRFdjV8jj28f0n3CevnoqffukueUZ7VvHc
4Hn1C8cXjT3BPW0vJ77sfpX3arC39E+1Pze9tnh99C/2Xy19SX3db0Rvht4ufaf9bvd75/fN/dH9
jwZyBwY/lH3U/rjnk/unC58TPz8fnP6F9GX9V8uvDd/Cvz0Yyh0ayuOIOLKjAAYbmp4OwNvdANCS
4dmhDQAKXX73kgkivy/KEPhPWH4/k4krALvZAMTPAyACnlG2wGYKMRX20qN3HBugTk4jTSHidCdH
eSwqvMEQPg4NvdMDgNQAwFfR0NDg5qGhrzsh2bsANOXL73xSIcLz/TbZOeeqcVEg+En+Cd8+bBGE
+qe9AAAACXBIWXMAABYlAAAWJQFJUiTwAAACBGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6
eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNS40LjAi
PgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRm
LXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAg
ICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyIKICAgICAgICAg
ICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8
ZXhpZjpQaXhlbFlEaW1lbnNpb24+NTg0PC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgICAg
PGV4aWY6UGl4ZWxYRGltZW5zaW9uPjE1ODwvZXhpZjpQaXhlbFhEaW1lbnNpb24+CiAgICAgICAg
IDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgIDwvcmRmOkRlc2Ny
aXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgrYaV7IAAABPklEQVRYCWP8DwQMgxgw
DWK3gZ026kBKY2g0BEdDkNIQoFT/aBocDUFKQ4BS/aNpcDQEKQ0BSvWTnwZ/PmN48OwzpfYT1E+e
Az+fZci19mMIqTrG8JOgFRQqALWoSQGf7u/4H2ls/N/YOP7/mU+k6CRPLQvx/vvMcGByFUPJwuNQ
Lc8ZHhzbzPDgyy+ijfgJDG5j32AGdV6itTCQ5MDLx2GOA1nwlmHt8uUMb5+/Jdq2t2+FGVqtfIAO
ZCdaDwOpAX9/xyRg9IKiuPL//R+k6iZdPckOBFnx6dIaiCNbj5JuI4k6SIhiRKzw6gYz7JjPw7Dr
mTBCkEYsRpCHaGQ2VYwlrxykitXEGTLqQOLCCbeq0RDEHTbEyYyGIHHhhFvVaAjiDhviZEZDkLhw
wq1qNARxhw1xMqMhSFw44VYFAJIg/q91M+6jAAAAAElFTkSuQmCC

------MultipartBoundary--wjIh6xuEwOEDnUY6wRwfDLlxiXSHeUdd07dSW76Mno----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://fonts.googleapis.com/css?family=PT+Serif:400,400i,700|Work+Sans:700|Fira+Mono:400,500

@charset "utf-8";

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bX2SlFPv1weGeLZDtgK_=
7Ss9XZYalI.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C8A, =
U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bX2SlFPv1weGeLZDtgIv=
7Ss9XZYalI.woff2") format("woff2"); unicode-range: U+301, U+400-45F, U+490-=
491, U+4B0-4B1, U+2116; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bX2SlFPv1weGeLZDtgKv=
7Ss9XZYalI.woff2") format("woff2"); unicode-range: U+1F00-1FFF; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bX2SlFPv1weGeLZDtgJf=
7Ss9XZYalI.woff2") format("woff2"); unicode-range: U+370-377, U+37A-37F, U+=
384-38A, U+38C, U+38E-3A1, U+3A3-3FF; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bX2SlFPv1weGeLZDtgnN=
_3nP3TaZFxBQ.woff2") format("woff2"); unicode-range: U+2000-2001, U+2004-20=
08, U+200A, U+23B8-23BD, U+2500-259F; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bX2SlFPv1weGeLZDtgKP=
7Ss9XZYalI.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5, U+=
2C7-2CC, U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00-1E9=
F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A7=
20-A7FF; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 400=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bX2SlFPv1weGeLZDtgJv=
7Ss9XZYQ.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, =
U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20AC, U=
+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 500=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bS2SlFPv1weGeLZDto1d=
3Hk_fUS5NBBASF.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C=
8A, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 500=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bS2SlFPv1weGeLZDto1d=
3HmvfUS5NBBASF.woff2") format("woff2"); unicode-range: U+301, U+400-45F, U+=
490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 500=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bS2SlFPv1weGeLZDto1d=
3HkvfUS5NBBASF.woff2") format("woff2"); unicode-range: U+1F00-1FFF; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 500=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bS2SlFPv1weGeLZDto1d=
3HnffUS5NBBASF.woff2") format("woff2"); unicode-range: U+370-377, U+37A-37F=
, U+384-38A, U+38C, U+38E-3A1, U+3A3-3FF; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 500=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bS2SlFPv1weGeLZDto1d=
3HJNbxZLtLDDy8Rg.woff2") format("woff2"); unicode-range: U+2000-2001, U+200=
4-2008, U+200A, U+23B8-23BD, U+2500-259F; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 500=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bS2SlFPv1weGeLZDto1d=
3HkPfUS5NBBASF.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5=
, U+2C7-2CC, U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00=
-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, =
U+A720-A7FF; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 500=
; src: url("https://fonts.gstatic.com/s/firamono/v16/N0bS2SlFPv1weGeLZDto1d=
3HnvfUS5NBBA.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-1=
53, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20A=
C, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "PT Serif"; font-style: italic; font-weight: 400;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRTQgYoZZY2vCFuvAFT_rC1=
cgT9rct48Q.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C8A, =
U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "PT Serif"; font-style: italic; font-weight: 400;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRTQgYoZZY2vCFuvAFT_rm1=
cgT9rct48Q.woff2") format("woff2"); unicode-range: U+301, U+400-45F, U+490-=
491, U+4B0-4B1, U+2116; }

@font-face { font-family: "PT Serif"; font-style: italic; font-weight: 400;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRTQgYoZZY2vCFuvAFT_rO1=
cgT9rct48Q.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5, U+=
2C7-2CC, U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00-1E9=
F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A7=
20-A7FF; }

@font-face { font-family: "PT Serif"; font-style: italic; font-weight: 400;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRTQgYoZZY2vCFuvAFT_r21=
cgT9rcs.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U=
+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20AC, U+=
2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 400;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRVQgYoZZY2vCFuvAFbzr-_=
dSb_nco.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C8A, U+2=
0B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 400;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRVQgYoZZY2vCFuvAFSzr-_=
dSb_nco.woff2") format("woff2"); unicode-range: U+301, U+400-45F, U+490-491=
, U+4B0-4B1, U+2116; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 400;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRVQgYoZZY2vCFuvAFYzr-_=
dSb_nco.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5, U+2C7=
-2CC, U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00-1E9F, =
U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-=
A7FF; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 400;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRVQgYoZZY2vCFuvAFWzr-_=
dSb_.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2B=
B-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20AC, U+212=
2, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 700;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRSQgYoZZY2vCFuvAnt66qf=
VyvVp8NAyIw.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C8A,=
 U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 700;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRSQgYoZZY2vCFuvAnt66qW=
VyvVp8NAyIw.woff2") format("woff2"); unicode-range: U+301, U+400-45F, U+490=
-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 700;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRSQgYoZZY2vCFuvAnt66qc=
VyvVp8NAyIw.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5, U=
+2C7-2CC, U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00-1E=
9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A=
720-A7FF; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 700;=
 src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRSQgYoZZY2vCFuvAnt66qS=
VyvVp8NA.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, =
U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20AC, U=
+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "Work Sans"; font-style: normal; font-weight: 700=
; src: url("https://fonts.gstatic.com/s/worksans/v24/QGY_z_wNahGAdqQ43RhVcI=
gYT2Xz5u32K67QBiAJpo3ZKyHaQfhf.woff2") format("woff2"); unicode-range: U+10=
2-103, U+110-111, U+128-129, U+168-169, U+1A0-1A1, U+1AF-1B0, U+300-301, U+=
303-304, U+308-309, U+323, U+329, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: "Work Sans"; font-style: normal; font-weight: 700=
; src: url("https://fonts.gstatic.com/s/worksans/v24/QGY_z_wNahGAdqQ43RhVcI=
gYT2Xz5u32K67QBiEJpo3ZKyHaQfhf.woff2") format("woff2"); unicode-range: U+10=
0-2BA, U+2BD-2C5, U+2C7-2CC, U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1=
D00-1DBF, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+211=
3, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "Work Sans"; font-style: normal; font-weight: 700=
; src: url("https://fonts.gstatic.com/s/worksans/v24/QGY_z_wNahGAdqQ43RhVcI=
gYT2Xz5u32K67QBi8Jpo3ZKyHaQQ.woff2") format("woff2"); unicode-range: U+0-FF=
, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+=
2000-206F, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }
------MultipartBoundary--wjIh6xuEwOEDnUY6wRwfDLlxiXSHeUdd07dSW76Mno----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://viewsourcecode.org/snaptoken/kilo/style.css

@charset "utf-8";

@import url("https://fonts.googleapis.com/css?family=3DPT+Serif:400,400i,70=
0|Work+Sans:700|Fira+Mono:400,500");

* { margin: 0px; padding: 0px; box-sizing: border-box; }

body { font-family: "PT Serif", Utopia, Georgia, Times, "Apple Symbols", se=
rif; line-height: 140%; color: rgb(51, 51, 51); font-size: 18px; }

#container { width: 700px; margin: 18px auto; }

.bar { display: block; width: 100%; background-color: rgb(204, 238, 187); b=
ox-shadow: rgb(221, 221, 221) 0px 0px 15px 1px; }

.bar > nav { display: flex; justify-content: space-between; width: 700px; m=
argin: 0px auto; }

footer.bar > nav { justify-content: center; }

.bar > nav > a { display: block; padding: 2px 0px 4px; color: rgb(17, 85, 3=
4); }

#version { text-align: right; font-size: 12px; font-family: "Fira Mono", mo=
nospace; padding-right: 5px; }

#version a { color: rgb(51, 51, 51); }

h1, h2, h3, h4, h5, h6 { font-family: "Work Sans", Futura, Helvetica, Arial=
, sans-serif; color: rgb(34, 34, 34); line-height: 100%; margin-top: 32px; =
}

h2 a, h3 a, h4 a { color: inherit; text-decoration: none; }

h2 a::before, h3 a::before, h4 a::before { content: "#"; color: rgb(255, 25=
5, 255); font-weight: normal; transition: color 0.15s; display: block; floa=
t: left; width: 32px; margin-left: -32px; }

h2 a:hover::before, h3 a:hover::before, h4 a:hover::before { color: rgb(204=
, 204, 204); }

h1 { margin-top: 0px; font-size: 38px; border-bottom: 3px solid rgb(238, 11=
9, 204); display: inline-block; }

h2 { font-size: 26px; }

p { margin-top: 18px; }

ul, ol { margin-top: 18px; margin-left: 36px; }

hr { border-top: none; border-right: none; border-left: none; border-image:=
 initial; border-bottom: 1px solid rgb(136, 136, 136); }

a { color: rgb(34, 102, 221); }

code { font-family: "Fira Mono", monospace; font-size: inherit; white-space=
: nowrap; background-color: rgb(239, 244, 234); padding: 1px 3px; }

h1 code, h2 code, h3 code, h4 code, h5 code, h6 code { font-weight: normal;=
 }

kbd { font-family: "Fira Mono", monospace; border-radius: 3px; padding: 2px=
 3px; box-shadow: rgb(119, 119, 119) 1px 1px 1px; margin: 2px; font-size: 1=
4px; background: rgb(247, 247, 247); font-weight: 500; color: rgb(85, 85, 8=
5); white-space: nowrap; }

h1 kbd, h2 kbd, h3 kbd, h4 kbd, h5 kbd, h6 kbd { font-size: 80%; }

.diff code { font-size: 14px; line-height: 20px; padding: 0px; margin-botto=
m: 18px; white-space: inherit; }

.diff pre { background-color: rgb(255, 252, 250); padding: 5px 0px; }

.diff { border: 1px solid rgb(237, 231, 227); border-radius: 3px; margin-to=
p: 18px; }

.diff .diff-header { display: flex; justify-content: space-between; padding=
: 0px 5px; background-color: rgb(237, 231, 227); font-size: 16px; color: rg=
b(102, 102, 102); }

.diff .step-number { font-weight: bold; }

.diff .step-filename { font-weight: bold; }

.diff .step-name { font-family: "Fira Mono", monospace; font-size: 12px; }

.diff .diff-header a { text-decoration: none; color: rgb(102, 102, 102); }

.diff .diff-header a:hover { text-decoration: underline; }

.diff .step-filename a { text-decoration: underline; }

.diff .diff-footer { background-color: rgb(237, 231, 227); }

.diff .diff-footer > div { font-size: 12px; line-height: 16px; height: 16px=
; padding-right: 5px; text-align: right; }

.diff .diff-tag-c0 { color: rgb(187, 51, 51); }

.diff .diff-tag-c1 { color: rgb(51, 51, 187); }

.diff .diff-tag-c2 { color: rgb(51, 187, 51); }

.diff .diff-tag-c-unknown { color: rgb(170, 102, 34); }

.diff .line { display: block; height: 20px; padding: 0px 5px; position: rel=
ative; }

.diff .line.folded { background-color: rgb(238, 238, 255); opacity: 0.5; }

.diff ins.line { background-color: rgb(255, 255, 221); text-decoration: non=
e; }

.diff ins.line::after { display: block; content: ""; width: 20px; height: 2=
0px; background-image: url("i/arrow.png"); background-size: 20px 20px; posi=
tion: absolute; right: -24px; top: 0px; }

.diff del.line { background-color: rgb(255, 221, 221); text-decoration: lin=
e-through; }

.diff del.line::after { display: block; content: ""; width: 20px; height: 2=
0px; background-image: url("i/x.png"); background-size: 20px 20px; position=
: absolute; right: -24px; top: 0px; }

@media screen and (max-width: 700px) {
  #container { width: auto; margin: 18px 0px; padding: 0px 5px; }
  .bar > nav { width: auto; margin: 0px; padding: 0px 5px; }
  .highlight { overflow-x: scroll; }
  .diff .line { width: 700px; }
  .diff ins.line::after, .diff del.line::after { display: none; }
}

.highlight table td { padding: 5px; }

.highlight table pre { margin: 0px; }

.highlight .cm { color: rgb(153, 153, 136); font-style: italic; }

.highlight .cp { color: rgb(153, 153, 153); font-weight: 500; }

.highlight .c1 { color: rgb(153, 153, 136); font-style: italic; }

.highlight .cs { color: rgb(153, 153, 153); }

.highlight .c, .highlight .cd { color: rgb(153, 153, 136); font-style: ital=
ic; }

.highlight .err { color: rgb(166, 23, 23); background-color: rgb(227, 210, =
210); }

.highlight .gd { color: rgb(0, 0, 0); background-color: rgb(255, 221, 221);=
 }

.highlight .ge { color: rgb(0, 0, 0); font-style: italic; }

.highlight .gr { color: rgb(170, 0, 0); }

.highlight .gh { color: rgb(153, 153, 153); }

.highlight .gi { color: rgb(0, 0, 0); background-color: rgb(221, 255, 221);=
 }

.highlight .go { color: rgb(136, 136, 136); }

.highlight .gp { color: rgb(85, 85, 85); }

.highlight .gs { font-weight: 500; }

.highlight .gu { color: rgb(170, 170, 170); }

.highlight .gt { color: rgb(170, 0, 0); }

.highlight .kc { color: rgb(0, 0, 0); font-weight: 500; }

.highlight .kd { color: rgb(0, 0, 0); font-weight: 500; }

.highlight .kn { color: rgb(0, 0, 0); font-weight: 500; }

.highlight .kp { color: rgb(0, 0, 0); font-weight: 500; }

.highlight .kr { color: rgb(0, 0, 0); font-weight: 500; }

.highlight .kt { color: rgb(68, 85, 136); font-weight: 500; }

.highlight .k, .highlight .kv { color: rgb(0, 0, 0); font-weight: 500; }

.highlight .mf { color: rgb(0, 153, 153); }

.highlight .mh { color: rgb(0, 153, 153); }

.highlight .il { color: rgb(0, 153, 153); }

.highlight .mi { color: rgb(0, 153, 153); }

.highlight .mo { color: rgb(0, 153, 153); }

.highlight .m, .highlight .mb, .highlight .mx { color: rgb(0, 153, 153); }

.highlight .sb { color: rgb(221, 17, 68); }

.highlight .sc { color: rgb(221, 17, 68); }

.highlight .sd { color: rgb(221, 17, 68); }

.highlight .s2 { color: rgb(221, 17, 68); }

.highlight .se { color: rgb(221, 17, 68); }

.highlight .sh { color: rgb(221, 17, 68); }

.highlight .si { color: rgb(221, 17, 68); }

.highlight .sx { color: rgb(221, 17, 68); }

.highlight .sr { color: rgb(0, 153, 38); }

.highlight .s1 { color: rgb(221, 17, 68); }

.highlight .ss { color: rgb(153, 0, 115); }

.highlight .s { color: rgb(221, 17, 68); }

.highlight .na { color: rgb(0, 128, 128); }

.highlight .bp { color: rgb(153, 153, 153); }

.highlight .nb { color: rgb(0, 134, 179); }

.highlight .nc { color: rgb(68, 85, 136); font-weight: 500; }

.highlight .no { color: rgb(0, 128, 128); }

.highlight .nd { color: rgb(60, 93, 93); font-weight: 500; }

.highlight .ni { color: rgb(128, 0, 128); }

.highlight .ne { color: rgb(153, 0, 0); font-weight: 500; }

.highlight .nf { color: rgb(153, 0, 0); font-weight: 500; }

.highlight .nl { color: rgb(153, 0, 0); font-weight: 500; }

.highlight .nn { color: rgb(85, 85, 85); }

.highlight .nt { color: rgb(0, 0, 128); }

.highlight .vc { color: rgb(0, 128, 128); }

.highlight .vg { color: rgb(0, 128, 128); }

.highlight .vi { color: rgb(0, 128, 128); }

.highlight .nv { color: rgb(0, 128, 128); }

.highlight .ow { color: rgb(0, 0, 0); font-weight: 500; }

.highlight .o { color: rgb(0, 0, 0); font-weight: 500; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight { background-color: rgb(248, 248, 248); }
------MultipartBoundary--wjIh6xuEwOEDnUY6wRwfDLlxiXSHeUdd07dSW76Mno------
